Directory structure:
‚îî‚îÄ‚îÄ optica-sistema/
    ‚îú‚îÄ‚îÄ README.md
    ‚îú‚îÄ‚îÄ crear-carpetas.js
    ‚îú‚îÄ‚îÄ database.sql
    ‚îú‚îÄ‚îÄ jsconfig.json
    ‚îú‚îÄ‚îÄ next-env.d.ts
    ‚îú‚îÄ‚îÄ next.config.js
    ‚îú‚îÄ‚îÄ package.json
    ‚îú‚îÄ‚îÄ postcss.config.js
    ‚îú‚îÄ‚îÄ tailwind.config.js
    ‚îú‚îÄ‚îÄ tsconfig.json
    ‚îú‚îÄ‚îÄ .env.local
    ‚îú‚îÄ‚îÄ .eslintrc.json
    ‚îú‚îÄ‚îÄ public/
    ‚îÇ   ‚îî‚îÄ‚îÄ uploads/
    ‚îÇ       ‚îú‚îÄ‚îÄ general/
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
    ‚îÇ       ‚îú‚îÄ‚îÄ graduaciones/
    ‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
    ‚îÇ       ‚îî‚îÄ‚îÄ recetas/
    ‚îÇ           ‚îî‚îÄ‚îÄ .gitkeep
    ‚îî‚îÄ‚îÄ src/
        ‚îú‚îÄ‚îÄ middleware.js
        ‚îú‚îÄ‚îÄ app/
        ‚îÇ   ‚îú‚îÄ‚îÄ globals.css
        ‚îÇ   ‚îú‚îÄ‚îÄ layout.js
        ‚îÇ   ‚îú‚îÄ‚îÄ page.js
        ‚îÇ   ‚îú‚îÄ‚îÄ api/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ archivos/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ subir/
        ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ auth/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ logout/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ verificar/
        ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ clientes/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ [id]/
        ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ depositos/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ generar-hash/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ graduaciones/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ periodos/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ reportes/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ excel/
        ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ test-conexion/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ventas/
        ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ route.js
        ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ [id]/
        ‚îÇ   ‚îÇ           ‚îî‚îÄ‚îÄ route.js
        ‚îÇ   ‚îú‚îÄ‚îÄ clientes/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ [id]/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page.js
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ graduacion/
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ nueva-venta/
        ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ nuevo/
        ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îú‚îÄ‚îÄ fonts/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ GeistMonoVF.woff
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GeistVF.woff
        ‚îÇ   ‚îú‚îÄ‚îÄ login/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îú‚îÄ‚îÄ periodos/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îú‚îÄ‚îÄ reportes/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ page.js
        ‚îÇ   ‚îî‚îÄ‚îÄ ventas/
        ‚îÇ       ‚îú‚îÄ‚îÄ page.js
        ‚îÇ       ‚îî‚îÄ‚îÄ [id]/
        ‚îÇ           ‚îî‚îÄ‚îÄ page.js
        ‚îú‚îÄ‚îÄ assets/
        ‚îú‚îÄ‚îÄ components/
        ‚îÇ   ‚îú‚îÄ‚îÄ auth/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FormularioLogin.js
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ RutaProtegida.js
        ‚îÇ   ‚îú‚îÄ‚îÄ formularios/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FormularioCliente.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FormularioGraduacion.js
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ FormularioVenta.js
        ‚îÇ   ‚îú‚îÄ‚îÄ periodos/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GestionPeriodos.js
        ‚îÇ   ‚îú‚îÄ‚îÄ reportes/
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ GeneradorReportes.js
        ‚îÇ   ‚îú‚îÄ‚îÄ tablas/
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ HistorialDepositos.js
        ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ TablaClientes.js
        ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ TablaVentas.js
        ‚îÇ   ‚îî‚îÄ‚îÄ ui/
        ‚îÇ       ‚îú‚îÄ‚îÄ EstadisticasDepositos.js
        ‚îÇ       ‚îú‚îÄ‚îÄ Layout.js
        ‚îÇ       ‚îú‚îÄ‚îÄ Loading.js
        ‚îÇ       ‚îú‚îÄ‚îÄ Modal.js
        ‚îÇ       ‚îî‚îÄ‚îÄ Navbar.js
        ‚îú‚îÄ‚îÄ hooks/
        ‚îÇ   ‚îú‚îÄ‚îÄ useApi.js
        ‚îÇ   ‚îî‚îÄ‚îÄ useAuth.js
        ‚îî‚îÄ‚îÄ lib/
            ‚îú‚îÄ‚îÄ autenticacion.js
            ‚îú‚îÄ‚îÄ conexion-bd.js
            ‚îú‚îÄ‚îÄ utilidades.js
            ‚îî‚îÄ‚îÄ validaciones.js

================================================
File: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
File: crear-carpetas.js
================================================
// Script para crear las carpetas necesarias del proyecto
const fs = require('fs');
const path = require('path');

// Carpetas que necesitamos crear
const carpetas = [
  'public/uploads',
  'public/uploads/graduaciones',
  'public/uploads/recetas',
  'public/uploads/general'
];

console.log('üöÄ Creando estructura de carpetas...\n');

carpetas.forEach(carpeta => {
  const rutaCompleta = path.join(process.cwd(), carpeta);
  
  try {
    if (!fs.existsSync(rutaCompleta)) {
      fs.mkdirSync(rutaCompleta, { recursive: true });
      console.log(`‚úÖ Creada: ${carpeta}`);
    } else {
      console.log(`‚ÑπÔ∏è  Ya existe: ${carpeta}`);
    }
  } catch (error) {
    console.error(`‚ùå Error creando ${carpeta}:`, error.message);
  }
});

// Crear archivos .gitkeep para mantener las carpetas en git
const archivosGitkeep = [
  'public/uploads/graduaciones/.gitkeep',
  'public/uploads/recetas/.gitkeep',
  'public/uploads/general/.gitkeep'
];

console.log('\nüìÅ Creando archivos .gitkeep...\n');

archivosGitkeep.forEach(archivo => {
  const rutaCompleta = path.join(process.cwd(), archivo);
  
  try {
    if (!fs.existsSync(rutaCompleta)) {
      fs.writeFileSync(rutaCompleta, '# Mantener esta carpeta en git\n');
      console.log(`‚úÖ Creado: ${archivo}`);
    } else {
      console.log(`‚ÑπÔ∏è  Ya existe: ${archivo}`);
    }
  } catch (error) {
    console.error(`‚ùå Error creando ${archivo}:`, error.message);
  }
});

console.log('\nüéâ ¬°Estructura de carpetas creada exitosamente!\n');
console.log('üìã Pr√≥ximos pasos:');
console.log('   1. Ejecuta: npm run dev');
console.log('   2. Ve a: http://localhost:3000/clientes');
console.log('   3. Crea un cliente y agrega graduaciones');
console.log('   4. ¬°Prueba subir im√°genes de graduaciones!\n');


================================================
File: database.sql
================================================
-- QUERY TRUNCATED
-- =============================================
-- DUMP BASE DE DATOS - SISTEMA √ìPTICA
-- =============================================

-- Extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =============================================
-- TABLA: usuarios (para login del sistema)
-- =============================================
CREATE TABLE usuarios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre_usuario VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    nombre_completo VARCHAR(100) NOT NULL,
    activo BOOLEAN DEFAULT true,
    intentos_fallidos INTEGER DEFAULT 0,
    bloqueado_hasta TIMESTAMP,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: periodos_contables
-- =============================================
CREATE TABLE periodos_contables (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre VARCHAR(50) NOT NULL, -- "Septiembre / Octubre"
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    activo BOOLEAN DEFAULT true,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: clientes
-- =============================================
CREATE TABLE clientes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    expediente VARCHAR(20) UNIQUE,
    nombre_completo VARCHAR(100) NOT NULL,
    fecha_nacimiento DATE,
    edad INTEGER,
    ocupacion VARCHAR(100),
    direccion TEXT,
    email VARCHAR(100),
    telefono VARCHAR(20),
    celular VARCHAR(20),
    motivo_consulta TEXT,
    peso DECIMAL(5,2),
    talla DECIMAL(4,2),
    imc DECIMAL(4,2),
    fr INTEGER, -- Frecuencia respiratoria
    temperatura DECIMAL(4,1),
    saturacion_oxigeno INTEGER,
    ritmo_cardiaco INTEGER,
    presion_arterial VARCHAR(20),
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: antecedentes_medicos
-- =============================================
CREATE TABLE antecedentes_medicos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cliente_id UUID REFERENCES clientes(id) ON DELETE CASCADE,
    presion_alta BOOLEAN DEFAULT false,
    diabetes BOOLEAN DEFAULT false,
    alergias TEXT,
    notas_extras TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: graduaciones
-- =============================================
CREATE TABLE graduaciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    cliente_id UUID REFERENCES clientes(id) ON DELETE CASCADE,
    tipo VARCHAR(10) NOT NULL CHECK (tipo IN ('lejos', 'cerca')),
    
    -- Ojo Derecho (OD)
    od_esfera DECIMAL(4,2),
    od_cilindro DECIMAL(4,2),
    od_eje INTEGER,
    od_adicion DECIMAL(4,2),
    
    -- Ojo Izquierdo (OI)  
    oi_esfera DECIMAL(4,2),
    oi_cilindro DECIMAL(4,2),
    oi_eje INTEGER,
    oi_adicion DECIMAL(4,2),
    
    -- Imagen de resultados (opcional)
    imagen_resultado TEXT, -- URL o path de la imagen
    
    fecha_examen DATE DEFAULT CURRENT_DATE,
    notas TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: ventas
-- =============================================
CREATE TABLE ventas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    numero_venta VARCHAR(20) UNIQUE NOT NULL,
    cliente_id UUID REFERENCES clientes(id) ON DELETE CASCADE,
    periodo_id UUID REFERENCES periodos_contables(id) ON DELETE SET NULL,
    
    -- Informaci√≥n del producto
    marca_armazon VARCHAR(100),
    laboratorio VARCHAR(100) CHECK (laboratorio IN ('Laboratorio 1', 'Laboratorio 2', 'Laboratorio 3')),
    precio_armazon DECIMAL(10,2),
    precio_micas DECIMAL(10,2),
    costo_total DECIMAL(10,2) NOT NULL,
    
    -- Control de pagos
    total_depositado DECIMAL(10,2) DEFAULT 0,
    saldo_restante DECIMAL(10,2) NOT NULL,
    
    -- Archivos
    imagen_receta TEXT, -- URL o path de imagen de receta
    
    -- Estado y seguimiento
    estado VARCHAR(20) DEFAULT 'pendiente' CHECK (estado IN ('pendiente', 'en_laboratorio', 'listo', 'entregado', 'cancelado')),
    fecha_llegada_laboratorio DATE,
    fecha_entrega_cliente DATE,
    
    -- Notas
    notas TEXT,
    
    -- Metadatos
    fecha_venta DATE DEFAULT CURRENT_DATE,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- TABLA: depositos (historial de abonos)
-- =============================================
CREATE TABLE depositos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    venta_id UUID REFERENCES ventas(id) ON DELETE CASCADE,
    monto DECIMAL(10,2) NOT NULL,
    metodo_pago VARCHAR(20) NOT NULL CHECK (metodo_pago IN ('efectivo', 'tarjeta', 'transferencia')),
    fecha_deposito DATE DEFAULT CURRENT_DATE,
    notas TEXT,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =============================================
-- √çNDICES para optimizaci√≥n
-- =============================================
CREATE INDEX idx_clientes_nombre ON clientes(nombre_completo);
CREATE INDEX idx_clientes_expediente ON clientes(expediente);
CREATE INDEX idx_ventas_numero ON ventas(numero_venta);
CREATE INDEX idx_ventas_cliente ON ventas(cliente_id);
CREATE INDEX idx_ventas_periodo ON ventas(periodo_id);
CREATE INDEX idx_ventas_fecha ON ventas(fecha_venta);
CREATE INDEX idx_ventas_estado ON ventas(estado);
CREATE INDEX idx_depositos_venta ON depositos(venta_id);
CREATE INDEX idx_depositos_fecha ON depositos(fecha_deposito);
CREATE INDEX idx_graduaciones_cliente ON graduaciones(cliente_id);

-- =============================================
-- TRIGGERS para actualizar fecha_actualizacion
-- =============================================

-- Trigger para clientes
CREATE OR REPLACE FUNCTION actualizar_fecha_modificacion()
RETURNS TRIGGER AS $$
BEGIN
    NEW.fecha_actualizacion = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_clientes_actualizacion
    BEFORE UPDATE ON clientes
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_usuarios_actualizacion
    BEFORE UPDATE ON usuarios
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_ventas_actualizacion
    BEFORE UPDATE ON ventas
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_antecedentes_actualizacion
    BEFORE UPDATE ON antecedentes_medicos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

CREATE TRIGGER trigger_graduaciones_actualizacion
    BEFORE UPDATE ON graduaciones
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_fecha_modificacion();

-- =============================================
-- FUNCI√ìN para actualizar saldo restante en ventas
-- =============================================
CREATE OR REPLACE FUNCTION actualizar_saldo_venta()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Actualizar total depositado y saldo restante
        UPDATE ventas 
        SET 
            total_depositado = (
                SELECT COALESCE(SUM(monto), 0) 
                FROM depositos 
                WHERE venta_id = NEW.venta_id
            )
        WHERE id = NEW.venta_id;
        
        UPDATE ventas 
        SET saldo_restante = costo_total - total_depositado
        WHERE id = NEW.venta_id;
        
        RETURN NEW;
    END IF;
    
    IF TG_OP = 'DELETE' THEN
        -- Actualizar total depositado y saldo restante
        UPDATE ventas 
        SET 
            total_depositado = (
                SELECT COALESCE(SUM(monto), 0) 
                FROM depositos 
                WHERE venta_id = OLD.venta_id
            )
        WHERE id = OLD.venta_id;
        
        UPDATE ventas 
        SET saldo_restante = costo_total - total_depositado
        WHERE id = OLD.venta_id;
        
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_actualizar_saldo
    AFTER INSERT OR DELETE ON depositos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_saldo_venta();

-- =============================================
-- DATOS INICIALES
-- =============================================

-- Usuario administrador inicial (password: admin123)
INSERT INTO usuarios (nombre_usuario, password_hash, nombre_completo) 
VALUES ('admin', '$2b$10$rOzKqNvGyCMgRgL9QQ.YmeFSBnvGNP/xHZkH.wLmYxVHzplVfD6hC', 'Administrador Sistema');

-- Per√≠odo contable inicial
INSERT INTO periodos_contables (nombre, fecha_inicio, fecha_fin, activo) 
VALUES (
    CONCAT(
   


================================================
File: jsconfig.json
================================================



================================================
File: next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/building-your-application/configuring/typescript for more information.



================================================
File: next.config.js
================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  // Configuraci√≥n de im√°genes
  images: {
    domains: ['localhost'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '**',
      },
    ],
  },
  
  // Configuraci√≥n de archivos est√°ticos
  experimental: {
    serverComponentsExternalPackages: ['pg'],
  },
  
  // Configuraci√≥n de headers de seguridad
  async headers() {
    return [
      {
        source: '/api/:path*',
        headers: [
          {
            key: 'Access-Control-Allow-Origin',
            value: '*',
          },
          {
            key: 'Access-Control-Allow-Methods',
            value: 'GET, POST, PUT, DELETE, OPTIONS',
          },
          {
            key: 'Access-Control-Allow-Headers',
            value: 'Content-Type, Authorization',
          },
        ],
      },
      {
        source: '/uploads/:path*',
        headers: [
          {
            key: 'Cache-Control',
            value: 'public, max-age=31536000, immutable',
          },
        ],
      },
    ]
  },
  
  // Configuraci√≥n de webpack para archivos PDF y Excel
  webpack: (config) => {
    config.resolve.alias.canvas = false;
    config.resolve.alias.encoding = false;
    return config;
  },
}

module.exports = nextConfig


================================================
File: package.json
================================================
{
  "name": "optica-sistema",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/multer": "^2.0.0",
    "@types/uuid": "^10.0.0",
    "autoprefixer": "^10.4.21",
    "bcryptjs": "^3.0.2",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "next": "14.2.32",
    "next-auth": "^4.24.11",
    "pg": "^8.16.3",
    "react": "^18",
    "react-dom": "^18",
    "uuid": "^13.0.0",
    "xlsx": "^0.18.5"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.32",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}



================================================
File: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        optica: {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
      }
    },
  },
  plugins: [],
}


================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "tailwind.config.js", "src/app/page.js", "src/app/layout.js"],
  "exclude": ["node_modules"]
}



================================================
File: .env.local
================================================
DATABASE_URL=postgresql://neondb_owner:npg_pRmuL2hCJ6aPqep-sweet-leaf-ad5ujtjh-pooler.c-2.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require

JWT_SECRET=optica_jwt_secreto_super_seguro_2024
JWT_EXPIRES_IN=7d

NEXTAUTH_SECRET=optica_nextauth_secret_2024
NEXTAUTH_URL=http://localhost:3000

MAX_LOGIN_ATTEMPTS=5
LOCKOUT_TIME_MINUTES=15

UPLOAD_MAX_SIZE=5242880
ALLOWED_IMAGE_TYPES=image/jpeg,image/png,image/jpg

NODE_ENV=development

EMPRESA_NOMBRE=Optica Sistema
EMPRESA_DIRECCION=Tu direccion aqui
EMPRESA_TELEFONO=Tu telefono aqui


================================================
File: .eslintrc.json
================================================
{
  "extends": "next/core-web-vitals",
  "rules": {
    "@typescript-eslint/no-require-imports": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "no-unused-vars": "off"
  },
  "overrides": [
    {
      "files": ["*.config.js", "*.config.ts"],
      "rules": {
        "@typescript-eslint/no-require-imports": "off",
        "import/no-anonymous-default-export": "off"
      }
    }
  ]
}


================================================
File: public/uploads/general/.gitkeep
================================================
# Mantener esta carpeta en git



================================================
File: public/uploads/graduaciones/.gitkeep
================================================
# Mantener esta carpeta en git



================================================
File: public/uploads/recetas/.gitkeep
================================================
# Mantener esta carpeta en git



================================================
File: src/middleware.js
================================================
import { NextResponse } from 'next/server';

export function middleware(request) {
  const { pathname } = request.nextUrl;

  // Rutas p√∫blicas que no requieren autenticaci√≥n
  const rutasPublicas = ['/login', '/api/auth/login', '/api/auth/logout', '/api/test-conexion', '/api/generar-hash'];
  
  // Si es una ruta p√∫blica, permitir acceso
  if (rutasPublicas.includes(pathname)) {
    return NextResponse.next();
  }

  // Si es ruta API, verificar que tenga token (header o cookie)
  if (pathname.startsWith('/api/')) {
    let token = null;
    
    // Intentar obtener token del header
    const authorization = request.headers.get('authorization');
    if (authorization && authorization.startsWith('Bearer ')) {
      token = authorization.replace('Bearer ', '');
    }
    
    // Si no hay header, intentar cookie
    if (!token) {
      token = request.cookies.get('token-optica')?.value;
    }
    
    if (!token) {
      return NextResponse.json(
        { error: 'Token de acceso requerido' },
        { status: 401 }
      );
    }
    
    // Solo verificar que el token existe y tiene longitud m√≠nima
    if (token.length < 50) {
      return NextResponse.json(
        { error: 'Token inv√°lido' },
        { status: 401 }
      );
    }
    
    return NextResponse.next();
  }

  // Para rutas de p√°ginas, solo verificar que existe la cookie
  const tokenCookie = request.cookies.get('token-optica')?.value;
  
  if (!tokenCookie || tokenCookie.length < 50) {
    return NextResponse.redirect(new URL('/login', request.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|uploads).*)',
  ],
};


================================================
File: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Estilos b√°sicos */
body {
  font-family: Inter, system-ui, sans-serif;
  background-color: #fafafa;
  color: #171717;
}

.btn {
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: all 0.2s;
  border: none;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-primary {
  background-color: #0ea5e9;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background-color: #0284c7;
}

.btn-secondary {
  background-color: #6b7280;
  color: white;
}

.btn-secondary:hover:not(:disabled) {
  background-color: #4b5563;
}

.btn-sm {
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
}

.btn-lg {
  padding: 0.75rem 1.5rem;
  font-size: 1.125rem;
}

.form-input {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid #d4d4d4;
  border-radius: 0.375rem;
  font-size: 0.875rem;
}

.form-input:focus {
  outline: none;
  border-color: #0ea5e9;
  box-shadow: 0 0 0 3px rgba(14, 165, 233, 0.1);
}

.form-input:disabled {
  background-color: #f3f4f6;
  color: #6b7280;
}

/* Spinner/Loading */
.spinner {
  width: 1rem;
  height: 1rem;
  border: 2px solid #f3f4f6;
  border-top: 2px solid #0ea5e9;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Utilidades adicionales */
.resize-vertical {
  resize: vertical;
}

.shadow-hover {
  transition: box-shadow 0.2s;
}

.shadow-hover:hover {
  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Estilos para formularios */
.form-group {
  margin-bottom: 1rem;
}

.form-label {
  display: block;
  font-size: 0.875rem;
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.25rem;
}

.form-error {
  color: #dc2626;
  font-size: 0.75rem;
  margin-top: 0.25rem;
}

/* Estilos para checkboxes y radios */
input[type="checkbox"], input[type="radio"] {
  width: 1rem;
  height: 1rem;
  color: #0ea5e9;
  background-color: #fff;
  border: 1px solid #d1d5db;
  border-radius: 0.25rem;
}

input[type="radio"] {
  border-radius: 50%;
}

/* Estilos para tablas */
.table-responsive {
  overflow-x: auto;
}

.table {
  width: 100%;
  border-collapse: collapse;
}

.table th,
.table td {
  padding: 0.75rem;
  text-align: left;
  border-bottom: 1px solid #e5e7eb;
}

.table th {
  background-color: #f9fafb;
  font-weight: 600;
  color: #374151;
  font-size: 0.75rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.table tbody tr:hover {
  background-color: #f9fafb;
}

/* Estilos para mensajes */
.alert {
  padding: 1rem;
  border-radius: 0.5rem;
  margin-bottom: 1rem;
}

.alert-success {
  background-color: #ecfdf5;
  border: 1px solid #a7f3d0;
  color: #065f46;
}

.alert-error {
  background-color: #fef2f2;
  border: 1px solid #fca5a5;
  color: #991b1b;
}

.alert-warning {
  background-color: #fffbeb;
  border: 1px solid #fde68a;
  color: #92400e;
}

.alert-info {
  background-color: #eff6ff;
  border: 1px solid #93c5fd;
  color: #1e40af;
}

/* Responsive utilities */
@media (max-width: 768px) {
  .btn {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
  }
  
  .form-input {
    font-size: 1rem; /* Prevenir zoom en iOS */
  }
}

/* Animaciones suaves */
.fade-in {
  animation: fadeIn 0.3s ease-in;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.slide-in {
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from { transform: translateX(-100%); }
  to { transform: translateX(0); }
}


================================================
File: src/app/layout.js
================================================
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Sistema √ìptica',
  description: 'Sistema integral de gesti√≥n para √≥ptica - Clientes, ventas y reportes',
}

export default function RootLayout({ children }) {
  return (
    <html lang="es-MX">
      <body className={`${inter.className} antialiased`}>
        <div className="min-h-screen bg-neutral-50">
          {children}
        </div>
      </body>
    </html>
  )
}


================================================
File: src/app/page.js
================================================
"use client";

import { useEffect, useState } from "react";
import Link from "next/link";

export default function Dashboard() {
  const [estadisticas, setEstadisticas] = useState({
    clientes: 0,
    ventas: 0,
    pendientes: 0,
    ingresos: 0,
  });
  const [cargando, setCargando] = useState(true);

  useEffect(() => {
    cargarEstadisticas();
  }, []);

  const cargarEstadisticas = async () => {
    try {
      // Por ahora datos de ejemplo, despu√©s conectaremos con las APIs reales
      setTimeout(() => {
        setEstadisticas({
          clientes: 125,
          ventas: 89,
          pendientes: 12,
          ingresos: 45680.0,
        });
        setCargando(false);
      }, 1000);
    } catch (error) {
      console.error("Error cargando estad√≠sticas:", error);
      setCargando(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <span className="text-2xl">üëì</span>
              <h1 className="ml-2 text-xl font-bold text-gray-900">
                Sistema √ìptica
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link
                href="/ventas"
                className="text-gray-600 hover:text-gray-900"
              >
                üõí Ventas
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Contenido principal */}
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          Dashboard - Sistema √ìptica
        </h1>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Clientes</h3>
            <p className="text-2xl font-bold text-blue-600">
              {cargando ? "..." : estadisticas.clientes}
            </p>
          </div>

          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Ventas</h3>
            <p className="text-2xl font-bold text-green-600">
              {cargando ? "..." : estadisticas.ventas}
            </p>
          </div>

          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Pendientes</h3>
            <p className="text-2xl font-bold text-yellow-600">
              {cargando ? "..." : estadisticas.pendientes}
            </p>
          </div>

          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-sm font-medium text-gray-500">Ingresos</h3>
            <p className="text-2xl font-bold text-purple-600">
              {cargando ? "..." : `$${estadisticas.ingresos.toLocaleString()}`}
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
          <Link
            href="/clientes/nuevo"
            className="bg-blue-500 hover:bg-blue-600 text-white p-6 rounded-lg text-center transition-colors"
          >
            <div className="text-3xl mb-2">üë§</div>
            <h3 className="font-semibold">Nuevo Cliente</h3>
          </Link>

          <Link
            href="/clientes"
            className="bg-green-500 hover:bg-green-600 text-white p-6 rounded-lg text-center transition-colors"
          >
            <div className="text-3xl mb-2">üë•</div>
            <h3 className="font-semibold">Ver Clientes</h3>
          </Link>

          <Link
            href="/ventas"
            className="bg-yellow-500 hover:bg-yellow-600 text-white p-6 rounded-lg text-center transition-colors"
          >
            <div className="text-3xl mb-2">üõí</div>
            <h3 className="font-semibold">Ventas</h3>
          </Link>

          <Link
            href="/periodos"
            className="bg-purple-500 hover:bg-purple-600 text-white p-6 rounded-lg text-center transition-colors"
          >
            <div className="text-3xl mb-2">üìÖ</div>
            <h3 className="font-semibold">Per√≠odos</h3>
          </Link>

          <Link
            href="/reportes"
            className="bg-red-500 hover:bg-red-600 text-white p-6 rounded-lg text-center transition-colors"
          >
            <div className="text-3xl mb-2">üìä</div>
            <h3 className="font-semibold">Reportes</h3>
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/app/api/archivos/subir/route.js
================================================
import { NextResponse } from "next/server";
import { writeFile, mkdir } from "fs/promises";
import { join } from "path";
import { v4 as uuidv4 } from "uuid";

// Configuraci√≥n de archivos
const TAMA√ëO_MAX_ARCHIVO = 5 * 1024 * 1024; // 5MB
const TIPOS_IMAGEN_PERMITIDOS = ["image/jpeg", "image/jpg", "image/png"];

export async function POST(request) {
  try {
    const formData = await request.formData();
    const archivo = formData.get("archivo");
    const tipo = formData.get("tipo") || "general"; // 'graduacion', 'receta', 'general'

    if (!archivo) {
      return NextResponse.json(
        { error: "No se proporcion√≥ ning√∫n archivo" },
        { status: 400 }
      );
    }

    // Validar tipo de archivo
    if (!TIPOS_IMAGEN_PERMITIDOS.includes(archivo.type)) {
      return NextResponse.json(
        { error: "Tipo de archivo no permitido. Solo JPG, JPEG y PNG." },
        { status: 400 }
      );
    }

    // Validar tama√±o
    if (archivo.size > TAMA√ëO_MAX_ARCHIVO) {
      return NextResponse.json(
        { error: "El archivo excede el tama√±o m√°ximo de 5MB" },
        { status: 400 }
      );
    }

    // Generar nombre √∫nico para el archivo
    const extension = archivo.name.split(".").pop();
    const nombreArchivo = `${uuidv4()}.${extension}`;

    // Determinar carpeta seg√∫n el tipo
    let carpeta = "general";
    if (tipo === "graduacion") {
      carpeta = "graduaciones";
    } else if (tipo === "receta") {
      carpeta = "recetas";
    }

    // Crear ruta completa
    const rutaCarpeta = join(process.cwd(), "public", "uploads", carpeta);
    const rutaArchivo = join(rutaCarpeta, nombreArchivo);

    try {
      // Crear carpeta si no existe
      await mkdir(rutaCarpeta, { recursive: true });

      // Convertir archivo a buffer y guardar
      const bytes = await archivo.arrayBuffer();
      const buffer = Buffer.from(bytes);

      await writeFile(rutaArchivo, buffer);

      // Generar URL relativa para la base de datos
      const rutaRelativa = `${carpeta}/${nombreArchivo}`;
      const urlCompleta = `/uploads/${rutaRelativa}`;

      return NextResponse.json({
        mensaje: "Archivo subido exitosamente",
        ruta: rutaRelativa,
        url: urlCompleta,
        nombre_original: archivo.name,
        tama√±o: archivo.size,
        tipo: archivo.type,
      });
    } catch (errorArchivo) {
      console.error("Error guardando archivo:", errorArchivo);
      return NextResponse.json(
        { error: "Error guardando el archivo en el servidor" },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("Error procesando archivo:", error);
    return NextResponse.json(
      { error: "Error procesando el archivo" },
      { status: 500 }
    );
  }
}

// GET - Obtener informaci√≥n de archivo (opcional)
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const ruta = searchParams.get("ruta");

    if (!ruta) {
      return NextResponse.json(
        { error: "Ruta de archivo requerida" },
        { status: 400 }
      );
    }

    // Verificar que el archivo existe
    const rutaCompleta = join(process.cwd(), "public", "uploads", ruta);

    try {
      const fs = require("fs");
      const stats = fs.statSync(rutaCompleta);

      return NextResponse.json({
        existe: true,
        tama√±o: stats.size,
        fecha_modificacion: stats.mtime,
        url: `/uploads/${ruta}`,
      });
    } catch (errorStat) {
      return NextResponse.json(
        { error: "Archivo no encontrado" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error obteniendo informaci√≥n de archivo:", error);
    return NextResponse.json(
      { error: "Error obteniendo informaci√≥n del archivo" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar archivo
export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const ruta = searchParams.get("ruta");

    if (!ruta) {
      return NextResponse.json(
        { error: "Ruta de archivo requerida" },
        { status: 400 }
      );
    }

    const rutaCompleta = join(process.cwd(), "public", "uploads", ruta);

    try {
      const fs = require("fs");
      fs.unlinkSync(rutaCompleta);

      return NextResponse.json({
        mensaje: "Archivo eliminado exitosamente",
      });
    } catch (errorEliminar) {
      return NextResponse.json(
        { error: "Error eliminando archivo o archivo no encontrado" },
        { status: 404 }
      );
    }
  } catch (error) {
    console.error("Error eliminando archivo:", error);
    return NextResponse.json(
      { error: "Error eliminando archivo" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/auth/login/route.js
================================================
import { NextResponse } from 'next/server'
import { autenticarUsuario, validarDatosLogin } from '@/lib/autenticacion'
import { verificarConexion } from '@/lib/conexion-bd'

// Manejar intentos de login por IP (simple rate limiting)
const intentosPorIP = new Map()
const LIMITE_INTENTOS = 5
const TIEMPO_BLOQUEO = 15 * 60 * 1000 // 15 minutos

function verificarLimiteIntentos(ip) {
  const ahora = Date.now()
  const datosIP = intentosPorIP.get(ip)

  if (!datosIP) {
    intentosPorIP.set(ip, { intentos: 1, ultimoIntento: ahora })
    return true
  }

  // Si han pasado m√°s de 15 minutos, resetear contador
  if (ahora - datosIP.ultimoIntento > TIEMPO_BLOQUEO) {
    intentosPorIP.set(ip, { intentos: 1, ultimoIntento: ahora })
    return true
  }

  // Si excede el l√≠mite de intentos
  if (datosIP.intentos >= LIMITE_INTENTOS) {
    return false
  }

  // Incrementar intentos
  datosIP.intentos++
  datosIP.ultimoIntento = ahora
  return true
}

export async function POST(request) {
  try {
    // Obtener IP del cliente
    const ip = request.headers.get('x-forwarded-for')?.split(',')[0] || 
               request.headers.get('x-real-ip') || 
               'unknown'

    // Verificar l√≠mite de intentos por IP
    if (!verificarLimiteIntentos(ip)) {
      return NextResponse.json(
        { 
          error: 'Demasiados intentos de login desde esta IP. Intente en 15 minutos.' 
        },
        { status: 429 }
      )
    }

    // Verificar conexi√≥n a base de datos
    const conexionOk = await verificarConexion()
    if (!conexionOk) {
      return NextResponse.json(
        { error: 'Error de conexi√≥n a la base de datos' },
        { status: 500 }
      )
    }

    // Obtener datos del body
    const { nombreUsuario, password } = await request.json()

    // Validar datos de entrada
    const validacion = validarDatosLogin(nombreUsuario, password)
    if (!validacion.esValido) {
      return NextResponse.json(
        { 
          error: 'Datos inv√°lidos',
          errores: validacion.errores 
        },
        { status: 400 }
      )
    }

    // Intentar autenticaci√≥n
    const resultado = await autenticarUsuario(nombreUsuario, password)

    // Login exitoso, resetear intentos de esta IP
    if (intentosPorIP.has(ip)) {
      intentosPorIP.delete(ip)
    }

    // Crear respuesta con cookie de sesi√≥n
    const response = NextResponse.json({
      mensaje: 'Login exitoso',
      usuario: resultado.usuario
    })

    // Configurar cookie segura
    response.cookies.set('token-optica', resultado.token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 7 * 24 * 60 * 60, // 7 d√≠as en segundos
      path: '/'
    })

    return response

  } catch (error) {
    console.error('Error en login:', error)

    // Categorizar errores
    if (error.message.includes('Usuario') || 
        error.message.includes('Contrase√±a') || 
        error.message.includes('bloqueado')) {
      return NextResponse.json(
        { error: error.message },
        { status: 401 }
      )
    }

    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    )
  }
}

// M√©todo OPTIONS para CORS
export async function OPTIONS() {
  return NextResponse.json({}, { status: 200 })
}


================================================
File: src/app/api/auth/logout/route.js
================================================
import { NextResponse } from 'next/server'

export async function POST(request) {
  try {
    // Crear respuesta de logout exitoso
    const response = NextResponse.json({
      mensaje: 'Sesi√≥n cerrada exitosamente'
    })

    // Eliminar la cookie de sesi√≥n
    response.cookies.set('token-optica', '', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'lax',
      maxAge: 0, // Expirar inmediatamente
      path: '/'
    })

    return response

  } catch (error) {
    console.error('Error en logout:', error)
    
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    )
  }
}

// Tambi√©n permitir GET para compatibilidad
export async function GET(request) {
  return POST(request)
}


================================================
File: src/app/api/auth/verificar/route.js
================================================
import { NextResponse } from 'next/server'
import { obtenerUsuarioDeToken } from '@/lib/autenticacion'

export async function GET(request) {
  try {
    // Intentar obtener token de diferentes fuentes
    let token = null
    
    // 1. Primero intentar desde cookie
    const tokenCookie = request.cookies.get('token-optica')?.value
    if (tokenCookie) {
      token = tokenCookie
    }
    
    // 2. Si no hay cookie, intentar desde header (para compatibilidad con API)
    if (!token) {
      const authorization = request.headers.get('authorization')
      if (authorization && authorization.startsWith('Bearer ')) {
        token = authorization.replace('Bearer ', '')
      }
    }

    if (!token) {
      return NextResponse.json(
        { error: 'Token de autorizaci√≥n requerido' },
        { status: 401 }
      )
    }

    // Verificar y obtener datos del usuario
    const usuario = await obtenerUsuarioDeToken(token)

    return NextResponse.json({
      valido: true,
      usuario
    })

  } catch (error) {
    console.error('Error verificando token:', error)

    // Diferentes tipos de errores de token
    if (error.message.includes('jwt expired')) {
      return NextResponse.json(
        { error: 'Token expirado' },
        { status: 401 }
      )
    }

    if (error.message.includes('jwt malformed') || error.message.includes('invalid signature')) {
      return NextResponse.json(
        { error: 'Token inv√°lido' },
        { status: 401 }
      )
    }

    if (error.message.includes('Usuario no encontrado')) {
      return NextResponse.json(
        { error: 'Usuario no encontrado o inactivo' },
        { status: 401 }
      )
    }

    return NextResponse.json(
      { error: 'Error verificando token' },
      { status: 500 }
    )
  }
}

export async function POST(request) {
  // Mismo comportamiento que GET para compatibilidad
  return GET(request)
}


================================================
File: src/app/api/clientes/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta, ejecutarTransaccion } from "@/lib/conexion-bd";
import { validarCliente, limpiarDatos } from "@/lib/validaciones";
import { generarNumeroExpediente } from "@/lib/autenticacion";

// GET - Obtener todos los clientes
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const limite = parseInt(searchParams.get("limite")) || 50;
    const pagina = parseInt(searchParams.get("pagina")) || 1;
    const busqueda = searchParams.get("busqueda") || "";

    const offset = (pagina - 1) * limite;

    let consulta;
    let parametros = [];

    if (busqueda) {
      // Con b√∫squeda
      consulta = `
        SELECT c.*, 
               COALESCE(v.total_ventas, 0) as total_ventas,
               COALESCE(v.total_gastado, 0) as total_gastado
        FROM clientes c
        LEFT JOIN (
          SELECT 
            cliente_id,
            COUNT(*) as total_ventas,
            SUM(costo_total) as total_gastado
          FROM ventas 
          GROUP BY cliente_id
        ) v ON c.id = v.cliente_id
        WHERE c.nombre_completo ILIKE $1 OR c.expediente ILIKE $1
        ORDER BY c.fecha_registro DESC
        LIMIT $2 OFFSET $3
      `;
      parametros = [`%${busqueda}%`, limite, offset];
    } else {
      // Sin b√∫squeda
      consulta = `
        SELECT c.*, 
               COALESCE(v.total_ventas, 0) as total_ventas,
               COALESCE(v.total_gastado, 0) as total_gastado
        FROM clientes c
        LEFT JOIN (
          SELECT 
            cliente_id,
            COUNT(*) as total_ventas,
            SUM(costo_total) as total_gastado
          FROM ventas 
          GROUP BY cliente_id
        ) v ON c.id = v.cliente_id
        ORDER BY c.fecha_registro DESC
        LIMIT $1 OFFSET $2
      `;
      parametros = [limite, offset];
    }

    console.log("Ejecutando consulta clientes:", consulta);
    console.log("Par√°metros:", parametros);

    const resultado = await ejecutarConsulta(consulta, parametros);

    console.log(
      "Resultado clientes:",
      resultado.rows.length,
      "clientes encontrados"
    );

    // Mapear fecha_registro a fecha_creacion para compatibilidad con el frontend
    const clientesConCompatibilidad = resultado.rows.map((cliente) => ({
      ...cliente,
      fecha_creacion: cliente.fecha_registro,
    }));

    return NextResponse.json({
      clientes: clientesConCompatibilidad,
      pagination: {
        pagina,
        limite,
        total: resultado.rows.length,
      },
    });
  } catch (error) {
    console.error("Error obteniendo clientes:", error);
    return NextResponse.json(
      { error: "Error obteniendo clientes: " + error.message },
      { status: 500 }
    );
  }
}

// POST - Crear nuevo cliente
export async function POST(request) {
  try {
    const datosOriginales = await request.json();

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarCliente(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Crear cliente y antecedentes en una transacci√≥n
    const resultado = await ejecutarTransaccion(async (cliente) => {
      // Generar expediente √∫nico si no se proporciona
      const expediente = datosLimpios.expediente || generarNumeroExpediente();

      // Insertar cliente
      const consultaCliente = `
        INSERT INTO clientes (
          expediente, nombre_completo, fecha_nacimiento, edad, ocupacion,
          direccion, email, telefono, celular, motivo_consulta, peso, talla, imc,
          fr, temperatura, saturacion_oxigeno, ritmo_cardiaco, presion_arterial
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18
        ) RETURNING *
      `;

      const parametrosCliente = [
        expediente,
        datosLimpios.nombre_completo,
        datosLimpios.fecha_nacimiento || null,
        datosLimpios.edad ? parseInt(datosLimpios.edad) : null,
        datosLimpios.ocupacion,
        datosLimpios.direccion,
        datosLimpios.email,
        datosLimpios.telefono,
        datosLimpios.celular,
        datosLimpios.motivo_consulta,
        datosLimpios.peso ? parseFloat(datosLimpios.peso) : null,
        datosLimpios.talla ? parseFloat(datosLimpios.talla) : null,
        datosLimpios.imc ? parseFloat(datosLimpios.imc) : null,
        datosLimpios.fr ? parseInt(datosLimpios.fr) : null,
        datosLimpios.temperatura ? parseFloat(datosLimpios.temperatura) : null,
        datosLimpios.saturacion_oxigeno
          ? parseInt(datosLimpios.saturacion_oxigeno)
          : null,
        datosLimpios.ritmo_cardiaco
          ? parseInt(datosLimpios.ritmo_cardiaco)
          : null,
        datosLimpios.presion_arterial,
      ];

      const resultadoCliente = await cliente.query(
        consultaCliente,
        parametrosCliente
      );
      const clienteCreado = resultadoCliente.rows[0];

      // Insertar antecedentes m√©dicos
      const consultaAntecedentes = `
        INSERT INTO antecedentes_medicos (
          cliente_id, presion_alta, diabetes, alergias, notas_extras
        ) VALUES ($1, $2, $3, $4, $5)
        RETURNING *
      `;

      const parametrosAntecedentes = [
        clienteCreado.id,
        datosLimpios.presion_alta || false,
        datosLimpios.diabetes || false,
        datosLimpios.alergias,
        datosLimpios.notas_extras,
      ];

      await cliente.query(consultaAntecedentes, parametrosAntecedentes);

      return clienteCreado;
    });

    return NextResponse.json(
      {
        mensaje: "Cliente registrado exitosamente",
        cliente: resultado,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creando cliente:", error);

    if (error.code === "23505") {
      // Violaci√≥n de unicidad
      return NextResponse.json(
        { error: "Ya existe un cliente con ese expediente" },
        { status: 409 }
      );
    }

    return NextResponse.json(
      { error: "Error registrando cliente" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/clientes/[id]/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta } from "@/lib/conexion-bd";
import { validarCliente, limpiarDatos } from "@/lib/validaciones";

// GET - Obtener cliente por ID con informaci√≥n completa
export async function GET(request, { params }) {
  try {
    const { id } = params;

    if (!id) {
      return NextResponse.json(
        { error: "ID de cliente requerido" },
        { status: 400 }
      );
    }

    // Obtener datos completos del cliente incluyendo antecedentes
    const consultaCliente = `
      SELECT 
        c.*,
        a.presion_alta,
        a.diabetes,
        a.alergias,
        a.notas_extras as antecedentes_notas
      FROM clientes c
      LEFT JOIN antecedentes_medicos a ON c.id = a.cliente_id
      WHERE c.id = $1
    `;

    const resultadoCliente = await ejecutarConsulta(consultaCliente, [id]);

    if (resultadoCliente.rows.length === 0) {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    const cliente = resultadoCliente.rows[0];

    // Obtener graduaciones del cliente
    const consultaGraduaciones = `
      SELECT * FROM graduaciones 
      WHERE cliente_id = $1 
      ORDER BY tipo, fecha_examen DESC
    `;
    const resultadoGraduaciones = await ejecutarConsulta(consultaGraduaciones, [
      id,
    ]);

    // Obtener ventas del cliente
    const consultaVentas = `
      SELECT 
        v.*,
        p.nombre as periodo_nombre,
        COUNT(d.id) as total_depositos,
        COALESCE(SUM(d.monto), 0) as total_depositado_calculado
      FROM ventas v
      LEFT JOIN periodos_contables p ON v.periodo_id = p.id
      LEFT JOIN depositos d ON v.id = d.venta_id
      WHERE v.cliente_id = $1
      GROUP BY v.id, p.nombre
      ORDER BY v.fecha_venta DESC
    `;
    const resultadoVentas = await ejecutarConsulta(consultaVentas, [id]);

    // Calcular estad√≠sticas del cliente
    const estadisticas = {
      total_ventas: resultadoVentas.rows.length,
      total_gastado: resultadoVentas.rows.reduce(
        (total, venta) => total + parseFloat(venta.costo_total || 0),
        0
      ),
      total_depositado: resultadoVentas.rows.reduce(
        (total, venta) => total + parseFloat(venta.total_depositado || 0),
        0
      ),
      saldo_pendiente: resultadoVentas.rows.reduce(
        (total, venta) => total + parseFloat(venta.saldo_restante || 0),
        0
      ),
      graduaciones_registradas: resultadoGraduaciones.rows.length,
    };

    return NextResponse.json({
      cliente,
      graduaciones: resultadoGraduaciones.rows,
      ventas: resultadoVentas.rows,
      estadisticas,
    });
  } catch (error) {
    console.error("Error obteniendo cliente:", error);
    return NextResponse.json(
      { error: "Error obteniendo informaci√≥n del cliente" },
      { status: 500 }
    );
  }
}

// PUT - Actualizar cliente
export async function PUT(request, { params }) {
  try {
    const { id } = params;
    const datosOriginales = await request.json();

    if (!id) {
      return NextResponse.json(
        { error: "ID de cliente requerido" },
        { status: 400 }
      );
    }

    // Verificar que el cliente existe
    const verificarCliente = await ejecutarConsulta(
      "SELECT id FROM clientes WHERE id = $1",
      [id]
    );

    if (verificarCliente.rows.length === 0) {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarCliente(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Actualizar cliente y antecedentes en transacci√≥n
    const resultado = await ejecutarTransaccion(async (cliente) => {
      // Actualizar datos del cliente
      const consultaActualizarCliente = `
        UPDATE clientes SET
          nombre_completo = $2,
          fecha_nacimiento = $3,
          edad = $4,
          ocupacion = $5,
          direccion = $6,
          email = $7,
          telefono = $8,
          celular = $9,
          motivo_consulta = $10,
          peso = $11,
          talla = $12,
          imc = $13,
          fr = $14,
          temperatura = $15,
          saturacion_oxigeno = $16,
          ritmo_cardiaco = $17,
          presion_arterial = $18,
          fecha_actualizacion = CURRENT_TIMESTAMP
        WHERE id = $1
        RETURNING *
      `;

      const parametrosCliente = [
        id,
        datosLimpios.nombre_completo,
        datosLimpios.fecha_nacimiento || null,
        datosLimpios.edad ? parseInt(datosLimpios.edad) : null,
        datosLimpios.ocupacion,
        datosLimpios.direccion,
        datosLimpios.email,
        datosLimpios.telefono,
        datosLimpios.celular,
        datosLimpios.motivo_consulta,
        datosLimpios.peso ? parseFloat(datosLimpios.peso) : null,
        datosLimpios.talla ? parseFloat(datosLimpios.talla) : null,
        datosLimpios.imc ? parseFloat(datosLimpios.imc) : null,
        datosLimpios.fr ? parseInt(datosLimpios.fr) : null,
        datosLimpios.temperatura ? parseFloat(datosLimpios.temperatura) : null,
        datosLimpios.saturacion_oxigeno
          ? parseInt(datosLimpios.saturacion_oxigeno)
          : null,
        datosLimpios.ritmo_cardiaco
          ? parseInt(datosLimpios.ritmo_cardiaco)
          : null,
        datosLimpios.presion_arterial,
      ];

      const resultadoCliente = await cliente.query(
        consultaActualizarCliente,
        parametrosCliente
      );

      // Actualizar antecedentes m√©dicos
      const consultaActualizarAntecedentes = `
        UPDATE antecedentes_medicos SET
          presion_alta = $2,
          diabetes = $3,
          alergias = $4,
          notas_extras = $5,
          fecha_actualizacion = CURRENT_TIMESTAMP
        WHERE cliente_id = $1
      `;

      const parametrosAntecedentes = [
        id,
        datosLimpios.presion_alta || false,
        datosLimpios.diabetes || false,
        datosLimpios.alergias,
        datosLimpios.notas_extras,
      ];

      await cliente.query(
        consultaActualizarAntecedentes,
        parametrosAntecedentes
      );

      return resultadoCliente.rows[0];
    });

    return NextResponse.json({
      mensaje: "Cliente actualizado exitosamente",
      cliente: resultado,
    });
  } catch (error) {
    console.error("Error actualizando cliente:", error);

    if (error.code === "23505") {
      return NextResponse.json(
        { error: "Ya existe un cliente con ese expediente" },
        { status: 409 }
      );
    }

    return NextResponse.json(
      { error: "Error actualizando cliente" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar cliente (soft delete recomendado)
export async function DELETE(request, { params }) {
  try {
    const { id } = params;

    if (!id) {
      return NextResponse.json(
        { error: "ID de cliente requerido" },
        { status: 400 }
      );
    }

    // Verificar que el cliente existe
    const verificarCliente = await ejecutarConsulta(
      "SELECT id FROM clientes WHERE id = $1",
      [id]
    );

    if (verificarCliente.rows.length === 0) {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    // Verificar si tiene ventas asociadas
    const verificarVentas = await ejecutarConsulta(
      "SELECT COUNT(*) as total FROM ventas WHERE cliente_id = $1",
      [id]
    );

    const tieneVentas = parseInt(verificarVentas.rows[0].total) > 0;

    if (tieneVentas) {
      return NextResponse.json(
        {
          error:
            "No se puede eliminar el cliente porque tiene ventas asociadas",
          sugerencia: "Considere desactivar el cliente en lugar de eliminarlo",
        },
        { status: 409 }
      );
    }

    // Eliminar cliente (esto eliminar√° en cascada antecedentes y graduaciones)
    await ejecutarConsulta("DELETE FROM clientes WHERE id = $1", [id]);

    return NextResponse.json({
      mensaje: "Cliente eliminado exitosamente",
    });
  } catch (error) {
    console.error("Error eliminando cliente:", error);
    return NextResponse.json(
      { error: "Error eliminando cliente" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/depositos/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta, ejecutarTransaccion } from "@/lib/conexion-bd";
import { validarDeposito, limpiarDatos } from "@/lib/validaciones";

// GET - Obtener dep√≥sitos por venta o todos
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const ventaId = searchParams.get("venta_id");
    const limite = parseInt(searchParams.get("limite")) || 50;

    let consulta;
    let parametros = [];

    if (ventaId) {
      // Dep√≥sitos de una venta espec√≠fica
      consulta = `
        SELECT 
          d.*,
          v.numero_venta,
          v.costo_total,
          c.nombre_completo as cliente_nombre,
          TO_CHAR(d.fecha_deposito, 'DD/MM/YYYY') as fecha_deposito_formato,
          TO_CHAR(d.fecha_creacion, 'DD/MM/YYYY HH24:MI') as fecha_registro_formato
        FROM depositos d
        INNER JOIN ventas v ON d.venta_id = v.id
        INNER JOIN clientes c ON v.cliente_id = c.id
        WHERE d.venta_id = $1
        ORDER BY d.fecha_deposito DESC, d.fecha_creacion DESC
        LIMIT $2
      `;
      parametros = [ventaId, limite];
    } else {
      // Todos los dep√≥sitos recientes
      consulta = `
        SELECT 
          d.*,
          v.numero_venta,
          v.costo_total,
          c.nombre_completo as cliente_nombre,
          TO_CHAR(d.fecha_deposito, 'DD/MM/YYYY') as fecha_deposito_formato,
          TO_CHAR(d.fecha_creacion, 'DD/MM/YYYY HH24:MI') as fecha_registro_formato
        FROM depositos d
        INNER JOIN ventas v ON d.venta_id = v.id
        INNER JOIN clientes c ON v.cliente_id = c.id
        ORDER BY d.fecha_deposito DESC, d.fecha_creacion DESC
        LIMIT $1
      `;
      parametros = [limite];
    }

    const resultado = await ejecutarConsulta(consulta, parametros);

    // Calcular estad√≠sticas si es una venta espec√≠fica
    let estadisticas = null;
    if (ventaId && resultado.rows.length > 0) {
      const totalDepositado = resultado.rows.reduce(
        (sum, deposito) => sum + parseFloat(deposito.monto),
        0
      );
      const costoTotal = parseFloat(resultado.rows[0].costo_total);

      estadisticas = {
        total_depositos: resultado.rows.length,
        total_depositado: totalDepositado,
        saldo_restante: costoTotal - totalDepositado,
        porcentaje_pagado:
          costoTotal > 0 ? (totalDepositado / costoTotal) * 100 : 0,
      };
    }

    return NextResponse.json({
      depositos: resultado.rows,
      estadisticas,
      total: resultado.rows.length,
    });
  } catch (error) {
    console.error("Error obteniendo dep√≥sitos:", error);
    return NextResponse.json(
      { error: "Error obteniendo dep√≥sitos: " + error.message },
      { status: 500 }
    );
  }
}

// POST - Registrar nuevo dep√≥sito
export async function POST(request) {
  try {
    const datosOriginales = await request.json();

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);

    // Verificar que la venta existe y obtener informaci√≥n
    const consultaVenta = `
      SELECT 
        v.id, v.costo_total, v.total_depositado, v.saldo_restante,
        v.numero_venta, c.nombre_completo as cliente_nombre
      FROM ventas v
      INNER JOIN clientes c ON v.cliente_id = c.id
      WHERE v.id = $1
    `;

    const resultadoVenta = await ejecutarConsulta(consultaVenta, [
      datosLimpios.venta_id,
    ]);

    if (resultadoVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    const venta = resultadoVenta.rows[0];
    const saldoActual = parseFloat(venta.saldo_restante);
    const montoDeposito = parseFloat(datosLimpios.monto);

    // Validar dep√≥sito
    const validacion = validarDeposito(
      datosLimpios,
      venta.costo_total,
      venta.total_depositado
    );

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Verificar que el dep√≥sito no exceda el saldo
    if (montoDeposito > saldoActual) {
      return NextResponse.json(
        {
          error: `El dep√≥sito ($${montoDeposito.toFixed(
            2
          )}) no puede exceder el saldo restante ($${saldoActual.toFixed(2)})`,
        },
        { status: 400 }
      );
    }

    // Registrar dep√≥sito en transacci√≥n (el trigger actualizar√° la venta autom√°ticamente)
    const resultado = await ejecutarTransaccion(async (cliente) => {
      const consultaDeposito = `
        INSERT INTO depositos (
          venta_id, monto, metodo_pago, fecha_deposito, notas
        ) VALUES (
          $1, $2, $3, $4, $5
        ) RETURNING *
      `;

      const parametrosDeposito = [
        datosLimpios.venta_id,
        montoDeposito,
        datosLimpios.metodo_pago || "efectivo",
        datosLimpios.fecha_deposito || new Date().toISOString().split("T")[0],
        datosLimpios.notas || null,
      ];

      const resultadoDeposito = await cliente.query(
        consultaDeposito,
        parametrosDeposito
      );

      // El trigger ya actualiz√≥ la venta, pero obtenemos los datos actualizados
      const ventaActualizada = await cliente.query(
        "SELECT total_depositado, saldo_restante FROM ventas WHERE id = $1",
        [datosLimpios.venta_id]
      );

      return {
        deposito: resultadoDeposito.rows[0],
        venta_actualizada: ventaActualizada.rows[0],
        venta_info: venta,
      };
    });

    return NextResponse.json(
      {
        mensaje: "Dep√≥sito registrado exitosamente",
        deposito: resultado.deposito,
        venta: {
          numero_venta: resultado.venta_info.numero_venta,
          cliente_nombre: resultado.venta_info.cliente_nombre,
          total_depositado: resultado.venta_actualizada.total_depositado,
          saldo_restante: resultado.venta_actualizada.saldo_restante,
        },
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error registrando dep√≥sito:", error);

    if (error.code === "23503") {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { error: "Error registrando dep√≥sito" },
      { status: 500 }
    );
  }
}

// PUT - Actualizar dep√≥sito existente
export async function PUT(request) {
  try {
    const datosOriginales = await request.json();
    const { id } = datosOriginales;

    if (!id) {
      return NextResponse.json(
        { error: "ID de dep√≥sito requerido" },
        { status: 400 }
      );
    }

    // Limpiar datos
    const datosLimpios = limpiarDatos(datosOriginales);

    // Verificar que el dep√≥sito existe
    const verificarDeposito = await ejecutarConsulta(
      `SELECT d.*, v.costo_total, v.total_depositado 
       FROM depositos d 
       INNER JOIN ventas v ON d.venta_id = v.id 
       WHERE d.id = $1`,
      [id]
    );

    if (verificarDeposito.rows.length === 0) {
      return NextResponse.json(
        { error: "Dep√≥sito no encontrado" },
        { status: 404 }
      );
    }

    const depositoActual = verificarDeposito.rows[0];

    // Validar nuevos datos
    const validacion = validarDeposito(
      datosLimpios,
      depositoActual.costo_total,
      depositoActual.total_depositado - depositoActual.monto
    );

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Actualizar dep√≥sito en transacci√≥n
    const resultado = await ejecutarTransaccion(async (cliente) => {
      const consultaActualizar = `
        UPDATE depositos SET
          monto = $2,
          metodo_pago = $3,
          fecha_deposito = $4,
          notas = $5
        WHERE id = $1
        RETURNING *
      `;

      const parametros = [
        id,
        parseFloat(datosLimpios.monto),
        datosLimpios.metodo_pago || depositoActual.metodo_pago,
        datosLimpios.fecha_deposito || depositoActual.fecha_deposito,
        datosLimpios.notas,
      ];

      const resultadoDeposito = await cliente.query(
        consultaActualizar,
        parametros
      );

      return resultadoDeposito.rows[0];
    });

    return NextResponse.json({
      mensaje: "Dep√≥sito actualizado exitosamente",
      deposito: resultado,
    });
  } catch (error) {
    console.error("Error actualizando dep√≥sito:", error);
    return NextResponse.json(
      { error: "Error actualizando dep√≥sito" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar dep√≥sito
export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID de dep√≥sito requerido" },
        { status: 400 }
      );
    }

    // Verificar que el dep√≥sito existe
    const verificarDeposito = await ejecutarConsulta(
      `SELECT d.*, v.numero_venta 
       FROM depositos d 
       INNER JOIN ventas v ON d.venta_id = v.id 
       WHERE d.id = $1`,
      [id]
    );

    if (verificarDeposito.rows.length === 0) {
      return NextResponse.json(
        { error: "Dep√≥sito no encontrado" },
        { status: 404 }
      );
    }

    const deposito = verificarDeposito.rows[0];

    // Eliminar dep√≥sito (el trigger actualizar√° la venta autom√°ticamente)
    await ejecutarConsulta("DELETE FROM depositos WHERE id = $1", [id]);

    return NextResponse.json({
      mensaje: "Dep√≥sito eliminado exitosamente",
      venta_numero: deposito.numero_venta,
      monto_eliminado: deposito.monto,
    });
  } catch (error) {
    console.error("Error eliminando dep√≥sito:", error);
    return NextResponse.json(
      { error: "Error eliminando dep√≥sito" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/generar-hash/route.js
================================================
import { NextResponse } from 'next/server'
import { hashearPassword } from '@/lib/autenticacion'

export async function GET() {
  try {
    const password = 'admin123'
    const hash = await hashearPassword(password)
    
    return NextResponse.json({
      password: password,
      hash: hash,
      sql: `UPDATE usuarios SET password_hash = '${hash}' WHERE nombre_usuario = 'admin';`
    })
  } catch (error) {
    return NextResponse.json({ error: error.message }, { status: 500 })
  }
}


================================================
File: src/app/api/graduaciones/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta } from "@/lib/conexion-bd";
import { validarGraduacion, limpiarDatos } from "@/lib/validaciones";

// GET - Obtener graduaciones (por cliente o todas)
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const clienteId = searchParams.get("cliente_id");
    const tipo = searchParams.get("tipo"); // 'lejos' o 'cerca'
    const limite = parseInt(searchParams.get("limite")) || 50;

    let consulta = `
      SELECT g.*, c.nombre_completo as cliente_nombre, c.expediente
      FROM graduaciones g
      INNER JOIN clientes c ON g.cliente_id = c.id
    `;

    const parametros = [];
    let whereConditions = [];

    // Filtrar por cliente si se especifica
    if (clienteId) {
      whereConditions.push(`g.cliente_id = $${parametros.length + 1}`);
      parametros.push(clienteId);
    }

    // Filtrar por tipo si se especifica
    if (tipo && ["lejos", "cerca"].includes(tipo)) {
      whereConditions.push(`g.tipo = $${parametros.length + 1}`);
      parametros.push(tipo);
    }

    // Agregar condiciones WHERE si existen
    if (whereConditions.length > 0) {
      consulta += ` WHERE ${whereConditions.join(" AND ")}`;
    }

    consulta += ` 
      ORDER BY g.fecha_examen DESC, g.fecha_creacion DESC
      LIMIT $${parametros.length + 1}
    `;
    parametros.push(limite);

    const resultado = await ejecutarConsulta(consulta, parametros);

    return NextResponse.json({
      graduaciones: resultado.rows,
      total: resultado.rows.length,
    });
  } catch (error) {
    console.error("Error obteniendo graduaciones:", error);
    return NextResponse.json(
      { error: "Error obteniendo graduaciones" },
      { status: 500 }
    );
  }
}

// POST - Crear nueva graduaci√≥n
export async function POST(request) {
  try {
    const datosOriginales = await request.json();

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarGraduacion(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Verificar que el cliente existe
    const verificarCliente = await ejecutarConsulta(
      "SELECT id FROM clientes WHERE id = $1",
      [datosLimpios.cliente_id]
    );

    if (verificarCliente.rows.length === 0) {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    // Verificar si ya existe una graduaci√≥n del mismo tipo para este cliente
    const graduacionExistente = await ejecutarConsulta(
      "SELECT id FROM graduaciones WHERE cliente_id = $1 AND tipo = $2",
      [datosLimpios.cliente_id, datosLimpios.tipo]
    );

    if (graduacionExistente.rows.length > 0) {
      return NextResponse.json(
        {
          error: `Ya existe una graduaci√≥n de ${datosLimpios.tipo} para este cliente. Use PUT para actualizar.`,
          graduacion_existente_id: graduacionExistente.rows[0].id,
        },
        { status: 409 }
      );
    }

    // Insertar nueva graduaci√≥n
    const consultaInsertar = `
      INSERT INTO graduaciones (
        cliente_id, tipo, od_esfera, od_cilindro, od_eje, od_adicion,
        oi_esfera, oi_cilindro, oi_eje, oi_adicion, imagen_resultado,
        fecha_examen, notas
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13
      ) RETURNING *
    `;

    const parametros = [
      datosLimpios.cliente_id,
      datosLimpios.tipo,
      datosLimpios.od_esfera ? parseFloat(datosLimpios.od_esfera) : null,
      datosLimpios.od_cilindro ? parseFloat(datosLimpios.od_cilindro) : null,
      datosLimpios.od_eje ? parseInt(datosLimpios.od_eje) : null,
      datosLimpios.od_adicion ? parseFloat(datosLimpios.od_adicion) : null,
      datosLimpios.oi_esfera ? parseFloat(datosLimpios.oi_esfera) : null,
      datosLimpios.oi_cilindro ? parseFloat(datosLimpios.oi_cilindro) : null,
      datosLimpios.oi_eje ? parseInt(datosLimpios.oi_eje) : null,
      datosLimpios.oi_adicion ? parseFloat(datosLimpios.oi_adicion) : null,
      datosLimpios.imagen_resultado || null,
      datosLimpios.fecha_examen || new Date().toISOString().split("T")[0],
      datosLimpios.notas || null,
    ];

    const resultado = await ejecutarConsulta(consultaInsertar, parametros);

    return NextResponse.json(
      {
        mensaje: "Graduaci√≥n registrada exitosamente",
        graduacion: resultado.rows[0],
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creando graduaci√≥n:", error);

    // Manejar errores espec√≠ficos
    if (error.code === "23503") {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      { error: "Error registrando graduaci√≥n" },
      { status: 500 }
    );
  }
}

// PUT - Actualizar graduaci√≥n existente
export async function PUT(request) {
  try {
    const datosOriginales = await request.json();
    const { id } = datosOriginales;

    if (!id) {
      return NextResponse.json(
        { error: "ID de graduaci√≥n requerido" },
        { status: 400 }
      );
    }

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarGraduacion(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Verificar que la graduaci√≥n existe
    const verificarGraduacion = await ejecutarConsulta(
      "SELECT id FROM graduaciones WHERE id = $1",
      [id]
    );

    if (verificarGraduacion.rows.length === 0) {
      return NextResponse.json(
        { error: "Graduaci√≥n no encontrada" },
        { status: 404 }
      );
    }

    // Actualizar graduaci√≥n
    const consultaActualizar = `
      UPDATE graduaciones SET
        od_esfera = $2, od_cilindro = $3, od_eje = $4, od_adicion = $5,
        oi_esfera = $6, oi_cilindro = $7, oi_eje = $8, oi_adicion = $9,
        imagen_resultado = $10, fecha_examen = $11, notas = $12,
        fecha_actualizacion = CURRENT_TIMESTAMP
      WHERE id = $1
      RETURNING *
    `;

    const parametros = [
      id,
      datosLimpios.od_esfera ? parseFloat(datosLimpios.od_esfera) : null,
      datosLimpios.od_cilindro ? parseFloat(datosLimpios.od_cilindro) : null,
      datosLimpios.od_eje ? parseInt(datosLimpios.od_eje) : null,
      datosLimpios.od_adicion ? parseFloat(datosLimpios.od_adicion) : null,
      datosLimpios.oi_esfera ? parseFloat(datosLimpios.oi_esfera) : null,
      datosLimpios.oi_cilindro ? parseFloat(datosLimpios.oi_cilindro) : null,
      datosLimpios.oi_eje ? parseInt(datosLimpios.oi_eje) : null,
      datosLimpios.oi_adicion ? parseFloat(datosLimpios.oi_adicion) : null,
      datosLimpios.imagen_resultado || null,
      datosLimpios.fecha_examen || new Date().toISOString().split("T")[0],
      datosLimpios.notas || null,
    ];

    const resultado = await ejecutarConsulta(consultaActualizar, parametros);

    return NextResponse.json({
      mensaje: "Graduaci√≥n actualizada exitosamente",
      graduacion: resultado.rows[0],
    });
  } catch (error) {
    console.error("Error actualizando graduaci√≥n:", error);
    return NextResponse.json(
      { error: "Error actualizando graduaci√≥n" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar graduaci√≥n
export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID de graduaci√≥n requerido" },
        { status: 400 }
      );
    }

    // Verificar que la graduaci√≥n existe
    const verificarGraduacion = await ejecutarConsulta(
      "SELECT id FROM graduaciones WHERE id = $1",
      [id]
    );

    if (verificarGraduacion.rows.length === 0) {
      return NextResponse.json(
        { error: "Graduaci√≥n no encontrada" },
        { status: 404 }
      );
    }

    // Eliminar graduaci√≥n
    await ejecutarConsulta("DELETE FROM graduaciones WHERE id = $1", [id]);

    return NextResponse.json({
      mensaje: "Graduaci√≥n eliminada exitosamente",
    });
  } catch (error) {
    console.error("Error eliminando graduaci√≥n:", error);
    return NextResponse.json(
      { error: "Error eliminando graduaci√≥n" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/periodos/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta, ejecutarTransaccion } from "@/lib/conexion-bd";

// GET - Obtener todos los per√≠odos
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const soloActivo = searchParams.get("activo") === "true";
    const limite = parseInt(searchParams.get("limite")) || 50;

    let consulta;
    let parametros = [];

    if (soloActivo) {
      // Solo el per√≠odo activo
      consulta = `
        SELECT *,
          TO_CHAR(fecha_inicio, 'DD/MM/YYYY') as fecha_inicio_formato,
          TO_CHAR(fecha_fin, 'DD/MM/YYYY') as fecha_fin_formato,
          TO_CHAR(fecha_creacion, 'DD/MM/YYYY HH24:MI') as fecha_creacion_formato
        FROM periodos_contables 
        WHERE activo = true
        ORDER BY fecha_creacion DESC
        LIMIT 1
      `;
    } else {
      // Todos los per√≠odos
      consulta = `
        SELECT *,
          TO_CHAR(fecha_inicio, 'DD/MM/YYYY') as fecha_inicio_formato,
          TO_CHAR(fecha_fin, 'DD/MM/YYYY') as fecha_fin_formato,
          TO_CHAR(fecha_creacion, 'DD/MM/YYYY HH24:MI') as fecha_creacion_formato
        FROM periodos_contables 
        ORDER BY fecha_creacion DESC
        LIMIT $1
      `;
      parametros = [limite];
    }

    const resultado = await ejecutarConsulta(consulta, parametros);

    // Si se solicita solo activo pero no hay ninguno, crear el primer per√≠odo
    if (soloActivo && resultado.rows.length === 0) {
      const nuevoPeriodo = await crearPrimerPeriodo();
      return NextResponse.json({
        periodo_activo: nuevoPeriodo,
        todos_periodos: [nuevoPeriodo],
      });
    }

    return NextResponse.json({
      periodos: resultado.rows,
      periodo_activo: soloActivo
        ? resultado.rows[0]
        : resultado.rows.find((p) => p.activo),
      total: resultado.rows.length,
    });
  } catch (error) {
    console.error("Error obteniendo per√≠odos:", error);
    return NextResponse.json(
      { error: "Error obteniendo per√≠odos: " + error.message },
      { status: 500 }
    );
  }
}

// POST - Crear nuevo per√≠odo (cerrar per√≠odo actual)
export async function POST(request) {
  try {
    const datosOriginales = await request.json();
    const { confirmar_cierre = false } = datosOriginales;

    if (!confirmar_cierre) {
      return NextResponse.json(
        { error: "Debe confirmar el cierre del per√≠odo" },
        { status: 400 }
      );
    }

    // Ejecutar cierre de per√≠odo en transacci√≥n
    const resultado = await ejecutarTransaccion(async (cliente) => {
      // 1. Obtener per√≠odo activo actual
      const consultaPeriodoActual = `
        SELECT * FROM periodos_contables 
        WHERE activo = true 
        ORDER BY fecha_creacion DESC 
        LIMIT 1
      `;
      const periodoActual = await cliente.query(consultaPeriodoActual);

      if (periodoActual.rows.length === 0) {
        throw new Error("No hay per√≠odo activo para cerrar");
      }

      const periodoAnterior = periodoActual.rows[0];

      // 2. Obtener ventas con saldo pendiente del per√≠odo actual
      const consultaVentasPendientes = `
        SELECT 
          v.id,
          v.numero_venta,
          v.cliente_id,
          v.saldo_restante,
          v.marca_armazon,
          v.laboratorio,
          v.imagen_receta,
          v.estado,
          v.fecha_llegada_laboratorio,
          v.fecha_entrega_cliente,
          v.notas,
          c.nombre_completo as cliente_nombre
        FROM ventas v
        INNER JOIN clientes c ON v.cliente_id = c.id
        WHERE v.periodo_id = $1 
        AND v.saldo_restante > 0
        AND v.estado != 'cancelado'
      `;
      const ventasPendientes = await cliente.query(consultaVentasPendientes, [
        periodoAnterior.id,
      ]);

      // 3. Calcular fechas del nuevo per√≠odo
      const hoy = new Date();
      const mesActual = hoy.getMonth(); // 0-11
      const a√±oActual = hoy.getFullYear();

      // Nuevo per√≠odo: del 7 del mes actual al 6 del siguiente mes
      const fechaInicio = new Date(a√±oActual, mesActual, 7);
      const fechaFin = new Date(a√±oActual, mesActual + 1, 6);

      // Generar nombre del per√≠odo
      const meses = [
        "Enero",
        "Febrero",
        "Marzo",
        "Abril",
        "Mayo",
        "Junio",
        "Julio",
        "Agosto",
        "Septiembre",
        "Octubre",
        "Noviembre",
        "Diciembre",
      ];
      const nombrePeriodo = `${meses[mesActual]} / ${
        meses[(mesActual + 1) % 12]
      }`;

      // 4. Crear nuevo per√≠odo
      const consultaNuevoPeriodo = `
        INSERT INTO periodos_contables (nombre, fecha_inicio, fecha_fin, activo)
        VALUES ($1, $2, $3, true)
        RETURNING *
      `;
      const nuevoPeriodo = await cliente.query(consultaNuevoPeriodo, [
        nombrePeriodo,
        fechaInicio.toISOString().split("T")[0],
        fechaFin.toISOString().split("T")[0],
      ]);

      const periodoNuevo = nuevoPeriodo.rows[0];

      // 5. Desactivar per√≠odo anterior
      await cliente.query(
        "UPDATE periodos_contables SET activo = false WHERE id = $1",
        [periodoAnterior.id]
      );

      // 6. Migrar ventas pendientes al nuevo per√≠odo
      const ventasMigradas = [];

      for (const venta of ventasPendientes.rows) {
        // Generar nuevo n√∫mero de venta
        const timestamp = Date.now().toString().slice(-4);
        const numeroVenta = `VTA-${fechaInicio.getFullYear()}${String(
          fechaInicio.getMonth() + 1
        ).padStart(2, "0")}${String(fechaInicio.getDate()).padStart(
          2,
          "0"
        )}-${timestamp}`;

        // Crear nueva venta en el nuevo per√≠odo
        const consultaNuevaVenta = `
          INSERT INTO ventas (
            numero_venta, cliente_id, periodo_id, marca_armazon, laboratorio,
            precio_armazon, precio_micas, costo_total, total_depositado, saldo_restante,
            imagen_receta, estado, fecha_llegada_laboratorio, fecha_entrega_cliente,
            fecha_venta, notas
          ) VALUES (
            $1, $2, $3, $4, $5, 0, 0, $6, 0, $6, $7, $8, $9, $10, $11, $12
          ) RETURNING *
        `;

        const parametrosNuevaVenta = [
          numeroVenta,
          venta.cliente_id,
          periodoNuevo.id,
          venta.marca_armazon,
          venta.laboratorio,
          venta.saldo_restante, // El saldo pendiente se convierte en el nuevo costo total
          venta.imagen_receta,
          venta.estado === "entregado" ? "pendiente" : venta.estado, // Reset estado si ya estaba entregado
          venta.fecha_llegada_laboratorio,
          venta.fecha_entrega_cliente,
          fechaInicio.toISOString().split("T")[0], // Fecha del nuevo per√≠odo
          `Migrado del per√≠odo anterior (${
            periodoAnterior.nombre
          }). Venta original: ${venta.numero_venta}${
            venta.notas ? "\n\nNotas anteriores: " + venta.notas : ""
          }`,
        ];

        const ventaMigrada = await cliente.query(
          consultaNuevaVenta,
          parametrosNuevaVenta
        );
        ventasMigradas.push({
          venta_original: venta,
          venta_nueva: ventaMigrada.rows[0],
        });
      }

      return {
        periodo_anterior: periodoAnterior,
        periodo_nuevo: periodoNuevo,
        ventas_migradas: ventasMigradas,
        total_migrado: ventasPendientes.rows.reduce(
          (sum, v) => sum + parseFloat(v.saldo_restante),
          0
        ),
      };
    });

    return NextResponse.json(
      {
        mensaje: "Per√≠odo cerrado y nuevo per√≠odo creado exitosamente",
        ...resultado,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error cerrando per√≠odo:", error);
    return NextResponse.json(
      { error: "Error cerrando per√≠odo: " + error.message },
      { status: 500 }
    );
  }
}

// PUT - Actualizar per√≠odo (solo nombre y fechas, no migraci√≥n)
export async function PUT(request) {
  try {
    const datos = await request.json();
    const { id, nombre, fecha_inicio, fecha_fin } = datos;

    if (!id) {
      return NextResponse.json(
        { error: "ID de per√≠odo requerido" },
        { status: 400 }
      );
    }

    // Verificar que el per√≠odo existe
    const verificar = await ejecutarConsulta(
      "SELECT id, activo FROM periodos_contables WHERE id = $1",
      [id]
    );

    if (verificar.rows.length === 0) {
      return NextResponse.json(
        { error: "Per√≠odo no encontrado" },
        { status: 404 }
      );
    }

    // Solo permitir editar si no es el per√≠odo activo o si solo se cambia el nombre
    const periodo = verificar.rows[0];

    const consulta = `
      UPDATE periodos_contables 
      SET nombre = $2, fecha_inicio = $3, fecha_fin = $4
      WHERE id = $1
      RETURNING *
    `;

    const resultado = await ejecutarConsulta(consulta, [
      id,
      nombre,
      fecha_inicio,
      fecha_fin,
    ]);

    return NextResponse.json({
      mensaje: "Per√≠odo actualizado exitosamente",
      periodo: resultado.rows[0],
    });
  } catch (error) {
    console.error("Error actualizando per√≠odo:", error);
    return NextResponse.json(
      { error: "Error actualizando per√≠odo" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar per√≠odo (solo si no tiene ventas asociadas)
export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID de per√≠odo requerido" },
        { status: 400 }
      );
    }

    // Verificar que el per√≠odo existe y no es el activo
    const verificar = await ejecutarConsulta(
      "SELECT id, nombre, activo FROM periodos_contables WHERE id = $1",
      [id]
    );

    if (verificar.rows.length === 0) {
      return NextResponse.json(
        { error: "Per√≠odo no encontrado" },
        { status: 404 }
      );
    }

    const periodo = verificar.rows[0];

    if (periodo.activo) {
      return NextResponse.json(
        { error: "No se puede eliminar el per√≠odo activo" },
        { status: 409 }
      );
    }

    // Verificar que no tiene ventas asociadas
    const ventasAsociadas = await ejecutarConsulta(
      "SELECT COUNT(*) as total FROM ventas WHERE periodo_id = $1",
      [id]
    );

    if (parseInt(ventasAsociadas.rows[0].total) > 0) {
      return NextResponse.json(
        {
          error:
            "No se puede eliminar el per√≠odo porque tiene ventas asociadas",
          ventas_asociadas: ventasAsociadas.rows[0].total,
        },
        { status: 409 }
      );
    }

    // Eliminar per√≠odo
    await ejecutarConsulta("DELETE FROM periodos_contables WHERE id = $1", [
      id,
    ]);

    return NextResponse.json({
      mensaje: "Per√≠odo eliminado exitosamente",
      periodo_eliminado: periodo.nombre,
    });
  } catch (error) {
    console.error("Error eliminando per√≠odo:", error);
    return NextResponse.json(
      { error: "Error eliminando per√≠odo" },
      { status: 500 }
    );
  }
}

// Funci√≥n auxiliar para crear el primer per√≠odo
async function crearPrimerPeriodo() {
  const hoy = new Date();
  const mesActual = hoy.getMonth();
  const a√±oActual = hoy.getFullYear();

  const fechaInicio = new Date(a√±oActual, mesActual, 7);
  const fechaFin = new Date(a√±oActual, mesActual + 1, 6);

  const meses = [
    "Enero",
    "Febrero",
    "Marzo",
    "Abril",
    "Mayo",
    "Junio",
    "Julio",
    "Agosto",
    "Septiembre",
    "Octubre",
    "Noviembre",
    "Diciembre",
  ];
  const nombrePeriodo = `${meses[mesActual]} / ${meses[(mesActual + 1) % 12]}`;

  const consulta = `
    INSERT INTO periodos_contables (nombre, fecha_inicio, fecha_fin, activo)
    VALUES ($1, $2, $3, true)
    RETURNING *
  `;

  const resultado = await ejecutarConsulta(consulta, [
    nombrePeriodo,
    fechaInicio.toISOString().split("T")[0],
    fechaFin.toISOString().split("T")[0],
  ]);

  return resultado.rows[0];
}



================================================
File: src/app/api/reportes/excel/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta } from "@/lib/conexion-bd";
import * as XLSX from "xlsx";

// GET - Generar y descargar reportes en Excel
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const tipoReporte = searchParams.get("tipo") || "general"; // general, efectivo, tarjeta, transferencia
    const periodoId = searchParams.get("periodo_id");
    const fechaInicio = searchParams.get("fecha_inicio");
    const fechaFin = searchParams.get("fecha_fin");

    // Validar par√°metros
    if (!periodoId && !fechaInicio && !fechaFin) {
      return NextResponse.json(
        { error: "Debe especificar per√≠odo o rango de fechas" },
        { status: 400 }
      );
    }

    let datosReporte;
    let nombreArchivo;

    switch (tipoReporte) {
      case "general":
        datosReporte = await generarReporteGeneral(
          periodoId,
          fechaInicio,
          fechaFin
        );
        nombreArchivo = `Reporte_General_${
          datosReporte.periodo_nombre || "Personalizado"
        }.xlsx`;
        break;
      case "efectivo":
        datosReporte = await generarReportePorMetodo(
          "efectivo",
          periodoId,
          fechaInicio,
          fechaFin
        );
        nombreArchivo = `Reporte_Efectivo_${
          datosReporte.periodo_nombre || "Personalizado"
        }.xlsx`;
        break;
      case "tarjeta":
        datosReporte = await generarReportePorMetodo(
          "tarjeta",
          periodoId,
          fechaInicio,
          fechaFin
        );
        nombreArchivo = `Reporte_Tarjeta_${
          datosReporte.periodo_nombre || "Personalizado"
        }.xlsx`;
        break;
      case "transferencia":
        datosReporte = await generarReportePorMetodo(
          "transferencia",
          periodoId,
          fechaInicio,
          fechaFin
        );
        nombreArchivo = `Reporte_Transferencia_${
          datosReporte.periodo_nombre || "Personalizado"
        }.xlsx`;
        break;
      case "todos":
        datosReporte = await generarReporteCompleto(
          periodoId,
          fechaInicio,
          fechaFin
        );
        nombreArchivo = `Reporte_Completo_${
          datosReporte.periodo_nombre || "Personalizado"
        }.xlsx`;
        break;
      default:
        return NextResponse.json(
          { error: "Tipo de reporte no v√°lido" },
          { status: 400 }
        );
    }

    // Generar archivo Excel
    const archivoExcel = generarArchivoExcel(datosReporte, tipoReporte);

    // Enviar archivo como respuesta
    const headers = new Headers();
    headers.set(
      "Content-Type",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    );
    headers.set(
      "Content-Disposition",
      `attachment; filename="${nombreArchivo}"`
    );

    return new NextResponse(archivoExcel, {
      status: 200,
      headers: headers,
    });
  } catch (error) {
    console.error("Error generando reporte:", error);
    return NextResponse.json(
      { error: "Error generando reporte: " + error.message },
      { status: 500 }
    );
  }
}

// POST - Vista previa de datos del reporte (sin generar archivo)
export async function POST(request) {
  try {
    const datos = await request.json();
    const { tipo, periodo_id, fecha_inicio, fecha_fin } = datos;

    let datosReporte;

    switch (tipo) {
      case "general":
        datosReporte = await generarReporteGeneral(
          periodo_id,
          fecha_inicio,
          fecha_fin
        );
        break;
      case "efectivo":
      case "tarjeta":
      case "transferencia":
        datosReporte = await generarReportePorMetodo(
          tipo,
          periodo_id,
          fecha_inicio,
          fecha_fin
        );
        break;
      case "todos":
        datosReporte = await generarReporteCompleto(
          periodo_id,
          fecha_inicio,
          fecha_fin
        );
        break;
      default:
        return NextResponse.json(
          { error: "Tipo de reporte no v√°lido" },
          { status: 400 }
        );
    }

    return NextResponse.json({
      ...datosReporte,
      mensaje: "Vista previa generada exitosamente",
    });
  } catch (error) {
    console.error("Error generando vista previa:", error);
    return NextResponse.json(
      { error: "Error generando vista previa: " + error.message },
      { status: 500 }
    );
  }
}

// === FUNCIONES AUXILIARES ===

async function generarReporteGeneral(periodoId, fechaInicio, fechaFin) {
  // Construir consulta base
  let whereClause = "";
  let parametros = [];
  let periodoNombre = "Personalizado";

  if (periodoId) {
    whereClause = "WHERE v.periodo_id = $1";
    parametros.push(periodoId);

    // Obtener nombre del per√≠odo
    const consultaPeriodo =
      "SELECT nombre FROM periodos_contables WHERE id = $1";
    const periodo = await ejecutarConsulta(consultaPeriodo, [periodoId]);
    if (periodo.rows.length > 0) {
      periodoNombre = periodo.rows[0].nombre;
    }
  } else if (fechaInicio && fechaFin) {
    whereClause = "WHERE v.fecha_venta >= $1 AND v.fecha_venta <= $2";
    parametros.push(fechaInicio, fechaFin);
    periodoNombre = `${fechaInicio} a ${fechaFin}`;
  }

  // Consulta principal de ventas
  const consultaVentas = `
    SELECT 
      v.numero_venta,
      v.fecha_venta,
      c.nombre_completo as cliente,
      c.expediente,
      c.email,
      c.celular,
      v.marca_armazon,
      v.laboratorio,
      v.precio_armazon,
      v.precio_micas,
      v.costo_total,
      v.total_depositado,
      v.saldo_restante,
      v.estado,
      v.fecha_llegada_laboratorio,
      v.fecha_entrega_cliente,
      v.notas,
      p.nombre as periodo
    FROM ventas v
    INNER JOIN clientes c ON v.cliente_id = c.id
    LEFT JOIN periodos_contables p ON v.periodo_id = p.id
    ${whereClause}
    ORDER BY v.fecha_venta DESC, v.numero_venta
  `;

  const resultadoVentas = await ejecutarConsulta(consultaVentas, parametros);

  // Consulta de dep√≥sitos del per√≠odo
  const consultaDepositos = `
    SELECT 
      d.fecha_deposito,
      d.monto,
      d.metodo_pago,
      d.notas as deposito_notas,
      v.numero_venta,
      c.nombre_completo as cliente
    FROM depositos d
    INNER JOIN ventas v ON d.venta_id = v.id
    INNER JOIN clientes c ON v.cliente_id = c.id
    ${whereClause
      .replace("v.periodo_id", "v.periodo_id")
      .replace("v.fecha_venta", "v.fecha_venta")}
    ORDER BY d.fecha_deposito DESC, v.numero_venta
  `;

  const resultadoDepositos = await ejecutarConsulta(
    consultaDepositos,
    parametros
  );

  // Calcular estad√≠sticas
  const estadisticas = calcularEstadisticas(
    resultadoVentas.rows,
    resultadoDepositos.rows
  );

  return {
    periodo_nombre: periodoNombre,
    ventas: resultadoVentas.rows,
    depositos: resultadoDepositos.rows,
    estadisticas,
    fecha_generacion: new Date().toISOString(),
  };
}

async function generarReportePorMetodo(
  metodoPago,
  periodoId,
  fechaInicio,
  fechaFin
) {
  // Obtener reporte general primero
  const reporteGeneral = await generarReporteGeneral(
    periodoId,
    fechaInicio,
    fechaFin
  );

  // Filtrar dep√≥sitos por m√©todo de pago
  const depositosFiltrados = reporteGeneral.depositos.filter(
    (d) => d.metodo_pago === metodoPago
  );

  // Obtener ventas que tienen dep√≥sitos de este m√©todo
  const ventasConDepositos = reporteGeneral.ventas.filter((venta) =>
    depositosFiltrados.some(
      (deposito) => deposito.numero_venta === venta.numero_venta
    )
  );

  // Calcular estad√≠sticas espec√≠ficas del m√©todo
  const estadisticasMetodo = {
    total_depositos: depositosFiltrados.length,
    monto_total_metodo: depositosFiltrados.reduce(
      (sum, d) => sum + parseFloat(d.monto),
      0
    ),
    ventas_con_metodo: ventasConDepositos.length,
    porcentaje_del_total:
      reporteGeneral.estadisticas.total_depositado > 0
        ? (depositosFiltrados.reduce((sum, d) => sum + parseFloat(d.monto), 0) /
            reporteGeneral.estadisticas.total_depositado) *
          100
        : 0,
  };

  return {
    periodo_nombre: reporteGeneral.periodo_nombre,
    metodo_pago: metodoPago,
    ventas: ventasConDepositos,
    depositos: depositosFiltrados,
    estadisticas: estadisticasMetodo,
    estadisticas_generales: reporteGeneral.estadisticas,
    fecha_generacion: new Date().toISOString(),
  };
}

async function generarReporteCompleto(periodoId, fechaInicio, fechaFin) {
  const reporteGeneral = await generarReporteGeneral(
    periodoId,
    fechaInicio,
    fechaFin
  );

  const reporteEfectivo = await generarReportePorMetodo(
    "efectivo",
    periodoId,
    fechaInicio,
    fechaFin
  );
  const reporteTarjeta = await generarReportePorMetodo(
    "tarjeta",
    periodoId,
    fechaInicio,
    fechaFin
  );
  const reporteTransferencia = await generarReportePorMetodo(
    "transferencia",
    periodoId,
    fechaInicio,
    fechaFin
  );

  return {
    periodo_nombre: reporteGeneral.periodo_nombre,
    general: reporteGeneral,
    efectivo: reporteEfectivo,
    tarjeta: reporteTarjeta,
    transferencia: reporteTransferencia,
    fecha_generacion: new Date().toISOString(),
  };
}

function calcularEstadisticas(ventas, depositos) {
  const stats = {
    total_ventas: ventas.length,
    total_vendido: ventas.reduce(
      (sum, v) => sum + parseFloat(v.costo_total || 0),
      0
    ),
    total_depositado: depositos.reduce(
      (sum, d) => sum + parseFloat(d.monto || 0),
      0
    ),
    total_pendiente: ventas.reduce(
      (sum, v) => sum + parseFloat(v.saldo_restante || 0),
      0
    ),

    // Por estado
    ventas_por_estado: {
      pendiente: ventas.filter((v) => v.estado === "pendiente").length,
      en_laboratorio: ventas.filter((v) => v.estado === "en_laboratorio")
        .length,
      listo: ventas.filter((v) => v.estado === "listo").length,
      entregado: ventas.filter((v) => v.estado === "entregado").length,
      cancelado: ventas.filter((v) => v.estado === "cancelado").length,
    },

    // Por m√©todo de pago
    depositos_por_metodo: {
      efectivo: depositos
        .filter((d) => d.metodo_pago === "efectivo")
        .reduce((sum, d) => sum + parseFloat(d.monto), 0),
      tarjeta: depositos
        .filter((d) => d.metodo_pago === "tarjeta")
        .reduce((sum, d) => sum + parseFloat(d.monto), 0),
      transferencia: depositos
        .filter((d) => d.metodo_pago === "transferencia")
        .reduce((sum, d) => sum + parseFloat(d.monto), 0),
    },

    // Por laboratorio
    ventas_por_laboratorio: {},
  };

  // Calcular ventas por laboratorio
  ventas.forEach((venta) => {
    const lab = venta.laboratorio || "Sin laboratorio";
    stats.ventas_por_laboratorio[lab] =
      (stats.ventas_por_laboratorio[lab] || 0) + 1;
  });

  return stats;
}

function generarArchivoExcel(datos, tipoReporte) {
  const workbook = XLSX.utils.book_new();

  if (tipoReporte === "todos") {
    // Reporte completo - m√∫ltiples hojas

    // Hoja 1: Resumen General
    const resumen = generarHojaResumen(datos);
    XLSX.utils.book_append_sheet(workbook, resumen, "Resumen");

    // Hoja 2: Todas las ventas
    const ventasSheet = generarHojaVentas(
      datos.general.ventas,
      "Todas las Ventas"
    );
    XLSX.utils.book_append_sheet(workbook, ventasSheet, "Todas las Ventas");

    // Hoja 3: Dep√≥sitos Efectivo
    if (datos.efectivo.depositos.length > 0) {
      const efectivoSheet = generarHojaDepositos(
        datos.efectivo.depositos,
        "Efectivo"
      );
      XLSX.utils.book_append_sheet(workbook, efectivoSheet, "Efectivo");
    }

    // Hoja 4: Dep√≥sitos Tarjeta
    if (datos.tarjeta.depositos.length > 0) {
      const tarjetaSheet = generarHojaDepositos(
        datos.tarjeta.depositos,
        "Tarjeta"
      );
      XLSX.utils.book_append_sheet(workbook, tarjetaSheet, "Tarjeta");
    }

    // Hoja 5: Dep√≥sitos Transferencia
    if (datos.transferencia.depositos.length > 0) {
      const transferenciaSheet = generarHojaDepositos(
        datos.transferencia.depositos,
        "Transferencia"
      );
      XLSX.utils.book_append_sheet(
        workbook,
        transferenciaSheet,
        "Transferencia"
      );
    }
  } else if (tipoReporte === "general") {
    // Solo ventas
    const ventasSheet = generarHojaVentas(datos.ventas, "Reporte de Ventas");
    XLSX.utils.book_append_sheet(workbook, ventasSheet, "Ventas");
  } else {
    // Reporte espec√≠fico por m√©todo de pago
    const depositosSheet = generarHojaDepositos(
      datos.depositos,
      `Dep√≥sitos ${datos.metodo_pago}`
    );
    XLSX.utils.book_append_sheet(workbook, depositosSheet, datos.metodo_pago);
  }

  // Generar buffer del archivo
  const buffer = XLSX.write(workbook, { type: "buffer", bookType: "xlsx" });
  return buffer;
}

function generarHojaResumen(datos) {
  const resumenData = [
    ["REPORTE DE VENTAS - SISTEMA √ìPTICA"],
    [`Per√≠odo: ${datos.periodo_nombre}`],
    [
      `Fecha de generaci√≥n: ${new Date(datos.fecha_generacion).toLocaleString(
        "es-MX"
      )}`,
    ],
    [""],
    ["RESUMEN GENERAL"],
    ["Total de ventas:", datos.general.estadisticas.total_ventas],
    [
      "Monto total vendido:",
      `$${datos.general.estadisticas.total_vendido.toFixed(2)}`,
    ],
    [
      "Total depositado:",
      `$${datos.general.estadisticas.total_depositado.toFixed(2)}`,
    ],
    [
      "Total pendiente cobro:",
      `$${datos.general.estadisticas.total_pendiente.toFixed(2)}`,
    ],
    [""],
    ["DEP√ìSITOS POR M√âTODO DE PAGO"],
    [
      "Efectivo:",
      `$${datos.general.estadisticas.depositos_por_metodo.efectivo.toFixed(2)}`,
    ],
    [
      "Tarjeta:",
      `$${datos.general.estadisticas.depositos_por_metodo.tarjeta.toFixed(2)}`,
    ],
    [
      "Transferencia:",
      `$${datos.general.estadisticas.depositos_por_metodo.transferencia.toFixed(
        2
      )}`,
    ],
    [""],
    ["VENTAS POR ESTADO"],
    ["Pendiente:", datos.general.estadisticas.ventas_por_estado.pendiente],
    [
      "En Laboratorio:",
      datos.general.estadisticas.ventas_por_estado.en_laboratorio,
    ],
    ["Listo:", datos.general.estadisticas.ventas_por_estado.listo],
    ["Entregado:", datos.general.estadisticas.ventas_por_estado.entregado],
    ["Cancelado:", datos.general.estadisticas.ventas_por_estado.cancelado],
  ];

  return XLSX.utils.aoa_to_sheet(resumenData);
}

function generarHojaVentas(ventas, titulo) {
  const headers = [
    "N√∫mero de Venta",
    "Fecha",
    "Cliente",
    "Expediente",
    "Email",
    "Celular",
    "Marca Armaz√≥n",
    "Laboratorio",
    "Precio Armaz√≥n",
    "Precio Micas",
    "Costo Total",
    "Total Depositado",
    "Saldo Restante",
    "Estado",
    "Fecha Llegada Lab",
    "Fecha Entrega",
    "Notas",
  ];

  const filas = ventas.map((venta) => [
    venta.numero_venta,
    venta.fecha_venta,
    venta.cliente,
    venta.expediente || "",
    venta.email || "",
    venta.celular || "",
    venta.marca_armazon || "",
    venta.laboratorio || "",
    parseFloat(venta.precio_armazon || 0),
    parseFloat(venta.precio_micas || 0),
    parseFloat(venta.costo_total),
    parseFloat(venta.total_depositado),
    parseFloat(venta.saldo_restante),
    venta.estado,
    venta.fecha_llegada_laboratorio || "",
    venta.fecha_entrega_cliente || "",
    venta.notas || "",
  ]);

  const data = [headers, ...filas];
  return XLSX.utils.aoa_to_sheet(data);
}

function generarHojaDepositos(depositos, titulo) {
  const headers = [
    "Fecha Dep√≥sito",
    "N√∫mero de Venta",
    "Cliente",
    "Monto",
    "M√©todo de Pago",
    "Notas",
  ];

  const filas = depositos.map((deposito) => [
    deposito.fecha_deposito,
    deposito.numero_venta,
    deposito.cliente,
    parseFloat(deposito.monto),
    deposito.metodo_pago,
    deposito.deposito_notas || "",
  ]);

  const data = [headers, ...filas];
  return XLSX.utils.aoa_to_sheet(data);
}



================================================
File: src/app/api/test-conexion/route.js
================================================
import { NextResponse } from 'next/server'
import { ejecutarConsulta } from '@/lib/conexion-bd'

export async function GET() {
  try {
    // 1. Probar conexi√≥n b√°sica
    const resultadoConexion = await ejecutarConsulta('SELECT NOW() as hora_servidor, version() as version_pg')
    
    // 2. Verificar que existen las tablas principales
    const resultadoTablas = await ejecutarConsulta(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('usuarios', 'clientes', 'ventas', 'graduaciones', 'depositos', 'periodos_contables', 'antecedentes_medicos')
      ORDER BY table_name
    `)

    // 3. Contar registros en tabla usuarios
    const resultadoUsuarios = await ejecutarConsulta('SELECT COUNT(*) as total_usuarios FROM usuarios')

    // 4. Verificar que existe el usuario admin
    const resultadoAdmin = await ejecutarConsulta(
      'SELECT nombre_usuario, nombre_completo, activo FROM usuarios WHERE nombre_usuario = $1', 
      ['admin']
    )

    const response = {
      estado: 'conectado',
      timestamp: new Date().toISOString(),
      base_datos: {
        hora_servidor: resultadoConexion.rows[0]?.hora_servidor,
        version: resultadoConexion.rows[0]?.version_pg?.substring(0, 50) + '...',
      },
      tablas: {
        total_encontradas: resultadoTablas.rows.length,
        esperadas: 7,
        lista: resultadoTablas.rows.map(row => row.table_name),
        todas_existen: resultadoTablas.rows.length === 7
      },
      usuarios: {
        total: parseInt(resultadoUsuarios.rows[0]?.total_usuarios || 0),
        admin_existe: resultadoAdmin.rows.length > 0,
        admin_info: resultadoAdmin.rows[0] || null
      }
    }

    return NextResponse.json(response)

  } catch (error) {
    console.error('Error probando conexi√≥n:', error)

    let detalleError = error.message
    let sugerencia = ''

    // Analizar tipo de error y dar sugerencias
    if (error.code === 'ENOTFOUND') {
      sugerencia = 'Verifica la URL de conexi√≥n en .env.local'
    } else if (error.code === '28P01') {
      sugerencia = 'Usuario o contrase√±a incorrectos en la conexi√≥n'
    } else if (error.message.includes('relation') && error.message.includes('does not exist')) {
      sugerencia = 'Las tablas no existen. Ejecuta el dump de la base de datos.'
    } else if (error.code === 'ECONNREFUSED') {
      sugerencia = 'No se puede conectar al servidor de base de datos'
    }

    return NextResponse.json({
      estado: 'error',
      timestamp: new Date().toISOString(),
      error: {
        mensaje: detalleError,
        codigo: error.code,
        sugerencia
      }
    }, { status: 500 })
  }
}


================================================
File: src/app/api/ventas/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta, ejecutarTransaccion } from "@/lib/conexion-bd";
import { validarVenta, limpiarDatos } from "@/lib/validaciones";
import { generarNumeroVenta } from "@/lib/autenticacion";

// GET - Obtener todas las ventas
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const limite = parseInt(searchParams.get("limite")) || 50;
    const pagina = parseInt(searchParams.get("pagina")) || 1;
    const busqueda = searchParams.get("busqueda") || "";
    const estado = searchParams.get("estado") || "";
    const clienteId = searchParams.get("cliente_id") || "";

    const offset = (pagina - 1) * limite;

    let consulta = `
      SELECT 
        v.*,
        c.nombre_completo as cliente_nombre,
        c.expediente as cliente_expediente,
        c.email as cliente_email,
        c.celular as cliente_celular,
        p.nombre as periodo_nombre,
        COUNT(d.id) as total_depositos_registrados,
        COALESCE(SUM(d.monto), 0) as total_depositado_real
      FROM ventas v
      INNER JOIN clientes c ON v.cliente_id = c.id
      LEFT JOIN periodos_contables p ON v.periodo_id = p.id
      LEFT JOIN depositos d ON v.id = d.venta_id
    `;

    const parametros = [];
    let whereConditions = [];

    // Filtrar por b√∫squeda (n√∫mero de venta o cliente)
    if (busqueda) {
      whereConditions.push(
        `(v.numero_venta ILIKE $${
          parametros.length + 1
        } OR c.nombre_completo ILIKE $${parametros.length + 1})`
      );
      parametros.push(`%${busqueda}%`);
    }

    // Filtrar por estado
    if (estado) {
      whereConditions.push(`v.estado = $${parametros.length + 1}`);
      parametros.push(estado);
    }

    // Filtrar por cliente
    if (clienteId) {
      whereConditions.push(`v.cliente_id = $${parametros.length + 1}`);
      parametros.push(clienteId);
    }

    // Agregar condiciones WHERE si existen
    if (whereConditions.length > 0) {
      consulta += ` WHERE ${whereConditions.join(" AND ")}`;
    }

    consulta += `
      GROUP BY v.id, c.nombre_completo, c.expediente, c.email, c.celular, p.nombre
      ORDER BY v.fecha_venta DESC, v.fecha_creacion DESC
      LIMIT $${parametros.length + 1} OFFSET $${parametros.length + 2}
    `;

    parametros.push(limite, offset);

    console.log("Ejecutando consulta ventas:", consulta);
    console.log("Par√°metros:", parametros);

    const resultado = await ejecutarConsulta(consulta, parametros);

    // Obtener estad√≠sticas generales
    const consultaEstadisticas = `
      SELECT 
        COUNT(*) as total_ventas,
        COUNT(CASE WHEN estado = 'pendiente' THEN 1 END) as pendientes,
        COUNT(CASE WHEN estado = 'en_laboratorio' THEN 1 END) as en_laboratorio,
        COUNT(CASE WHEN estado = 'listo' THEN 1 END) as listos,
        COUNT(CASE WHEN estado = 'entregado' THEN 1 END) as entregados,
        COALESCE(SUM(costo_total), 0) as total_ingresos,
        COALESCE(SUM(total_depositado), 0) as total_depositado,
        COALESCE(SUM(saldo_restante), 0) as total_pendiente_cobro
      FROM ventas
    `;

    const estadisticas = await ejecutarConsulta(consultaEstadisticas);

    return NextResponse.json({
      ventas: resultado.rows,
      estadisticas: estadisticas.rows[0],
      pagination: {
        pagina,
        limite,
        total: resultado.rows.length,
      },
    });
  } catch (error) {
    console.error("Error obteniendo ventas:", error);
    return NextResponse.json(
      { error: "Error obteniendo ventas: " + error.message },
      { status: 500 }
    );
  }
}

// POST - Crear nueva venta
export async function POST(request) {
  try {
    const datosOriginales = await request.json();

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarVenta(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Verificar que el cliente existe
    const verificarCliente = await ejecutarConsulta(
      "SELECT id, nombre_completo FROM clientes WHERE id = $1",
      [datosLimpios.cliente_id]
    );

    if (verificarCliente.rows.length === 0) {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    // Crear venta y dep√≥sito inicial en transacci√≥n
    const resultado = await ejecutarTransaccion(async (cliente) => {
      // Generar n√∫mero de venta √∫nico
      const numeroVenta = generarNumeroVenta();

      // Obtener per√≠odo contable activo
      const consultaPeriodo = `
        SELECT id FROM periodos_contables 
        WHERE activo = true 
        ORDER BY fecha_creacion DESC 
        LIMIT 1
      `;
      const resultadoPeriodo = await cliente.query(consultaPeriodo);
      let periodoId = resultadoPeriodo.rows[0]?.id || null;

      // Si no hay per√≠odo activo, crear uno
      if (!periodoId) {
        const hoy = new Date();
        const mesActual = hoy.getMonth();
        const a√±oActual = hoy.getFullYear();

        const fechaInicio = new Date(a√±oActual, mesActual, 7);
        const fechaFin = new Date(a√±oActual, mesActual + 1, 6);

        const meses = [
          "Enero",
          "Febrero",
          "Marzo",
          "Abril",
          "Mayo",
          "Junio",
          "Julio",
          "Agosto",
          "Septiembre",
          "Octubre",
          "Noviembre",
          "Diciembre",
        ];
        const nombrePeriodo = `${meses[mesActual]} / ${
          meses[(mesActual + 1) % 12]
        }`;

        const consultaNuevoPeriodo = `
          INSERT INTO periodos_contables (nombre, fecha_inicio, fecha_fin, activo)
          VALUES ($1, $2, $3, true)
          RETURNING id
        `;

        const nuevoPeriodo = await cliente.query(consultaNuevoPeriodo, [
          nombrePeriodo,
          fechaInicio.toISOString().split("T")[0],
          fechaFin.toISOString().split("T")[0],
        ]);

        periodoId = nuevoPeriodo.rows[0].id;
      }

      // Insertar venta
      const consultaVenta = `
        INSERT INTO ventas (
          numero_venta, cliente_id, periodo_id, marca_armazon, laboratorio,
          precio_armazon, precio_micas, costo_total, total_depositado, saldo_restante,
          imagen_receta, estado, fecha_llegada_laboratorio, fecha_entrega_cliente,
          fecha_venta, notas
        ) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16
        ) RETURNING *
      `;

      const parametrosVenta = [
        numeroVenta,
        datosLimpios.cliente_id,
        periodoId,
        datosLimpios.marca_armazon || null,
        datosLimpios.laboratorio || null,
        datosLimpios.precio_armazon
          ? parseFloat(datosLimpios.precio_armazon)
          : null,
        datosLimpios.precio_micas
          ? parseFloat(datosLimpios.precio_micas)
          : null,
        parseFloat(datosLimpios.costo_total),
        datosLimpios.deposito_inicial
          ? parseFloat(datosLimpios.deposito_inicial)
          : 0,
        datosLimpios.saldo_restante
          ? parseFloat(datosLimpios.saldo_restante)
          : parseFloat(datosLimpios.costo_total),
        datosLimpios.imagen_receta || null,
        datosLimpios.estado || "pendiente",
        datosLimpios.fecha_llegada_laboratorio || null,
        datosLimpios.fecha_entrega_cliente || null,
        datosLimpios.fecha_venta || new Date().toISOString().split("T")[0],
        datosLimpios.notas || null,
      ];

      const resultadoVenta = await cliente.query(
        consultaVenta,
        parametrosVenta
      );
      const ventaCreada = resultadoVenta.rows[0];

      // Si hay dep√≥sito inicial, registrarlo
      if (
        datosLimpios.deposito_inicial &&
        parseFloat(datosLimpios.deposito_inicial) > 0
      ) {
        const consultaDeposito = `
          INSERT INTO depositos (
            venta_id, monto, metodo_pago, fecha_deposito, notas
          ) VALUES (
            $1, $2, $3, $4, $5
          )
        `;

        const parametrosDeposito = [
          ventaCreada.id,
          parseFloat(datosLimpios.deposito_inicial),
          "efectivo", // Por defecto, se puede cambiar despu√©s
          datosLimpios.fecha_venta || new Date().toISOString().split("T")[0],
          "Dep√≥sito inicial",
        ];

        await cliente.query(consultaDeposito, parametrosDeposito);
      }

      return ventaCreada;
    });

    return NextResponse.json(
      {
        mensaje: "Venta registrada exitosamente",
        venta: resultado,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creando venta:", error);

    if (error.code === "23503") {
      return NextResponse.json(
        { error: "Cliente no encontrado" },
        { status: 404 }
      );
    }

    if (error.code === "23505") {
      return NextResponse.json(
        { error: "Ya existe una venta con ese n√∫mero" },
        { status: 409 }
      );
    }

    return NextResponse.json(
      { error: "Error registrando venta" },
      { status: 500 }
    );
  }
}

// PUT - Actualizar venta existente
export async function PUT(request) {
  try {
    const datosOriginales = await request.json();
    const { id } = datosOriginales;

    if (!id) {
      return NextResponse.json(
        { error: "ID de venta requerido" },
        { status: 400 }
      );
    }

    // Limpiar y validar datos
    const datosLimpios = limpiarDatos(datosOriginales);
    const validacion = validarVenta(datosLimpios);

    if (!validacion.esValido) {
      return NextResponse.json(
        {
          error: "Datos inv√°lidos",
          errores: validacion.errores,
        },
        { status: 400 }
      );
    }

    // Verificar que la venta existe
    const verificarVenta = await ejecutarConsulta(
      "SELECT id FROM ventas WHERE id = $1",
      [id]
    );

    if (verificarVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    // Actualizar venta
    const consultaActualizar = `
      UPDATE ventas SET
        marca_armazon = $2,
        laboratorio = $3,
        precio_armazon = $4,
        precio_micas = $5,
        costo_total = $6,
        imagen_receta = $7,
        estado = $8,
        fecha_llegada_laboratorio = $9,
        fecha_entrega_cliente = $10,
        fecha_venta = $11,
        notas = $12,
        fecha_actualizacion = CURRENT_TIMESTAMP
      WHERE id = $1
      RETURNING *
    `;

    const parametros = [
      id,
      datosLimpios.marca_armazon || null,
      datosLimpios.laboratorio || null,
      datosLimpios.precio_armazon
        ? parseFloat(datosLimpios.precio_armazon)
        : null,
      datosLimpios.precio_micas ? parseFloat(datosLimpios.precio_micas) : null,
      parseFloat(datosLimpios.costo_total),
      datosLimpios.imagen_receta || null,
      datosLimpios.estado || "pendiente",
      datosLimpios.fecha_llegada_laboratorio || null,
      datosLimpios.fecha_entrega_cliente || null,
      datosLimpios.fecha_venta || new Date().toISOString().split("T")[0],
      datosLimpios.notas || null,
    ];

    const resultado = await ejecutarConsulta(consultaActualizar, parametros);

    // Recalcular saldo restante basado en dep√≥sitos existentes
    const consultaActualizarSaldo = `
  UPDATE ventas 
  SET 
    total_depositado = (
      SELECT COALESCE(SUM(monto), 0) 
      FROM depositos 
      WHERE venta_id = $1
    ),
    saldo_restante = costo_total - (
      SELECT COALESCE(SUM(monto), 0) 
      FROM depositos 
      WHERE venta_id = $1
    )
  WHERE id = $1
`;

    await ejecutarConsulta(consultaActualizarSaldo, [id]);

    return NextResponse.json({
      mensaje: "Venta actualizada exitosamente",
      venta: resultado.rows[0],
    });
  } catch (error) {
    console.error("Error actualizando venta:", error);
    return NextResponse.json(
      { error: "Error actualizando venta" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar venta
export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get("id");

    if (!id) {
      return NextResponse.json(
        { error: "ID de venta requerido" },
        { status: 400 }
      );
    }

    // Verificar que la venta existe
    const verificarVenta = await ejecutarConsulta(
      "SELECT id, numero_venta, estado FROM ventas WHERE id = $1",
      [id]
    );

    if (verificarVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    const venta = verificarVenta.rows[0];

    // Solo permitir eliminaci√≥n si la venta est√° en estado pendiente
    if (venta.estado !== "pendiente") {
      return NextResponse.json(
        {
          error: "Solo se pueden eliminar ventas en estado pendiente",
          sugerencia: 'Cambie el estado a "cancelado" en su lugar',
        },
        { status: 409 }
      );
    }

    // Eliminar venta (esto eliminar√° en cascada los dep√≥sitos)
    await ejecutarConsulta("DELETE FROM ventas WHERE id = $1", [id]);

    return NextResponse.json({
      mensaje: "Venta eliminada exitosamente",
    });
  } catch (error) {
    console.error("Error eliminando venta:", error);
    return NextResponse.json(
      { error: "Error eliminando venta" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/api/ventas/[id]/route.js
================================================
import { NextResponse } from "next/server";
import { ejecutarConsulta } from "@/lib/conexion-bd";

// GET - Obtener venta por ID con informaci√≥n completa
export async function GET(request, { params }) {
  try {
    const { id } = params;

    if (!id) {
      return NextResponse.json(
        { error: "ID de venta requerido" },
        { status: 400 }
      );
    }

    // Obtener datos completos de la venta
    const consultaVenta = `
      SELECT 
        v.*,
        c.nombre_completo as cliente_nombre,
        c.expediente as cliente_expediente,
        c.email as cliente_email,
        c.celular as cliente_celular,
        c.telefono as cliente_telefono,
        c.direccion as cliente_direccion,
        p.nombre as periodo_nombre,
        p.fecha_inicio as periodo_inicio,
        p.fecha_fin as periodo_fin
      FROM ventas v
      INNER JOIN clientes c ON v.cliente_id = c.id
      LEFT JOIN periodos_contables p ON v.periodo_id = p.id
      WHERE v.id = $1
    `;

    const resultadoVenta = await ejecutarConsulta(consultaVenta, [id]);

    if (resultadoVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    const venta = resultadoVenta.rows[0];

    // Obtener graduaciones del cliente
    const consultaGraduaciones = `
      SELECT * FROM graduaciones 
      WHERE cliente_id = $1 
      ORDER BY tipo, fecha_examen DESC
    `;
    const resultadoGraduaciones = await ejecutarConsulta(consultaGraduaciones, [
      venta.cliente_id,
    ]);

    // Obtener historial de dep√≥sitos
    const consultaDepositos = `
      SELECT 
        d.*,
        TO_CHAR(d.fecha_deposito, 'DD/MM/YYYY') as fecha_deposito_formato,
        TO_CHAR(d.fecha_creacion, 'DD/MM/YYYY HH24:MI') as fecha_registro_formato
      FROM depositos d 
      WHERE d.venta_id = $1 
      ORDER BY d.fecha_deposito DESC, d.fecha_creacion DESC
    `;
    const resultadoDepositos = await ejecutarConsulta(consultaDepositos, [id]);

    // Calcular estad√≠sticas de la venta
    const estadisticasVenta = {
      total_depositos: resultadoDepositos.rows.length,
      total_depositado_real: resultadoDepositos.rows.reduce(
        (total, deposito) => total + parseFloat(deposito.monto || 0),
        0
      ),
      saldo_calculado:
        parseFloat(venta.costo_total) -
        resultadoDepositos.rows.reduce(
          (total, deposito) => total + parseFloat(deposito.monto || 0),
          0
        ),
      porcentaje_pagado:
        parseFloat(venta.costo_total) > 0
          ? (resultadoDepositos.rows.reduce(
              (total, deposito) => total + parseFloat(deposito.monto || 0),
              0
            ) /
              parseFloat(venta.costo_total)) *
            100
          : 0,
    };

    // Obtener otras ventas del mismo cliente (√∫ltimas 5)
    const consultaOtrasVentas = `
      SELECT 
        id, numero_venta, costo_total, estado, fecha_venta,
        TO_CHAR(fecha_venta, 'DD/MM/YYYY') as fecha_venta_formato
      FROM ventas 
      WHERE cliente_id = $1 AND id != $2
      ORDER BY fecha_venta DESC 
      LIMIT 5
    `;
    const resultadoOtrasVentas = await ejecutarConsulta(consultaOtrasVentas, [
      venta.cliente_id,
      id,
    ]);

    return NextResponse.json({
      venta,
      graduaciones: resultadoGraduaciones.rows,
      depositos: resultadoDepositos.rows,
      estadisticas: estadisticasVenta,
      otras_ventas: resultadoOtrasVentas.rows,
    });
  } catch (error) {
    console.error("Error obteniendo venta:", error);
    return NextResponse.json(
      { error: "Error obteniendo informaci√≥n de la venta" },
      { status: 500 }
    );
  }
}

// PUT - Actualizar venta espec√≠fica
export async function PUT(request, { params }) {
  try {
    const { id } = params;
    const datosOriginales = await request.json();

    if (!id) {
      return NextResponse.json(
        { error: "ID de venta requerido" },
        { status: 400 }
      );
    }

    // Verificar que la venta existe
    const verificarVenta = await ejecutarConsulta(
      "SELECT id FROM ventas WHERE id = $1",
      [id]
    );

    if (verificarVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    // Actualizar venta
    const consultaActualizar = `
      UPDATE ventas SET
        marca_armazon = $2,
        laboratorio = $3,
        precio_armazon = $4,
        precio_micas = $5,
        costo_total = $6,
        imagen_receta = $7,
        estado = $8,
        fecha_llegada_laboratorio = $9,
        fecha_entrega_cliente = $10,
        notas = $11,
        fecha_actualizacion = CURRENT_TIMESTAMP
      WHERE id = $1
      RETURNING *
    `;

    const parametros = [
      id,
      datosOriginales.marca_armazon || null,
      datosOriginales.laboratorio || null,
      datosOriginales.precio_armazon
        ? parseFloat(datosOriginales.precio_armazon)
        : null,
      datosOriginales.precio_micas
        ? parseFloat(datosOriginales.precio_micas)
        : null,
      parseFloat(datosOriginales.costo_total),
      datosOriginales.imagen_receta || null,
      datosOriginales.estado || "pendiente",
      datosOriginales.fecha_llegada_laboratorio || null,
      datosOriginales.fecha_entrega_cliente || null,
      datosOriginales.notas || null,
    ];

    const resultado = await ejecutarConsulta(consultaActualizar, parametros);

    // Recalcular saldo restante basado en dep√≥sitos existentes
    const consultaRecalcular = `
      UPDATE ventas 
      SET 
        total_depositado = (
          SELECT COALESCE(SUM(monto), 0) 
          FROM depositos 
          WHERE venta_id = $1
        ),
        saldo_restante = costo_total - (
          SELECT COALESCE(SUM(monto), 0) 
          FROM depositos 
          WHERE venta_id = $1
        )
      WHERE id = $1
      RETURNING *
    `;

    const ventaActualizada = await ejecutarConsulta(consultaRecalcular, [id]);

    return NextResponse.json({
      mensaje: "Venta actualizada exitosamente",
      venta: ventaActualizada.rows[0],
    });
  } catch (error) {
    console.error("Error actualizando venta:", error);
    return NextResponse.json(
      { error: "Error actualizando venta" },
      { status: 500 }
    );
  }
}

// DELETE - Eliminar venta espec√≠fica
export async function DELETE(request, { params }) {
  try {
    const { id } = params;

    if (!id) {
      return NextResponse.json(
        { error: "ID de venta requerido" },
        { status: 400 }
      );
    }

    // Verificar que la venta exists y obtener informaci√≥n
    const verificarVenta = await ejecutarConsulta(
      "SELECT id, numero_venta, estado, total_depositado FROM ventas WHERE id = $1",
      [id]
    );

    if (verificarVenta.rows.length === 0) {
      return NextResponse.json(
        { error: "Venta no encontrada" },
        { status: 404 }
      );
    }

    const venta = verificarVenta.rows[0];

    // Verificar si se puede eliminar
    if (venta.estado === "entregado") {
      return NextResponse.json(
        {
          error: "No se puede eliminar una venta ya entregada",
          sugerencia: 'Cambie el estado a "cancelado" en su lugar',
        },
        { status: 409 }
      );
    }

    if (parseFloat(venta.total_depositado) > 0) {
      return NextResponse.json(
        {
          error: "No se puede eliminar una venta con dep√≥sitos registrados",
          sugerencia:
            'Elimine primero todos los dep√≥sitos o cambie el estado a "cancelado"',
        },
        { status: 409 }
      );
    }

    // Eliminar venta (esto eliminar√° en cascada los dep√≥sitos si los hay)
    await ejecutarConsulta("DELETE FROM ventas WHERE id = $1", [id]);

    return NextResponse.json({
      mensaje: "Venta eliminada exitosamente",
      numero_venta: venta.numero_venta,
    });
  } catch (error) {
    console.error("Error eliminando venta:", error);
    return NextResponse.json(
      { error: "Error eliminando venta" },
      { status: 500 }
    );
  }
}



================================================
File: src/app/clientes/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

export default function PaginaClientes() {
  const [clientes, setClientes] = useState([]);
  const [cargando, setCargando] = useState(true);
  const [busqueda, setBusqueda] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    cargarClientes();
  }, []);

  const cargarClientes = async (terminoBusqueda = "") => {
    try {
      setCargando(true);

      // Volver a usar la API principal ya corregida
      const url = terminoBusqueda
        ? `/api/clientes?busqueda=${encodeURIComponent(terminoBusqueda)}`
        : "/api/clientes";

      console.log("Cargando desde:", url);

      const respuesta = await fetch(url, {
        credentials: "include",
      });

      console.log("Respuesta status:", respuesta.status);

      if (respuesta.ok) {
        const datos = await respuesta.json();
        console.log("Datos recibidos:", datos);
        setClientes(datos.clientes);
        setError("");
      } else {
        const errorData = await respuesta.text();
        console.error("Error response:", errorData);
        setError("Error cargando clientes: " + respuesta.status);
      }
    } catch (error) {
      console.error("Error de conexi√≥n:", error);
      setError("Error de conexi√≥n: " + error.message);
    } finally {
      setCargando(false);
    }
  };

  const manejarBusqueda = (evento) => {
    evento.preventDefault();
    cargarClientes(busqueda);
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX");
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad || cantidad === "0") return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/clientes" className="text-blue-600 font-medium">
                üë• Clientes
              </Link>
              <Link
                href="/ventas"
                className="text-gray-600 hover:text-gray-900"
              >
                üõí Ventas
              </Link>
              <Link
                href="/periodos"
                className="text-gray-600 hover:text-gray-900"
              >
                üìÖ Per√≠odos
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="md:flex md:items-center md:justify-between mb-6">
          <div className="min-w-0 flex-1">
            <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl">
              Clientes Registrados
            </h2>
            <p className="mt-1 text-sm text-gray-500">
              Gesti√≥n de expedientes m√©dicos y clientes
            </p>
          </div>
          <div className="mt-4 flex md:ml-4 md:mt-0">
            <Link href="/clientes/nuevo" className="btn btn-primary">
              <span className="mr-2">üë§</span>
              Nuevo Cliente
            </Link>
          </div>
        </div>

        {/* B√∫squeda */}
        <div className="bg-white shadow rounded-lg mb-6">
          <div className="p-6">
            <form onSubmit={manejarBusqueda} className="flex gap-4">
              <div className="flex-1">
                <input
                  type="text"
                  placeholder="Buscar por nombre o expediente..."
                  value={busqueda}
                  onChange={(e) => setBusqueda(e.target.value)}
                  className="form-input"
                />
              </div>
              <button
                type="submit"
                className="btn btn-primary"
                disabled={cargando}
              >
                {cargando ? "Buscando..." : "Buscar"}
              </button>
              {busqueda && (
                <button
                  type="button"
                  onClick={() => {
                    setBusqueda("");
                    cargarClientes();
                  }}
                  className="btn btn-secondary"
                >
                  Limpiar
                </button>
              )}
            </form>
          </div>
        </div>

        {/* Mensaje de error */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md mb-6">
            {error}
          </div>
        )}

        {/* Lista de clientes */}
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          {cargando ? (
            <div className="p-6 text-center">
              <div className="spinner mx-auto mb-4"></div>
              <p className="text-gray-500">Cargando clientes...</p>
            </div>
          ) : clientes.length === 0 ? (
            <div className="p-6 text-center">
              <div className="text-4xl mb-4">üë•</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No hay clientes registrados
              </h3>
              <p className="text-gray-500 mb-4">
                {busqueda
                  ? "No se encontraron resultados"
                  : "Comienza registrando tu primer cliente"}
              </p>
              <Link href="/clientes/nuevo" className="btn btn-primary">
                Registrar Primer Cliente
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Cliente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Expediente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Contacto
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Ventas
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Registro
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {clientes.map((cliente) => (
                    <tr key={cliente.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10">
                            <div className="h-10 w-10 rounded-full bg-optica-100 flex items-center justify-center">
                              <span className="text-sm font-medium text-optica-700">
                                {cliente.nombre_completo
                                  ?.charAt(0)
                                  ?.toUpperCase() || "?"}
                              </span>
                            </div>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {cliente.nombre_completo}
                            </div>
                            <div className="text-sm text-gray-500">
                              {cliente.edad
                                ? `${cliente.edad} a√±os`
                                : "Edad no registrada"}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {cliente.expediente || "Sin expediente"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {cliente.email || "Sin email"}
                        </div>
                        <div className="text-sm text-gray-500">
                          {cliente.celular ||
                            cliente.telefono ||
                            "Sin tel√©fono"}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {cliente.total_ventas || 0} ventas
                        </div>
                        <div className="text-sm text-gray-500">
                          {formatearDinero(cliente.total_gastado)}
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {formatearFecha(cliente.fecha_creacion)}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                        <Link
                          href={`/clientes/${cliente.id}`}
                          className="text-optica-600 hover:text-optica-900"
                        >
                          Ver
                        </Link>
                        <Link
                          href={`/clientes/${cliente.id}/graduacion`}
                          className="text-green-600 hover:text-green-900"
                        >
                          Graduaci√≥n
                        </Link>
                        <Link
                          href={`/clientes/${cliente.id}/nueva-venta`}
                          className="text-yellow-600 hover:text-yellow-900"
                        >
                          Venta
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Resumen */}
        {clientes.length > 0 && (
          <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-2xl font-bold text-optica-600">
                {clientes.length}
              </div>
              <div className="text-sm text-gray-600">Clientes Registrados</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-2xl font-bold text-green-600">
                {clientes.reduce(
                  (total, cliente) =>
                    total + parseInt(cliente.total_ventas || 0),
                  0
                )}
              </div>
              <div className="text-sm text-gray-600">Total Ventas</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-2xl font-bold text-yellow-600">
                {formatearDinero(
                  clientes.reduce(
                    (total, cliente) =>
                      total + parseFloat(cliente.total_gastado || 0),
                    0
                  )
                )}
              </div>
              <div className="text-sm text-gray-600">Ingresos Totales</div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}



================================================
File: src/app/clientes/[id]/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";

export default function PaginaDetalleCliente() {
  const params = useParams();
  const router = useRouter();
  const clienteId = params.id;

  const [datosCliente, setDatosCliente] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    cargarDatosCliente();
  }, [clienteId]);

  const cargarDatosCliente = async () => {
    setCargando(true);
    try {
      const respuesta = await fetch(`/api/clientes/${clienteId}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setDatosCliente(datos);
      } else {
        setError("Cliente no encontrado");
      }
    } catch (error) {
      setError("Error cargando datos del cliente");
    } finally {
      setCargando(false);
    }
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad || cantidad === "0") return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const calcularEdad = () => {
    if (!datosCliente?.cliente?.fecha_nacimiento) return null;
    const nacimiento = new Date(datosCliente.cliente.fecha_nacimiento);
    const hoy = new Date();
    let edad = hoy.getFullYear() - nacimiento.getFullYear();
    const mes = hoy.getMonth() - nacimiento.getMonth();

    if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
      edad--;
    }

    return edad;
  };

  const obtenerEstadoVenta = (estado) => {
    const estados = {
      pendiente: { label: "Pendiente", color: "bg-yellow-100 text-yellow-800" },
      en_laboratorio: {
        label: "En Laboratorio",
        color: "bg-blue-100 text-blue-800",
      },
      listo: { label: "Listo", color: "bg-green-100 text-green-800" },
      entregado: { label: "Entregado", color: "bg-gray-100 text-gray-800" },
      cancelado: { label: "Cancelado", color: "bg-red-100 text-red-800" },
    };
    return estados[estado] || estados.pendiente;
  };

  if (cargando) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-600">Cargando informaci√≥n del cliente...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => router.push("/clientes")}
            className="btn btn-primary"
          >
            Volver a Clientes
          </button>
        </div>
      </div>
    );
  }

  const { cliente, graduaciones, ventas, estadisticas } = datosCliente;

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900 mb-2">
                  {cliente.nombre_completo}
                </h1>
                <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                  {cliente.expediente && (
                    <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded">
                      Exp: {cliente.expediente}
                    </span>
                  )}
                  {cliente.edad && <span>{cliente.edad} a√±os</span>}
                  {cliente.ocupacion && <span>üìº {cliente.ocupacion}</span>}
                  <span>
                    üìÖ Registrado: {formatearFecha(cliente.fecha_creacion)}
                  </span>
                </div>
              </div>

              <div className="flex gap-2 flex-wrap">
                <Link
                  href={`/clientes/${clienteId}/graduacion`}
                  className="btn btn-primary btn-sm"
                >
                  üëÅÔ∏è Graduaciones
                </Link>
                <Link
                  href={`/clientes/${clienteId}/nueva-venta`}
                  className="btn btn-secondary btn-sm"
                >
                  üõí Nueva Venta
                </Link>
                <button
                  onClick={() => router.push(`/clientes/${clienteId}/editar`)}
                  className="btn btn-secondary btn-sm"
                >
                  ‚úèÔ∏è Editar
                </button>
              </div>
            </div>

            {/* Estad√≠sticas r√°pidas */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-blue-50 rounded-lg">
                <div className="text-xl font-bold text-blue-600">
                  {estadisticas.total_ventas}
                </div>
                <div className="text-xs text-blue-800">Ventas</div>
              </div>
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <div className="text-xl font-bold text-green-600">
                  {formatearDinero(estadisticas.total_gastado)}
                </div>
                <div className="text-xs text-green-800">Total Gastado</div>
              </div>
              <div className="text-center p-3 bg-yellow-50 rounded-lg">
                <div className="text-xl font-bold text-yellow-600">
                  {formatearDinero(estadisticas.saldo_pendiente)}
                </div>
                <div className="text-xs text-yellow-800">Pendiente</div>
              </div>
              <div className="text-center p-3 bg-purple-50 rounded-lg">
                <div className="text-xl font-bold text-purple-600">
                  {estadisticas.graduaciones_registradas}
                </div>
                <div className="text-xs text-purple-800">Graduaciones</div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Informaci√≥n Personal */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n Personal
              </h3>

              <div className="space-y-3 text-sm">
                {cliente.email && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Email:</span>
                    <span className="font-medium">{cliente.email}</span>
                  </div>
                )}

                {cliente.celular && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Celular:</span>
                    <span className="font-medium">{cliente.celular}</span>
                  </div>
                )}

                {cliente.telefono && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Tel√©fono:</span>
                    <span className="font-medium">{cliente.telefono}</span>
                  </div>
                )}

                {cliente.direccion && (
                  <div>
                    <span className="text-gray-600">Direcci√≥n:</span>
                    <p className="font-medium mt-1">{cliente.direccion}</p>
                  </div>
                )}

                {cliente.fecha_nacimiento && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Nacimiento:</span>
                    <span className="font-medium">
                      {formatearFecha(cliente.fecha_nacimiento)}
                      {calcularEdad() && ` (${calcularEdad()} a√±os)`}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {/* Informaci√≥n M√©dica */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n M√©dica
              </h3>

              <div className="space-y-3 text-sm">
                {cliente.peso && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Peso:</span>
                    <span className="font-medium">{cliente.peso} kg</span>
                  </div>
                )}

                {cliente.talla && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Talla:</span>
                    <span className="font-medium">{cliente.talla} m</span>
                  </div>
                )}

                {cliente.imc && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">IMC:</span>
                    <span className="font-medium">{cliente.imc}</span>
                  </div>
                )}

                {cliente.presion_arterial && (
                  <div className="flex justify-between">
                    <span className="text-gray-600">Presi√≥n:</span>
                    <span className="font-medium">
                      {cliente.presion_arterial}
                    </span>
                  </div>
                )}

                {(cliente.presion_alta || cliente.diabetes) && (
                  <div className="pt-2 border-t">
                    <span className="text-gray-600 text-xs uppercase tracking-wide">
                      Antecedentes:
                    </span>
                    <div className="mt-1 space-y-1">
                      {cliente.presion_alta && (
                        <span className="inline-block bg-red-100 text-red-800 text-xs px-2 py-1 rounded mr-2">
                          Presi√≥n Alta
                        </span>
                      )}
                      {cliente.diabetes && (
                        <span className="inline-block bg-orange-100 text-orange-800 text-xs px-2 py-1 rounded">
                          Diabetes
                        </span>
                      )}
                    </div>
                  </div>
                )}

                {cliente.alergias && (
                  <div>
                    <span className="text-gray-600">Alergias:</span>
                    <p className="font-medium mt-1 text-red-600">
                      {cliente.alergias}
                    </p>
                  </div>
                )}

                {cliente.motivo_consulta && (
                  <div>
                    <span className="text-gray-600">Motivo de consulta:</span>
                    <p className="font-medium mt-1">
                      {cliente.motivo_consulta}
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Graduaciones y Ventas */}
          <div className="lg:col-span-2">
            {/* Graduaciones */}
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  Graduaciones ({graduaciones.length})
                </h3>
                <Link
                  href={`/clientes/${clienteId}/graduacion`}
                  className="btn btn-primary btn-sm"
                >
                  Ver Todas
                </Link>
              </div>

              {graduaciones.length === 0 ? (
                <div className="text-center py-6 text-gray-500">
                  <div className="text-3xl mb-2">üëÅÔ∏è</div>
                  <p>No hay graduaciones registradas</p>
                  <Link
                    href={`/clientes/${clienteId}/graduacion`}
                    className="btn btn-primary btn-sm mt-2"
                  >
                    Agregar Primera Graduaci√≥n
                  </Link>
                </div>
              ) : (
                <div className="space-y-3">
                  {graduaciones.slice(0, 2).map((graduacion) => (
                    <div key={graduacion.id} className="border rounded-lg p-3">
                      <div className="flex justify-between items-start mb-2">
                        <span
                          className={`px-2 py-1 text-xs font-medium rounded ${
                            graduacion.tipo === "lejos"
                              ? "bg-blue-100 text-blue-800"
                              : "bg-green-100 text-green-800"
                          }`}
                        >
                          {graduacion.tipo === "lejos" ? "Lejos" : "Cerca"}
                        </span>
                        <span className="text-xs text-gray-500">
                          {formatearFecha(graduacion.fecha_examen)}
                        </span>
                      </div>

                      <div className="grid grid-cols-2 gap-2 text-xs">
                        <div>
                          <span className="text-gray-600">OD:</span>
                          <span className="ml-1 font-mono">
                            {graduacion.od_esfera
                              ? `${graduacion.od_esfera >= 0 ? "+" : ""}${
                                  graduacion.od_esfera
                                }`
                              : "--"}
                            {graduacion.od_cilindro
                              ? ` ${graduacion.od_cilindro >= 0 ? "+" : ""}${
                                  graduacion.od_cilindro
                                }`
                              : ""}
                            {graduacion.od_eje ? ` ${graduacion.od_eje}¬∞` : ""}
                          </span>
                        </div>
                        <div>
                          <span className="text-gray-600">OI:</span>
                          <span className="ml-1 font-mono">
                            {graduacion.oi_esfera
                              ? `${graduacion.oi_esfera >= 0 ? "+" : ""}${
                                  graduacion.oi_esfera
                                }`
                              : "--"}
                            {graduacion.oi_cilindro
                              ? ` ${graduacion.oi_cilindro >= 0 ? "+" : ""}${
                                  graduacion.oi_cilindro
                                }`
                              : ""}
                            {graduacion.oi_eje ? ` ${graduacion.oi_eje}¬∞` : ""}
                          </span>
                        </div>
                      </div>
                    </div>
                  ))}

                  {graduaciones.length > 2 && (
                    <div className="text-center">
                      <Link
                        href={`/clientes/${clienteId}/graduacion`}
                        className="text-blue-600 hover:text-blue-800 text-sm"
                      >
                        Ver {graduaciones.length - 2} graduaciones m√°s...
                      </Link>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* Historial de Ventas */}
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-semibold text-gray-900">
                  Historial de Ventas ({ventas.length})
                </h3>
                <Link
                  href={`/clientes/${clienteId}/nueva-venta`}
                  className="btn btn-primary btn-sm"
                >
                  Nueva Venta
                </Link>
              </div>

              {ventas.length === 0 ? (
                <div className="text-center py-6 text-gray-500">
                  <div className="text-3xl mb-2">üõí</div>
                  <p>No hay ventas registradas</p>
                  <Link
                    href={`/clientes/${clienteId}/nueva-venta`}
                    className="btn btn-primary btn-sm mt-2"
                  >
                    Crear Primera Venta
                  </Link>
                </div>
              ) : (
                <div className="space-y-3">
                  {ventas.map((venta) => {
                    const estadoInfo = obtenerEstadoVenta(venta.estado);
                    return (
                      <div
                        key={venta.id}
                        className="border rounded-lg p-3 hover:bg-gray-50"
                      >
                        <div className="flex justify-between items-start mb-2">
                          <div>
                            <span className="font-medium">
                              {venta.numero_venta}
                            </span>
                            {venta.marca_armazon && (
                              <span className="text-gray-600 text-sm ml-2">
                                {venta.marca_armazon}
                              </span>
                            )}
                          </div>
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded ${estadoInfo.color}`}
                          >
                            {estadoInfo.label}
                          </span>
                        </div>

                        <div className="grid grid-cols-3 gap-2 text-xs text-gray-600">
                          <div>
                            <span>Total: </span>
                            <span className="font-medium">
                              {formatearDinero(venta.costo_total)}
                            </span>
                          </div>
                          <div>
                            <span>Depositado: </span>
                            <span className="font-medium">
                              {formatearDinero(venta.total_depositado)}
                            </span>
                          </div>
                          <div>
                            <span>Resta: </span>
                            <span className="font-medium text-red-600">
                              {formatearDinero(venta.saldo_restante)}
                            </span>
                          </div>
                        </div>

                        <div className="flex justify-between items-center mt-2">
                          <span className="text-xs text-gray-500">
                            {formatearFecha(venta.fecha_venta)}
                          </span>
                          <div className="flex gap-2">
                            <Link
                              href={`/ventas/${venta.id}`}
                              className="text-blue-600 hover:text-blue-800 text-xs font-medium"
                            >
                              Ver detalles ‚Üí
                            </Link>
                            {parseFloat(venta.saldo_restante) > 0 && (
                              <Link
                                href={`/ventas/${venta.id}`}
                                className="text-green-600 hover:text-green-800 text-xs font-medium"
                                title="Agregar dep√≥sito"
                              >
                                üí∞ Abonar
                              </Link>
                            )}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Bot√≥n de regreso */}
        <div className="mt-6 text-center">
          <Link href="/clientes" className="btn btn-secondary">
            ‚Üê Volver a Clientes
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/app/clientes/[id]/graduacion/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import FormularioGraduacion from "@/components/formularios/FormularioGraduacion";

export default function PaginaGraduacionCliente() {
  const params = useParams();
  const clienteId = params.id;

  const [cliente, setCliente] = useState(null);
  const [graduaciones, setGraduaciones] = useState([]);
  const [graduacionEditando, setGraduacionEditando] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [tipoNuevaGraduacion, setTipoNuevaGraduacion] = useState("lejos");

  useEffect(() => {
    cargarDatos();
  }, [clienteId]);

  const cargarDatos = async () => {
    setCargando(true);
    try {
      await Promise.all([cargarCliente(), cargarGraduaciones()]);
    } catch (error) {
      setError("Error cargando datos");
    } finally {
      setCargando(false);
    }
  };

  const cargarCliente = async () => {
    try {
      const respuesta = await fetch(`/api/clientes/${clienteId}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setCliente(datos.cliente);
      }
    } catch (error) {
      console.error("Error cargando cliente:", error);
    }
  };

  const cargarGraduaciones = async () => {
    try {
      const respuesta = await fetch(
        `/api/graduaciones?cliente_id=${clienteId}`,
        {
          credentials: "include",
        }
      );

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setGraduaciones(datos.graduaciones);
      }
    } catch (error) {
      console.error("Error cargando graduaciones:", error);
    }
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatearGraduacion = (esfera, cilindro, eje, adicion) => {
    let resultado = [];

    if (esfera) resultado.push(`Esf: ${esfera >= 0 ? "+" : ""}${esfera}`);
    if (cilindro) resultado.push(`Cil: ${cilindro >= 0 ? "+" : ""}${cilindro}`);
    if (eje) resultado.push(`Eje: ${eje}¬∞`);
    if (adicion) resultado.push(`Add: +${adicion}`);

    return resultado.length > 0 ? resultado.join(" | ") : "Sin graduaci√≥n";
  };

  const eliminarGraduacion = async (graduacionId) => {
    if (!confirm("¬øEst√° seguro de eliminar esta graduaci√≥n?")) {
      return;
    }

    try {
      const respuesta = await fetch(`/api/graduaciones?id=${graduacionId}`, {
        method: "DELETE",
        credentials: "include",
      });

      if (respuesta.ok) {
        await cargarGraduaciones();
      } else {
        alert("Error eliminando graduaci√≥n");
      }
    } catch (error) {
      alert("Error de conexi√≥n");
    }
  };

  if (cargando) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-600">Cargando informaci√≥n del cliente...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error</h2>
          <p className="text-gray-600">{error}</p>
        </div>
      </div>
    );
  }

  // Mostrar formulario si est√° editando o creando
  if (mostrarFormulario || graduacionEditando) {
    return (
      <FormularioGraduacion
        clienteId={clienteId}
        graduacionExistente={graduacionEditando}
        tipoInicial={tipoNuevaGraduacion}
      />
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-6xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">
                  Graduaciones del Cliente
                </h1>
                {cliente && (
                  <div className="mt-2">
                    <p className="text-lg text-gray-700">
                      <span className="font-medium">
                        {cliente.nombre_completo}
                      </span>
                    </p>
                    <div className="flex gap-4 text-sm text-gray-500 mt-1">
                      {cliente.expediente && (
                        <span>Exp: {cliente.expediente}</span>
                      )}
                      {cliente.edad && <span>{cliente.edad} a√±os</span>}
                      {cliente.email && <span>{cliente.email}</span>}
                    </div>
                  </div>
                )}
              </div>

              <div className="flex gap-2">
                <button
                  onClick={() => {
                    setTipoNuevaGraduacion("lejos");
                    setMostrarFormulario(true);
                  }}
                  className="btn btn-primary"
                >
                  üëÅÔ∏è Graduaci√≥n de Lejos
                </button>

                <button
                  onClick={() => {
                    setTipoNuevaGraduacion("cerca");
                    setMostrarFormulario(true);
                  }}
                  className="btn btn-secondary"
                >
                  üîç Graduaci√≥n de Cerca
                </button>
              </div>
            </div>

            {graduaciones.length === 0 && (
              <div className="text-center py-8 text-gray-500">
                <div className="text-4xl mb-2">üëÅÔ∏è</div>
                <p>No hay graduaciones registradas para este cliente</p>
                <p className="text-sm">
                  Agregue la primera graduaci√≥n usando los botones superiores
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Lista de Graduaciones */}
        {graduaciones.length > 0 && (
          <div className="space-y-4">
            {graduaciones.map((graduacion) => (
              <div key={graduacion.id} className="bg-white rounded-lg shadow">
                <div className="p-6">
                  <div className="flex items-start justify-between mb-4">
                    <div>
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="text-lg font-semibold text-gray-900">
                          Graduaci√≥n para{" "}
                          {graduacion.tipo === "lejos"
                            ? "Ver de Lejos"
                            : "Ver de Cerca"}
                        </h3>
                        <span
                          className={`px-2 py-1 text-xs font-medium rounded-full ${
                            graduacion.tipo === "lejos"
                              ? "bg-blue-100 text-blue-800"
                              : "bg-green-100 text-green-800"
                          }`}
                        >
                          {graduacion.tipo.toUpperCase()}
                        </span>
                      </div>
                      <p className="text-sm text-gray-500">
                        Examen realizado:{" "}
                        {formatearFecha(graduacion.fecha_examen)}
                      </p>
                    </div>

                    <div className="flex gap-2">
                      <button
                        onClick={() => setGraduacionEditando(graduacion)}
                        className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                      >
                        ‚úèÔ∏è Editar
                      </button>
                      <button
                        onClick={() => eliminarGraduacion(graduacion.id)}
                        className="text-red-600 hover:text-red-800 text-sm font-medium"
                      >
                        üóëÔ∏è Eliminar
                      </button>
                    </div>
                  </div>

                  {/* Mediciones por Ojo */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-4">
                    {/* Ojo Derecho */}
                    <div className="border rounded-lg p-4 bg-blue-50">
                      <h4 className="font-semibold text-blue-900 mb-2 flex items-center">
                        <span className="mr-2">üëÅÔ∏è</span>
                        Ojo Derecho (OD)
                      </h4>
                      <p className="text-sm text-gray-700">
                        {formatearGraduacion(
                          graduacion.od_esfera,
                          graduacion.od_cilindro,
                          graduacion.od_eje,
                          graduacion.od_adicion
                        )}
                      </p>
                    </div>

                    {/* Ojo Izquierdo */}
                    <div className="border rounded-lg p-4 bg-green-50">
                      <h4 className="font-semibold text-green-900 mb-2 flex items-center">
                        <span className="mr-2">üëÅÔ∏è</span>
                        Ojo Izquierdo (OI)
                      </h4>
                      <p className="text-sm text-gray-700">
                        {formatearGraduacion(
                          graduacion.oi_esfera,
                          graduacion.oi_cilindro,
                          graduacion.oi_eje,
                          graduacion.oi_adicion
                        )}
                      </p>
                    </div>
                  </div>

                  {/* Imagen de resultados */}
                  {graduacion.imagen_resultado && (
                    <div className="mb-4">
                      <h5 className="font-medium text-gray-900 mb-2">
                        Imagen de Resultados:
                      </h5>
                      <div className="max-w-md">
                        <img
                          src={`/uploads/${graduacion.imagen_resultado}`}
                          alt="Resultados del examen"
                          className="w-full border rounded-lg shadow-sm"
                        />
                      </div>
                    </div>
                  )}

                  {/* Notas */}
                  {graduacion.notas && (
                    <div>
                      <h5 className="font-medium text-gray-900 mb-1">Notas:</h5>
                      <p className="text-sm text-gray-700 bg-gray-50 p-3 rounded-md">
                        {graduacion.notas}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Bot√≥n de acci√≥n flotante para dispositivos m√≥viles */}
        <div className="fixed bottom-6 right-6 md:hidden">
          <div className="flex flex-col gap-2">
            <button
              onClick={() => {
                setTipoNuevaGraduacion("lejos");
                setMostrarFormulario(true);
              }}
              className="bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-full shadow-lg"
              title="Graduaci√≥n de Lejos"
            >
              üëÅÔ∏è
            </button>

            <button
              onClick={() => {
                setTipoNuevaGraduacion("cerca");
                setMostrarFormulario(true);
              }}
              className="bg-green-500 hover:bg-green-600 text-white p-3 rounded-full shadow-lg"
              title="Graduaci√≥n de Cerca"
            >
              üîç
            </button>
          </div>
        </div>

        {/* Bot√≥n de regreso */}
        <div className="mt-6 text-center">
          <button
            onClick={() => window.history.back()}
            className="btn btn-secondary"
          >
            ‚Üê Regresar al Cliente
          </button>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/app/clientes/[id]/nueva-venta/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useParams } from "next/navigation";
import FormularioVenta from "@/components/formularios/FormularioVenta";

export default function PaginaNuevaVenta() {
  const params = useParams();
  const clienteId = params.id;
  const [cliente, setCliente] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    cargarCliente();
  }, [clienteId]);

  const cargarCliente = async () => {
    try {
      const respuesta = await fetch(`/api/clientes/${clienteId}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setCliente(datos.cliente);
      } else {
        setError("Cliente no encontrado");
      }
    } catch (error) {
      setError("Error cargando cliente");
    } finally {
      setCargando(false);
    }
  };

  if (cargando) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-600">Cargando informaci√≥n del cliente...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <a href="/clientes" className="btn btn-primary">
            Volver a Clientes
          </a>
        </div>
      </div>
    );
  }

  return <FormularioVenta clienteId={clienteId} />;
}



================================================
File: src/app/clientes/nuevo/page.js
================================================
"use client";

import FormularioCliente from "@/components/formularios/FormularioCliente";

export default function PaginaNuevoCliente() {
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <FormularioCliente />
    </div>
  );
}



================================================
File: src/app/fonts/GeistMonoVF.woff
================================================
[Non-text file]


================================================
File: src/app/fonts/GeistVF.woff
================================================
[Non-text file]


================================================
File: src/app/login/page.js
================================================
'use client'

import FormularioLogin from '@/components/auth/FormularioLogin'

export default function PaginaLogin() {
  // Removemos la verificaci√≥n autom√°tica que causa los errores 401
  return <FormularioLogin />
}


================================================
File: src/app/periodos/page.js
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import GestionPeriodos from "@/components/periodos/GestionPeriodos";

export default function PaginaPeriodos() {
  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link href="/ventas" className="text-blue-600 font-medium">
                üõí Ventas
              </Link>
              <Link
                href="/periodos"
                className="text-gray-600 hover:text-gray-900"
              >
                üìÖ Per√≠odos
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="mb-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="min-w-0 flex-1">
              <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl">
                Gesti√≥n de Per√≠odos Contables
              </h2>
              <p className="mt-1 text-sm text-gray-500">
                Control mensual de per√≠odos para reportes al contador
              </p>
            </div>
            <div className="mt-4 flex md:ml-4 md:mt-0">
              <Link href="/reportes" className="btn btn-secondary mr-3">
                üìä Ver Reportes
              </Link>
              <Link href="/" className="btn btn-primary">
                üè† Dashboard
              </Link>
            </div>
          </div>
        </div>

        {/* Informaci√≥n importante */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <h3 className="text-sm font-medium text-blue-800 mb-2">
            ‚ÑπÔ∏è Informaci√≥n sobre Per√≠odos Contables
          </h3>
          <div className="text-blue-700 text-sm space-y-1">
            <p>
              ‚Ä¢ Los per√≠odos van del d√≠a 7 de un mes al d√≠a 6 del siguiente mes
            </p>
            <p>
              ‚Ä¢ Solo se puede cerrar un per√≠odo entre los d√≠as 5 y 10 de cada
              mes
            </p>
            <p>
              ‚Ä¢ Al cerrar un per√≠odo, las ventas con saldo pendiente se migran
              al nuevo per√≠odo
            </p>
            <p>
              ‚Ä¢ En el nuevo per√≠odo: saldo pendiente ‚Üí nuevo costo total,
              dep√≥sitos ‚Üí $0
            </p>
            <p>
              ‚Ä¢ Esta funci√≥n est√° dise√±ada para generar reportes mensuales al
              contador
            </p>
          </div>
        </div>

        {/* Gesti√≥n de per√≠odos */}
        <GestionPeriodos />

        {/* Accesos r√°pidos */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
          <Link
            href="/ventas"
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center"
          >
            <div className="text-3xl mb-2">üõí</div>
            <h3 className="font-semibold text-gray-900">Ver Ventas</h3>
            <p className="text-sm text-gray-600 mt-1">
              Revisar ventas del per√≠odo actual
            </p>
          </Link>

          <Link
            href="/reportes"
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center"
          >
            <div className="text-3xl mb-2">üìä</div>
            <h3 className="font-semibold text-gray-900">Generar Reportes</h3>
            <p className="text-sm text-gray-600 mt-1">
              Exportar datos para el contador
            </p>
          </Link>

          <Link
            href="/clientes"
            className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center"
          >
            <div className="text-3xl mb-2">üë•</div>
            <h3 className="font-semibold text-gray-900">Gestionar Clientes</h3>
            <p className="text-sm text-gray-600 mt-1">
              Ver clientes con saldos pendientes
            </p>
          </Link>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/app/reportes/page.js
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import GeneradorReportes from "@/components/reportes/GeneradorReportes";

export default function PaginaReportes() {
  const [mostrarInfo, setMostrarInfo] = useState(true);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link
                href="/ventas"
                className="text-gray-600 hover:text-gray-900"
              >
                üõí Ventas
              </Link>
              <Link
                href="/periodos"
                className="text-gray-600 hover:text-gray-900"
              >
                üìÖ Per√≠odos
              </Link>
              <Link href="/reportes" className="text-blue-600 font-medium">
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="mb-6">
          <div className="md:flex md:items-center md:justify-between">
            <div className="min-w-0 flex-1">
              <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl">
                üìä Reportes para Contador
              </h2>
              <p className="mt-1 text-sm text-gray-500">
                Genera reportes Excel desglosados para enviar al contador cada
                d√≠a 7 del mes
              </p>
            </div>
            <div className="mt-4 flex md:ml-4 md:mt-0">
              <Link href="/periodos" className="btn btn-secondary mr-3">
                üìÖ Gestionar Per√≠odos
              </Link>
              <Link href="/" className="btn btn-primary">
                üè† Dashboard
              </Link>
            </div>
          </div>
        </div>

        {/* Informaci√≥n importante */}
        {mostrarInfo && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-6 mb-6">
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <h3 className="text-lg font-medium text-blue-800 mb-3">
                  ‚ÑπÔ∏è Informaci√≥n sobre Reportes
                </h3>
                <div className="text-blue-700 text-sm space-y-2">
                  <p>
                    <strong>üìã Reporte General:</strong> Todas las ventas del
                    per√≠odo con informaci√≥n completa
                  </p>
                  <p>
                    <strong>üíµ Reporte Efectivo:</strong> Solo dep√≥sitos pagados
                    en efectivo
                  </p>
                  <p>
                    <strong>üí≥ Reporte Tarjeta:</strong> Solo dep√≥sitos pagados
                    con tarjeta
                  </p>
                  <p>
                    <strong>üè¶ Reporte Transferencia:</strong> Solo dep√≥sitos
                    por transferencia bancaria
                  </p>
                  <p>
                    <strong>üìÅ Reporte Completo:</strong> Un archivo Excel con
                    todas las hojas separadas (recomendado)
                  </p>
                </div>

                <div className="mt-4 p-3 bg-blue-100 rounded-lg">
                  <h4 className="font-medium text-blue-800 mb-2">
                    üóìÔ∏è Flujo de Trabajo Recomendado (cada d√≠a 7):
                  </h4>
                  <div className="text-blue-700 text-sm space-y-1">
                    <p>
                      1. Descargar <strong>-Reporte Completo-</strong> del
                      per√≠odo que termina
                    </p>
                    <p>2. Enviar archivo Excel al contador</p>
                    <p>
                      3. Ir a{" "}
                      <Link href="/periodos" className="underline font-medium">
                        Per√≠odos
                      </Link>{" "}
                      y cerrar el per√≠odo actual
                    </p>
                    <p>
                      4. Las ventas pendientes se migrar√°n autom√°ticamente al
                      nuevo per√≠odo
                    </p>
                  </div>
                </div>
              </div>

              <button
                onClick={() => setMostrarInfo(false)}
                className="ml-4 text-blue-400 hover:text-blue-600"
                title="Cerrar informaci√≥n"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}

        {/* Generador de Reportes */}
        <GeneradorReportes />

        {/* Accesos r√°pidos */}
        <div className="mt-8">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            üîó Accesos R√°pidos
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Link
              href="/ventas"
              className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center group"
            >
              <div className="text-3xl mb-2 group-hover:scale-110 transition-transform">
                üõí
              </div>
              <h4 className="font-semibold text-gray-900">
                Ver Ventas Actuales
              </h4>
              <p className="text-sm text-gray-600 mt-1">
                Revisar ventas del per√≠odo activo
              </p>
            </Link>

            <Link
              href="/periodos"
              className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center group"
            >
              <div className="text-3xl mb-2 group-hover:scale-110 transition-transform">
                üìÖ
              </div>
              <h4 className="font-semibold text-gray-900">
                Gestionar Per√≠odos
              </h4>
              <p className="text-sm text-gray-600 mt-1">
                Cerrar per√≠odo y crear nuevo
              </p>
            </Link>

            <Link
              href="/clientes"
              className="bg-white p-6 rounded-lg shadow hover:shadow-md transition-shadow text-center group"
            >
              <div className="text-3xl mb-2 group-hover:scale-110 transition-transform">
                üë•
              </div>
              <h4 className="font-semibold text-gray-900">Ver Clientes</h4>
              <p className="text-sm text-gray-600 mt-1">
                Clientes con saldos pendientes
              </p>
            </Link>
          </div>
        </div>

        {/* Tips adicionales */}
        <div className="mt-8 bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <h3 className="text-lg font-medium text-yellow-800 mb-3">
            üí° Tips para el Contador
          </h3>
          <div className="text-yellow-700 text-sm space-y-2">
            <p>
              ‚Ä¢ El <strong>Reporte Completo</strong> incluye m√∫ltiples hojas en
              un solo archivo Excel
            </p>
            <p>
              ‚Ä¢ Los reportes separados por m√©todo de pago facilitan la
              conciliaci√≥n bancaria
            </p>
            <p>
              ‚Ä¢ Cada reporte incluye fechas exactas y n√∫meros de venta para
              trazabilidad
            </p>
            <p>
              ‚Ä¢ Los saldos pendientes del per√≠odo anterior aparecer√°n como
              nuevas ventas en el siguiente per√≠odo
            </p>
            <p>‚Ä¢ Todos los montos est√°n en pesos mexicanos (MXN)</p>
          </div>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/app/ventas/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";

export default function PaginaVentas() {
  const [ventas, setVentas] = useState([]);
  const [estadisticas, setEstadisticas] = useState({});
  const [cargando, setCargando] = useState(true);
  const [busqueda, setBusqueda] = useState("");
  const [filtroEstado, setFiltroEstado] = useState("");
  const [error, setError] = useState("");

  // Estados disponibles
  const estadosVenta = [
    {
      valor: "",
      label: "Todos los estados",
      color: "bg-gray-100 text-gray-800",
    },
    {
      valor: "pendiente",
      label: "Pendiente",
      color: "bg-yellow-100 text-yellow-800",
    },
    {
      valor: "en_laboratorio",
      label: "En Laboratorio",
      color: "bg-blue-100 text-blue-800",
    },
    { valor: "listo", label: "Listo", color: "bg-green-100 text-green-800" },
    {
      valor: "entregado",
      label: "Entregado",
      color: "bg-gray-100 text-gray-800",
    },
    {
      valor: "cancelado",
      label: "Cancelado",
      color: "bg-red-100 text-red-800",
    },
  ];

  useEffect(() => {
    cargarVentas();
  }, []);

  const cargarVentas = async (terminoBusqueda = "", estado = "") => {
    try {
      setCargando(true);

      let url = "/api/ventas?limite=100";
      if (terminoBusqueda)
        url += `&busqueda=${encodeURIComponent(terminoBusqueda)}`;
      if (estado) url += `&estado=${encodeURIComponent(estado)}`;

      const respuesta = await fetch(url, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setVentas(datos.ventas);
        setEstadisticas(datos.estadisticas);
        setError("");
      } else {
        setError("Error cargando ventas");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setCargando(false);
    }
  };

  const manejarBusqueda = (evento) => {
    evento.preventDefault();
    cargarVentas(busqueda, filtroEstado);
  };

  const manejarFiltroEstado = (estado) => {
    setFiltroEstado(estado);
    cargarVentas(busqueda, estado);
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX");
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad || cantidad === "0") return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const obtenerEstadoInfo = (estado) => {
    return (
      estadosVenta.find((e) => e.valor === estado) ||
      estadosVenta.find((e) => e.valor === "pendiente")
    );
  };

  const cambiarEstadoRapido = async (ventaId, nuevoEstado) => {
    try {
      const respuesta = await fetch(`/api/ventas/${ventaId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({ estado: nuevoEstado }),
      });

      if (respuesta.ok) {
        // Recargar ventas para reflejar el cambio
        cargarVentas(busqueda, filtroEstado);
      } else {
        alert("Error actualizando estado");
      }
    } catch (error) {
      alert("Error de conexi√≥n");
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link href="/ventas" className="text-blue-600 font-medium">
                üõí Ventas
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="md:flex md:items-center md:justify-between mb-6">
          <div className="min-w-0 flex-1">
            <h2 className="text-2xl font-bold leading-7 text-gray-900 sm:truncate sm:text-3xl">
              Gesti√≥n de Ventas
            </h2>
            <p className="mt-1 text-sm text-gray-500">
              Control de √≥rdenes, estados y pagos
            </p>
          </div>
          <div className="mt-4 flex md:ml-4 md:mt-0">
            <Link href="/clientes" className="btn btn-primary">
              <span className="mr-2">üõí</span>
              Nueva Venta
            </Link>
          </div>
        </div>

        {/* Estad√≠sticas */}
        {estadisticas && (
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-blue-600">
                {estadisticas.total_ventas || 0}
              </div>
              <div className="text-xs text-gray-600">Total Ventas</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-yellow-600">
                {estadisticas.pendientes || 0}
              </div>
              <div className="text-xs text-gray-600">Pendientes</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-blue-600">
                {estadisticas.en_laboratorio || 0}
              </div>
              <div className="text-xs text-gray-600">En Lab.</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-green-600">
                {estadisticas.listos || 0}
              </div>
              <div className="text-xs text-gray-600">Listos</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-gray-600">
                {estadisticas.entregados || 0}
              </div>
              <div className="text-xs text-gray-600">Entregados</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-green-600">
                {formatearDinero(estadisticas.total_ingresos)}
              </div>
              <div className="text-xs text-gray-600">Ingresos</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-blue-600">
                {formatearDinero(estadisticas.total_depositado)}
              </div>
              <div className="text-xs text-gray-600">Depositado</div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="text-lg font-bold text-red-600">
                {formatearDinero(estadisticas.total_pendiente_cobro)}
              </div>
              <div className="text-xs text-gray-600">Por Cobrar</div>
            </div>
          </div>
        )}

        {/* Filtros y B√∫squeda */}
        <div className="bg-white shadow rounded-lg mb-6">
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* B√∫squeda */}
              <div className="md:col-span-2">
                <form onSubmit={manejarBusqueda} className="flex gap-2">
                  <input
                    type="text"
                    placeholder="Buscar por n√∫mero de venta o cliente..."
                    value={busqueda}
                    onChange={(e) => setBusqueda(e.target.value)}
                    className="form-input flex-1"
                  />
                  <button
                    type="submit"
                    className="btn btn-primary"
                    disabled={cargando}
                  >
                    {cargando ? "Buscando..." : "Buscar"}
                  </button>
                </form>
              </div>

              {/* Filtro por Estado */}
              <div>
                <select
                  value={filtroEstado}
                  onChange={(e) => manejarFiltroEstado(e.target.value)}
                  className="form-input"
                >
                  {estadosVenta.map((estado) => (
                    <option key={estado.valor} value={estado.valor}>
                      {estado.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Limpiar filtros */}
            {(busqueda || filtroEstado) && (
              <div className="mt-4">
                <button
                  onClick={() => {
                    setBusqueda("");
                    setFiltroEstado("");
                    cargarVentas();
                  }}
                  className="text-sm text-blue-600 hover:text-blue-800"
                >
                  Limpiar filtros
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Mensaje de error */}
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md mb-6">
            {error}
          </div>
        )}

        {/* Lista de ventas */}
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          {cargando ? (
            <div className="p-6 text-center">
              <div className="spinner mx-auto mb-4"></div>
              <p className="text-gray-500">Cargando ventas...</p>
            </div>
          ) : ventas.length === 0 ? (
            <div className="p-6 text-center">
              <div className="text-4xl mb-4">üõí</div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                No hay ventas registradas
              </h3>
              <p className="text-gray-500 mb-4">
                {busqueda || filtroEstado
                  ? "No se encontraron resultados"
                  : "Comienza registrando tu primera venta"}
              </p>
              <Link href="/clientes" className="btn btn-primary">
                Registrar Primera Venta
              </Link>
            </div>
          ) : (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Venta
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Cliente
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Producto
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Financiero
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estado
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {ventas.map((venta) => {
                    const estadoInfo = obtenerEstadoInfo(venta.estado);
                    return (
                      <tr key={venta.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {venta.numero_venta}
                            </div>
                            <div className="text-sm text-gray-500">
                              {formatearFecha(venta.fecha_venta)}
                            </div>
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm font-medium text-gray-900">
                              {venta.cliente_nombre}
                            </div>
                            <div className="text-sm text-gray-500">
                              {venta.cliente_expediente &&
                                `Exp: ${venta.cliente_expediente}`}
                            </div>
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div className="text-sm text-gray-900">
                              {venta.marca_armazon || "Sin marca"}
                            </div>
                            <div className="text-sm text-gray-500">
                              {venta.laboratorio || "Sin laboratorio"}
                            </div>
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm">
                            <div className="text-green-600 font-medium">
                              Total: {formatearDinero(venta.costo_total)}
                            </div>
                            <div className="text-blue-600">
                              Pagado: {formatearDinero(venta.total_depositado)}
                            </div>
                            <div className="text-red-600">
                              Resta: {formatearDinero(venta.saldo_restante)}
                            </div>
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded-full ${estadoInfo.color}`}
                          >
                            {estadoInfo.label}
                          </span>

                          {/* Cambio r√°pido de estado */}
                          <div className="mt-1">
                            <select
                              value={venta.estado}
                              onChange={(e) =>
                                cambiarEstadoRapido(venta.id, e.target.value)
                              }
                              className="text-xs border-gray-300 rounded"
                            >
                              {estadosVenta.slice(1).map((estado) => (
                                <option key={estado.valor} value={estado.valor}>
                                  {estado.label}
                                </option>
                              ))}
                            </select>
                          </div>
                        </td>

                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium space-y-1">
                          <div className="flex flex-col gap-1">
                            <Link
                              href={`/ventas/${venta.id}`}
                              className="text-blue-600 hover:text-blue-900 text-xs font-medium"
                            >
                              üí∞ Ver Detalle
                            </Link>
                            <Link
                              href={`/clientes/${venta.cliente_id}`}
                              className="text-green-600 hover:text-green-900 text-xs"
                            >
                              üë§ Ver Cliente
                            </Link>
                            {parseFloat(venta.saldo_restante) > 0 && (
                              <Link
                                href={`/ventas/${venta.id}`}
                                className="text-yellow-600 hover:text-yellow-900 text-xs"
                                title="Agregar dep√≥sito"
                              >
                                üíµ Abonar
                              </Link>
                            )}
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
          )}
        </div>

        {/* Resumen */}
        {ventas.length > 0 && (
          <div className="mt-6 text-center text-sm text-gray-500">
            Mostrando {ventas.length} ventas
            {(busqueda || filtroEstado) && " (filtradas)"}
          </div>
        )}
      </div>
    </div>
  );
}



================================================
File: src/app/ventas/[id]/page.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useParams, useRouter } from "next/navigation";
import Link from "next/link";
import HistorialDepositos from "@/components/tablas/HistorialDepositos";

export default function PaginaDetalleVenta() {
  const params = useParams();
  const router = useRouter();
  const ventaId = params.id;

  const [datosVenta, setDatosVenta] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");
  const [actualizandoEstado, setActualizandoEstado] = useState(false);

  // Estados posibles de la venta
  const estadosVenta = [
    {
      valor: "pendiente",
      label: "Pendiente",
      color: "bg-yellow-100 text-yellow-800",
    },
    {
      valor: "en_laboratorio",
      label: "En Laboratorio",
      color: "bg-blue-100 text-blue-800",
    },
    { valor: "listo", label: "Listo", color: "bg-green-100 text-green-800" },
    {
      valor: "entregado",
      label: "Entregado",
      color: "bg-gray-100 text-gray-800",
    },
    {
      valor: "cancelado",
      label: "Cancelado",
      color: "bg-red-100 text-red-800",
    },
  ];

  useEffect(() => {
    cargarDatosVenta();
  }, [ventaId]);

  const cargarDatosVenta = async () => {
    setCargando(true);
    try {
      const respuesta = await fetch(`/api/ventas/${ventaId}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setDatosVenta(datos);
      } else {
        setError("Venta no encontrada");
      }
    } catch (error) {
      setError("Error cargando datos de la venta");
    } finally {
      setCargando(false);
    }
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad || cantidad === "0") return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const obtenerEstadoInfo = (estado) => {
    return estadosVenta.find((e) => e.valor === estado) || estadosVenta[0];
  };

  const cambiarEstado = async (nuevoEstado) => {
    setActualizandoEstado(true);
    try {
      const respuesta = await fetch(`/api/ventas/${ventaId}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({ estado: nuevoEstado }),
      });

      if (respuesta.ok) {
        await cargarDatosVenta();
      } else {
        alert("Error actualizando estado");
      }
    } catch (error) {
      alert("Error de conexi√≥n");
    } finally {
      setActualizandoEstado(false);
    }
  };

  const manejarDepositoAgregado = () => {
    // Recargar datos de la venta para actualizar saldos
    cargarDatosVenta();
  };

  if (cargando) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-600">Cargando informaci√≥n de la venta...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-red-500 text-6xl mb-4">‚ö†Ô∏è</div>
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Error</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={() => router.push("/ventas")}
            className="btn btn-primary"
          >
            Volver a Ventas
          </button>
        </div>
      </div>
    );
  }

  const { venta, graduaciones, depositos, estadisticas, otras_ventas } =
    datosVenta;
  const estadoInfo = obtenerEstadoInfo(venta.estado);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link href="/ventas" className="text-blue-600 font-medium">
                üõí Ventas
              </Link>
              <Link
                href="/periodos"
                className="text-gray-600 hover:text-gray-900"
              >
                üìÖ Per√≠odos
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {/* Encabezado */}
        <div className="bg-white rounded-lg shadow mb-6">
          <div className="p-6">
            <div className="flex justify-between items-start mb-4">
              <div>
                <h1 className="text-2xl font-bold text-gray-900 mb-2">
                  Venta {venta.numero_venta}
                </h1>
                <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                  <span>üìÖ {formatearFecha(venta.fecha_venta)}</span>
                  {venta.marca_armazon && <span>üëì {venta.marca_armazon}</span>}
                  {venta.laboratorio && <span>üî¨ {venta.laboratorio}</span>}
                </div>
              </div>

              <div className="flex items-center gap-3">
                <span
                  className={`px-3 py-1 text-sm font-medium rounded-full ${estadoInfo.color}`}
                >
                  {estadoInfo.label}
                </span>

                <select
                  value={venta.estado}
                  onChange={(e) => cambiarEstado(e.target.value)}
                  disabled={actualizandoEstado}
                  className="text-sm border-gray-300 rounded-md"
                >
                  {estadosVenta.map((estado) => (
                    <option key={estado.valor} value={estado.valor}>
                      {estado.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Informaci√≥n financiera r√°pida */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <div className="text-xl font-bold text-green-600">
                  {formatearDinero(venta.costo_total)}
                </div>
                <div className="text-xs text-green-800">Costo Total</div>
              </div>
              <div className="text-center p-3 bg-blue-50 rounded-lg">
                <div className="text-xl font-bold text-blue-600">
                  {formatearDinero(venta.total_depositado)}
                </div>
                <div className="text-xs text-blue-800">Total Pagado</div>
              </div>
              <div className="text-center p-3 bg-red-50 rounded-lg">
                <div className="text-xl font-bold text-red-600">
                  {formatearDinero(venta.saldo_restante)}
                </div>
                <div className="text-xs text-red-800">Saldo Restante</div>
              </div>
              <div className="text-center p-3 bg-purple-50 rounded-lg">
                <div className="text-xl font-bold text-purple-600">
                  {estadisticas.porcentaje_pagado.toFixed(1)}%
                </div>
                <div className="text-xs text-purple-800">Completado</div>
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Informaci√≥n del Cliente */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n del Cliente
              </h3>

              <div className="space-y-3 text-sm">
                <div>
                  <span className="font-medium text-gray-700">Cliente:</span>
                  <Link
                    href={`/clientes/${venta.cliente_id}`}
                    className="block text-blue-600 hover:text-blue-800 font-medium mt-1"
                  >
                    {venta.cliente_nombre}
                  </Link>
                </div>

                {venta.cliente_expediente && (
                  <div>
                    <span className="font-medium text-gray-700">
                      Expediente:
                    </span>
                    <p className="mt-1">{venta.cliente_expediente}</p>
                  </div>
                )}

                {venta.cliente_email && (
                  <div>
                    <span className="font-medium text-gray-700">Email:</span>
                    <p className="mt-1">{venta.cliente_email}</p>
                  </div>
                )}

                {venta.cliente_celular && (
                  <div>
                    <span className="font-medium text-gray-700">Celular:</span>
                    <p className="mt-1">{venta.cliente_celular}</p>
                  </div>
                )}
              </div>
            </div>

            {/* Informaci√≥n del Producto */}
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n del Producto
              </h3>

              <div className="space-y-3 text-sm">
                {venta.marca_armazon && (
                  <div>
                    <span className="font-medium text-gray-700">Marca:</span>
                    <p className="mt-1">{venta.marca_armazon}</p>
                  </div>
                )}

                {venta.laboratorio && (
                  <div>
                    <span className="font-medium text-gray-700">
                      Laboratorio:
                    </span>
                    <p className="mt-1">{venta.laboratorio}</p>
                  </div>
                )}

                <div className="border-t pt-3">
                  <div className="space-y-2">
                    {venta.precio_armazon && (
                      <div className="flex justify-between">
                        <span>Armaz√≥n:</span>
                        <span className="font-medium">
                          {formatearDinero(venta.precio_armazon)}
                        </span>
                      </div>
                    )}
                    {venta.precio_micas && (
                      <div className="flex justify-between">
                        <span>Micas:</span>
                        <span className="font-medium">
                          {formatearDinero(venta.precio_micas)}
                        </span>
                      </div>
                    )}
                    <div className="flex justify-between font-semibold border-t pt-2">
                      <span>Total:</span>
                      <span>{formatearDinero(venta.costo_total)}</span>
                    </div>
                  </div>
                </div>

                {/* Fechas importantes */}
                <div className="border-t pt-3">
                  <div className="space-y-2">
                    <div>
                      <span className="font-medium text-gray-700">
                        Fecha de venta:
                      </span>
                      <p className="text-xs text-gray-600">
                        {formatearFecha(venta.fecha_venta)}
                      </p>
                    </div>

                    {venta.fecha_llegada_laboratorio && (
                      <div>
                        <span className="font-medium text-gray-700">
                          Llegada del laboratorio:
                        </span>
                        <p className="text-xs text-gray-600">
                          {formatearFecha(venta.fecha_llegada_laboratorio)}
                        </p>
                      </div>
                    )}

                    {venta.fecha_entrega_cliente && (
                      <div>
                        <span className="font-medium text-gray-700">
                          Entrega al cliente:
                        </span>
                        <p className="text-xs text-gray-600">
                          {formatearFecha(venta.fecha_entrega_cliente)}
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {venta.notas && (
                  <div className="border-t pt-3">
                    <span className="font-medium text-gray-700">Notas:</span>
                    <p className="mt-1 text-gray-600">{venta.notas}</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Historial de Dep√≥sitos */}
          <div className="lg:col-span-2">
            <HistorialDepositos
              ventaId={ventaId}
              mostrarFormulario={true}
              onDepositoAgregado={manejarDepositoAgregado}
            />

            {/* Graduaciones del Cliente */}
            {graduaciones && graduaciones.length > 0 && (
              <div className="bg-white rounded-lg shadow mt-6">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Graduaciones del Cliente
                  </h3>
                </div>
                <div className="p-6">
                  <div className="space-y-4">
                    {graduaciones.map((graduacion) => (
                      <div
                        key={graduacion.id}
                        className="border rounded-lg p-4"
                      >
                        <div className="flex justify-between items-start mb-2">
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded ${
                              graduacion.tipo === "lejos"
                                ? "bg-blue-100 text-blue-800"
                                : "bg-green-100 text-green-800"
                            }`}
                          >
                            {graduacion.tipo === "lejos" ? "Lejos" : "Cerca"}
                          </span>
                          <span className="text-xs text-gray-500">
                            {formatearFecha(graduacion.fecha_examen)}
                          </span>
                        </div>

                        <div className="grid grid-cols-2 gap-4 text-xs">
                          <div>
                            <span className="font-medium">OD:</span>
                            <span className="ml-1 font-mono">
                              {graduacion.od_esfera
                                ? `${graduacion.od_esfera >= 0 ? "+" : ""}${
                                    graduacion.od_esfera
                                  }`
                                : "--"}
                              {graduacion.od_cilindro
                                ? ` ${graduacion.od_cilindro >= 0 ? "+" : ""}${
                                    graduacion.od_cilindro
                                  }`
                                : ""}
                              {graduacion.od_eje
                                ? ` ${graduacion.od_eje}¬∞`
                                : ""}
                            </span>
                          </div>
                          <div>
                            <span className="font-medium">OI:</span>
                            <span className="ml-1 font-mono">
                              {graduacion.oi_esfera
                                ? `${graduacion.oi_esfera >= 0 ? "+" : ""}${
                                    graduacion.oi_esfera
                                  }`
                                : "--"}
                              {graduacion.oi_cilindro
                                ? ` ${graduacion.oi_cilindro >= 0 ? "+" : ""}${
                                    graduacion.oi_cilindro
                                  }`
                                : ""}
                              {graduacion.oi_eje
                                ? ` ${graduacion.oi_eje}¬∞`
                                : ""}
                            </span>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Otras ventas del cliente */}
            {otras_ventas && otras_ventas.length > 0 && (
              <div className="bg-white rounded-lg shadow mt-6">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">
                    Otras Ventas del Cliente
                  </h3>
                </div>
                <div className="p-6">
                  <div className="space-y-3">
                    {otras_ventas.map((venta_item) => (
                      <div
                        key={venta_item.id}
                        className="border rounded-lg p-3 hover:bg-gray-50"
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <Link
                              href={`/ventas/${venta_item.id}`}
                              className="font-medium text-blue-600 hover:text-blue-800"
                            >
                              {venta_item.numero_venta}
                            </Link>
                            <p className="text-sm text-gray-600">
                              {formatearDinero(venta_item.costo_total)} ‚Ä¢{" "}
                              {venta_item.fecha_venta_formato}
                            </p>
                          </div>
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded-full ${
                              obtenerEstadoInfo(venta_item.estado).color
                            }`}
                          >
                            {obtenerEstadoInfo(venta_item.estado).label}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Botones de acci√≥n */}
        <div className="mt-6 flex justify-between">
          <Link href="/ventas" className="btn btn-secondary">
            ‚Üê Volver a Ventas
          </Link>

          <div className="flex gap-2">
            <Link
              href={`/clientes/${venta.cliente_id}`}
              className="btn btn-secondary"
            >
              Ver Cliente
            </Link>

            <Link
              href={`/clientes/${venta.cliente_id}/nueva-venta`}
              className="btn btn-primary"
            >
              Nueva Venta para este Cliente
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}




================================================
File: src/components/auth/FormularioLogin.js
================================================
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function FormularioLogin() {
  const [datosLogin, setDatosLogin] = useState({
    nombreUsuario: "",
    password: "",
  });
  const [errores, setErrores] = useState({});
  const [error, setError] = useState("");
  const [cargando, setCargando] = useState(false);

  const router = useRouter();

  const manejarCambio = (evento) => {
    const { name, value } = evento.target;
    setDatosLogin((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Limpiar error del campo
    if (errores[name]) {
      setErrores((prev) => ({
        ...prev,
        [name]: "",
      }));
    }

    // Limpiar error general
    if (error) {
      setError("");
    }
  };

  const validarFormulario = () => {
    const nuevosErrores = {};

    if (!datosLogin.nombreUsuario.trim()) {
      nuevosErrores.nombreUsuario = "Nombre de usuario es requerido";
    } else if (datosLogin.nombreUsuario.length < 3) {
      nuevosErrores.nombreUsuario = "Debe tener al menos 3 caracteres";
    }

    if (!datosLogin.password) {
      nuevosErrores.password = "Contrase√±a es requerida";
    } else if (datosLogin.password.length < 6) {
      nuevosErrores.password = "Debe tener al menos 6 caracteres";
    }

    setErrores(nuevosErrores);
    return Object.keys(nuevosErrores).length === 0;
  };

  const manejarSubmit = async (evento) => {
    evento.preventDefault();
    setError("");

    if (!validarFormulario()) {
      return;
    }

    setCargando(true);

    try {
      const respuesta = await fetch("/api/auth/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          nombreUsuario: datosLogin.nombreUsuario,
          password: datosLogin.password,
        }),
      });

      const datos = await respuesta.json();

      if (respuesta.ok) {
        console.log("Login exitoso:", datos.mensaje);
        // Agregar delay para asegurar que la cookie se establezca
        setTimeout(() => {
          window.location.href = "/";
        }, 500); // 500ms de delay
      } else {
        // Error en login
        setError(datos.error || "Error en el login");

        // Si es error de credenciales, limpiar contrase√±a
        if (respuesta.status === 401) {
          setDatosLogin((prev) => ({ ...prev, password: "" }));
        }
      }
    } catch (error) {
      console.error("Error de conexi√≥n:", error);
      setError(
        "Error de conexi√≥n. Verifique su internet e intente nuevamente."
      );
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-optica-50 to-optica-100">
      <div className="max-w-md w-full space-y-8 p-8">
        <div className="bg-white rounded-lg shadow-lg p-8">
          {/* Encabezado */}
          <div className="text-center mb-8">
            <div className="mx-auto h-12 w-12 bg-optica-500 rounded-full flex items-center justify-center">
              <span className="text-white text-2xl">üëì</span>
            </div>
            <h2 className="mt-4 text-3xl font-bold text-neutral-900">
              Sistema √ìptica
            </h2>
            <p className="mt-2 text-sm text-neutral-600">
              Ingrese sus credenciales para acceder
            </p>
          </div>

          {/* Mensaje de error general */}
          {error && (
            <div className="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm">
              <div className="flex items-center">
                <span className="mr-2">‚ö†Ô∏è</span>
                {error}
              </div>
            </div>
          )}

          {/* Formulario */}
          <form onSubmit={manejarSubmit} className="space-y-6">
            {/* Campo Usuario */}
            <div>
              <label
                htmlFor="nombreUsuario"
                className="block text-sm font-medium text-neutral-700 mb-1"
              >
                Nombre de Usuario
              </label>
              <input
                id="nombreUsuario"
                name="nombreUsuario"
                type="text"
                autoComplete="username"
                required
                className={`form-input ${
                  errores.nombreUsuario
                    ? "border-red-300 focus:border-red-500 focus:ring-red-500"
                    : ""
                }`}
                placeholder="Ingrese su usuario"
                value={datosLogin.nombreUsuario}
                onChange={manejarCambio}
                disabled={cargando}
              />
              {errores.nombreUsuario && (
                <p className="mt-1 text-sm text-red-600">
                  {errores.nombreUsuario}
                </p>
              )}
            </div>

            {/* Campo Contrase√±a */}
            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-neutral-700 mb-1"
              >
                Contrase√±a
              </label>
              <input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                className={`form-input ${
                  errores.password
                    ? "border-red-300 focus:border-red-500 focus:ring-red-500"
                    : ""
                }`}
                placeholder="Ingrese su contrase√±a"
                value={datosLogin.password}
                onChange={manejarCambio}
                disabled={cargando}
              />
              {errores.password && (
                <p className="mt-1 text-sm text-red-600">{errores.password}</p>
              )}
            </div>

            {/* Bot√≥n Submit */}
            <div>
              <button
                type="submit"
                disabled={cargando}
                className={`w-full btn btn-primary btn-lg ${
                  cargando ? "opacity-50 cursor-not-allowed" : ""
                }`}
              >
                {cargando ? (
                  <div className="flex items-center justify-center">
                    <div className="spinner mr-2"></div>
                    Iniciando sesi√≥n...
                  </div>
                ) : (
                  "Iniciar Sesi√≥n"
                )}
              </button>
            </div>
          </form>

          {/* Informaci√≥n adicional */}
          <div className="mt-6 text-center">
            <p className="text-xs text-neutral-500">
              Sistema de gesti√≥n interno - Solo personal autorizado
            </p>
          </div>
        </div>

        {/* Informaci√≥n de prueba (solo en desarrollo) */}
        {process.env.NODE_ENV === "development" && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
            <h4 className="text-sm font-medium text-yellow-800 mb-2">
              üîß Modo Desarrollo
            </h4>
            <p className="text-xs text-yellow-700">
              Usuario: <code className="bg-yellow-100 px-1 rounded">admin</code>
              <br />
              Contrase√±a:{" "}
              <code className="bg-yellow-100 px-1 rounded">admin123</code>
            </p>
          </div>
        )}
      </div>
    </div>
  );
}



================================================
File: src/components/auth/RutaProtegida.js
================================================



================================================
File: src/components/formularios/FormularioCliente.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";

export default function FormularioCliente({ clienteId = null }) {
  const router = useRouter();
  const [cargando, setCargando] = useState(false);
  const [errores, setErrores] = useState({});
  const [mensaje, setMensaje] = useState("");

  // Estado del formulario
  const [datosCliente, setDatosCliente] = useState({
    // Datos personales b√°sicos
    nombre_completo: "",
    fecha_nacimiento: "",
    edad: "",
    ocupacion: "",
    direccion: "",
    email: "",
    telefono: "",
    celular: "",
    motivo_consulta: "",

    // Datos m√©dicos b√°sicos
    peso: "",
    talla: "",
    imc: "",
    fr: "", // Frecuencia respiratoria
    temperatura: "",
    saturacion_oxigeno: "",
    ritmo_cardiaco: "",
    presion_arterial: "",

    // Antecedentes m√©dicos
    presion_alta: false,
    diabetes: false,
    alergias: "",
    notas_extras: "",
  });

  // Calcular IMC autom√°ticamente
  useEffect(() => {
    if (datosCliente.peso && datosCliente.talla) {
      const peso = parseFloat(datosCliente.peso);
      const talla = parseFloat(datosCliente.talla);
      if (peso > 0 && talla > 0) {
        const imc = peso / (talla * talla);
        setDatosCliente((prev) => ({
          ...prev,
          imc: imc.toFixed(2),
        }));
      }
    }
  }, [datosCliente.peso, datosCliente.talla]);

  // Calcular edad autom√°ticamente
  useEffect(() => {
    if (datosCliente.fecha_nacimiento) {
      const nacimiento = new Date(datosCliente.fecha_nacimiento);
      const hoy = new Date();
      let edad = hoy.getFullYear() - nacimiento.getFullYear();
      const mes = hoy.getMonth() - nacimiento.getMonth();

      if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
        edad--;
      }

      if (edad >= 0 && edad <= 120) {
        setDatosCliente((prev) => ({
          ...prev,
          edad: edad.toString(),
        }));
      }
    }
  }, [datosCliente.fecha_nacimiento]);

  const manejarCambio = (evento) => {
    const { name, value, type, checked } = evento.target;

    setDatosCliente((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));

    // Limpiar errores del campo
    if (errores[name]) {
      setErrores((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validarFormulario = () => {
    const nuevosErrores = {};

    // Validar campos requeridos
    if (!datosCliente.nombre_completo.trim()) {
      nuevosErrores.nombre_completo = "Nombre completo es requerido";
    }

    // Validar email si se proporciona
    if (
      datosCliente.email &&
      !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(datosCliente.email)
    ) {
      nuevosErrores.email = "Formato de email inv√°lido";
    }

    // Validar tel√©fonos si se proporcionan
    if (
      datosCliente.telefono &&
      !/^\d{10}$/.test(datosCliente.telefono.replace(/\D/g, ""))
    ) {
      nuevosErrores.telefono = "Tel√©fono debe tener 10 d√≠gitos";
    }

    if (
      datosCliente.celular &&
      !/^\d{10}$/.test(datosCliente.celular.replace(/\D/g, ""))
    ) {
      nuevosErrores.celular = "Celular debe tener 10 d√≠gitos";
    }

    // Validar rangos num√©ricos
    if (
      datosCliente.edad &&
      (parseInt(datosCliente.edad) < 1 || parseInt(datosCliente.edad) > 120)
    ) {
      nuevosErrores.edad = "Edad debe estar entre 1 y 120 a√±os";
    }

    if (
      datosCliente.peso &&
      (parseFloat(datosCliente.peso) < 1 || parseFloat(datosCliente.peso) > 500)
    ) {
      nuevosErrores.peso = "Peso debe estar entre 1 y 500 kg";
    }

    if (
      datosCliente.talla &&
      (parseFloat(datosCliente.talla) < 0.5 ||
        parseFloat(datosCliente.talla) > 3)
    ) {
      nuevosErrores.talla = "Talla debe estar entre 0.5 y 3 metros";
    }

    setErrores(nuevosErrores);
    return Object.keys(nuevosErrores).length === 0;
  };

  const manejarSubmit = async (evento) => {
    evento.preventDefault();
    setMensaje("");

    if (!validarFormulario()) {
      return;
    }

    setCargando(true);

    try {
      const url = clienteId ? `/api/clientes/${clienteId}` : "/api/clientes";
      const metodo = clienteId ? "PUT" : "POST";

      const respuesta = await fetch(url, {
        method: metodo,
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(datosCliente),
      });

      const datos = await respuesta.json();

      if (respuesta.ok) {
        setMensaje(
          clienteId
            ? "Cliente actualizado exitosamente"
            : "Cliente registrado exitosamente"
        );

        if (!clienteId) {
          // Limpiar formulario despu√©s de crear
          setDatosCliente({
            nombre_completo: "",
            fecha_nacimiento: "",
            edad: "",
            ocupacion: "",
            direccion: "",
            email: "",
            telefono: "",
            celular: "",
            motivo_consulta: "",
            peso: "",
            talla: "",
            imc: "",
            fr: "",
            temperatura: "",
            saturacion_oxigeno: "",
            ritmo_cardiaco: "",
            presion_arterial: "",
            presion_alta: false,
            diabetes: false,
            alergias: "",
            notas_extras: "",
          });
        }

        // Redirigir despu√©s de 2 segundos
        setTimeout(() => {
          router.push("/clientes");
        }, 2000);
      } else {
        setMensaje(`Error: ${datos.error}`);
      }
    } catch (error) {
      setMensaje("Error de conexi√≥n. Intente nuevamente.");
    } finally {
      setCargando(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-lg">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-2xl font-bold text-gray-900">
            {clienteId ? "Editar Cliente" : "Registro de Nuevo Cliente"}
          </h2>
          <p className="text-gray-600 mt-1">
            Complete la informaci√≥n del expediente m√©dico
          </p>
        </div>

        {mensaje && (
          <div
            className={`mx-6 mt-4 p-4 rounded-md ${
              mensaje.includes("Error")
                ? "bg-red-50 text-red-700 border border-red-200"
                : "bg-green-50 text-green-700 border border-green-200"
            }`}
          >
            {mensaje}
          </div>
        )}

        <form onSubmit={manejarSubmit} className="p-6 space-y-6">
          {/* Datos Personales */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Datos Personales
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nombre Completo *
                </label>
                <input
                  type="text"
                  name="nombre_completo"
                  value={datosCliente.nombre_completo}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.nombre_completo ? "border-red-300" : ""
                  }`}
                  placeholder="Nombre completo del cliente"
                  required
                />
                {errores.nombre_completo && (
                  <p className="text-red-600 text-sm mt-1">
                    {errores.nombre_completo}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Nacimiento
                </label>
                <input
                  type="date"
                  name="fecha_nacimiento"
                  value={datosCliente.fecha_nacimiento}
                  onChange={manejarCambio}
                  className="form-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Edad
                </label>
                <input
                  type="number"
                  name="edad"
                  value={datosCliente.edad}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.edad ? "border-red-300" : ""
                  }`}
                  placeholder="A√±os"
                  min="1"
                  max="120"
                />
                {errores.edad && (
                  <p className="text-red-600 text-sm mt-1">{errores.edad}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ocupaci√≥n
                </label>
                <input
                  type="text"
                  name="ocupacion"
                  value={datosCliente.ocupacion}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="Profesi√≥n u ocupaci√≥n"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  name="email"
                  value={datosCliente.email}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.email ? "border-red-300" : ""
                  }`}
                  placeholder="correo@ejemplo.com"
                />
                {errores.email && (
                  <p className="text-red-600 text-sm mt-1">{errores.email}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Tel√©fono
                </label>
                <input
                  type="tel"
                  name="telefono"
                  value={datosCliente.telefono}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.telefono ? "border-red-300" : ""
                  }`}
                  placeholder="1234567890"
                />
                {errores.telefono && (
                  <p className="text-red-600 text-sm mt-1">
                    {errores.telefono}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Celular
                </label>
                <input
                  type="tel"
                  name="celular"
                  value={datosCliente.celular}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.celular ? "border-red-300" : ""
                  }`}
                  placeholder="1234567890"
                />
                {errores.celular && (
                  <p className="text-red-600 text-sm mt-1">{errores.celular}</p>
                )}
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Direcci√≥n
                </label>
                <input
                  type="text"
                  name="direccion"
                  value={datosCliente.direccion}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="Direcci√≥n completa"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Motivo de Consulta
                </label>
                <textarea
                  name="motivo_consulta"
                  value={datosCliente.motivo_consulta}
                  onChange={manejarCambio}
                  rows="3"
                  className="form-input resize-vertical"
                  placeholder="Descripci√≥n del motivo de la consulta"
                />
              </div>
            </div>
          </div>

          {/* Datos F√≠sicos */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Datos F√≠sicos
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Peso (kg)
                </label>
                <input
                  type="number"
                  step="0.1"
                  name="peso"
                  value={datosCliente.peso}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.peso ? "border-red-300" : ""
                  }`}
                  placeholder="70.5"
                />
                {errores.peso && (
                  <p className="text-red-600 text-sm mt-1">{errores.peso}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Talla (m)
                </label>
                <input
                  type="number"
                  step="0.01"
                  name="talla"
                  value={datosCliente.talla}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.talla ? "border-red-300" : ""
                  }`}
                  placeholder="1.75"
                />
                {errores.talla && (
                  <p className="text-red-600 text-sm mt-1">{errores.talla}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  IMC
                </label>
                <input
                  type="text"
                  name="imc"
                  value={datosCliente.imc}
                  className="form-input bg-gray-50"
                  placeholder="Calculado autom√°ticamente"
                  readOnly
                />
              </div>
            </div>
          </div>

          {/* Signos Vitales */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Signos Vitales
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Frecuencia Respiratoria
                </label>
                <input
                  type="number"
                  name="fr"
                  value={datosCliente.fr}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="20"
                  min="1"
                  max="100"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Temperatura (¬∞C)
                </label>
                <input
                  type="number"
                  step="0.1"
                  name="temperatura"
                  value={datosCliente.temperatura}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="36.5"
                  min="30"
                  max="45"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Saturaci√≥n O2 (%)
                </label>
                <input
                  type="number"
                  name="saturacion_oxigeno"
                  value={datosCliente.saturacion_oxigeno}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="98"
                  min="50"
                  max="100"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Ritmo Card√≠aco
                </label>
                <input
                  type="number"
                  name="ritmo_cardiaco"
                  value={datosCliente.ritmo_cardiaco}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="72"
                  min="30"
                  max="200"
                />
              </div>

              <div className="md:col-span-2">
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Presi√≥n Arterial
                </label>
                <input
                  type="text"
                  name="presion_arterial"
                  value={datosCliente.presion_arterial}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="120/80"
                />
              </div>
            </div>
          </div>

          {/* Antecedentes M√©dicos */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Antecedentes M√©dicos
            </h3>
            <div className="space-y-4">
              <div className="flex flex-wrap gap-6">
                <label className="flex items-center">
                  <input
                    type="checkbox"
                    name="presion_alta"
                    checked={datosCliente.presion_alta}
                    onChange={manejarCambio}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                  <span className="ml-2 text-sm text-gray-700">
                    Presi√≥n arterial alta
                  </span>
                </label>

                <label className="flex items-center">
                  <input
                    type="checkbox"
                    name="diabetes"
                    checked={datosCliente.diabetes}
                    onChange={manejarCambio}
                    className="h-4 w-4 text-blue-600 rounded border-gray-300"
                  />
                  <span className="ml-2 text-sm text-gray-700">Diabetes</span>
                </label>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Alergias
                </label>
                <textarea
                  name="alergias"
                  value={datosCliente.alergias}
                  onChange={manejarCambio}
                  rows="2"
                  className="form-input resize-vertical"
                  placeholder="Descripci√≥n de alergias conocidas"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Notas Adicionales
                </label>
                <textarea
                  name="notas_extras"
                  value={datosCliente.notas_extras}
                  onChange={manejarCambio}
                  rows="3"
                  className="form-input resize-vertical"
                  placeholder="Informaci√≥n adicional relevante"
                />
              </div>
            </div>
          </div>

          {/* Botones */}
          <div className="flex justify-between pt-6 border-t border-gray-200">
            <button
              type="button"
              onClick={() => router.push("/clientes")}
              className="btn btn-secondary"
              disabled={cargando}
            >
              Cancelar
            </button>

            <button
              type="submit"
              disabled={cargando}
              className={`btn btn-primary ${
                cargando ? "opacity-50 cursor-not-allowed" : ""
              }`}
            >
              {cargando ? (
                <div className="flex items-center">
                  <div className="spinner mr-2"></div>
                  {clienteId ? "Actualizando..." : "Registrando..."}
                </div>
              ) : clienteId ? (
                "Actualizar Cliente"
              ) : (
                "Registrar Cliente"
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}



================================================
File: src/components/formularios/FormularioGraduacion.js
================================================
'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function FormularioGraduacion({ clienteId, graduacionExistente = null, tipoInicial = 'lejos' }) {
  const router = useRouter()
  const [cargando, setCargando] = useState(false)
  const [errores, setErrores] = useState({})
  const [mensaje, setMensaje] = useState('')
  const [cliente, setCliente] = useState(null)
  const [archivoImagen, setArchivoImagen] = useState(null)
  const [vistaPrevia, setVistaPrevia] = useState('')

  // Estado del formulario de graduaci√≥n
  const [datosGraduacion, setDatosGraduacion] = useState({
    tipo: tipoInicial, // Usar el tipo inicial pasado como prop
    
    // Ojo Derecho (OD)
    od_esfera: '',
    od_cilindro: '',
    od_eje: '',
    od_adicion: '',
    
    // Ojo Izquierdo (OI)
    oi_esfera: '',
    oi_cilindro: '',
    oi_eje: '',
    oi_adicion: '',
    
    // Metadatos
    fecha_examen: new Date().toISOString().split('T')[0],
    notas: ''
  })

  // Cargar datos del cliente al montar
  useEffect(() => {
    if (clienteId) {
      cargarCliente()
    }
    
    // Si hay graduaci√≥n existente, cargar datos
    if (graduacionExistente) {
      setDatosGraduacion({
        tipo: graduacionExistente.tipo || 'lejos',
        od_esfera: graduacionExistente.od_esfera || '',
        od_cilindro: graduacionExistente.od_cilindro || '',
        od_eje: graduacionExistente.od_eje || '',
        od_adicion: graduacionExistente.od_adicion || '',
        oi_esfera: graduacionExistente.oi_esfera || '',
        oi_cilindro: graduacionExistente.oi_cilindro || '',
        oi_eje: graduacionExistente.oi_eje || '',
        oi_adicion: graduacionExistente.oi_adicion || '',
        fecha_examen: graduacionExistente.fecha_examen || new Date().toISOString().split('T')[0],
        notas: graduacionExistente.notas || ''
      })
      
      if (graduacionExistente.imagen_resultado) {
        setVistaPrevia(graduacionExistente.imagen_resultado)
      }
    }
  }, [clienteId, graduacionExistente])

  const cargarCliente = async () => {
    try {
      const respuesta = await fetch(`/api/clientes/${clienteId}`, {
        credentials: 'include'
      })
      
      if (respuesta.ok) {
        const datos = await respuesta.json()
        setCliente(datos.cliente)
      }
    } catch (error) {
      console.error('Error cargando cliente:', error)
    }
  }

  const manejarCambio = (evento) => {
    const { name, value } = evento.target
    
    setDatosGraduacion(prev => ({
      ...prev,
      [name]: value
    }))

    // Limpiar errores del campo
    if (errores[name]) {
      setErrores(prev => ({
        ...prev,
        [name]: ''
      }))
    }
  }

  const manejarArchivoImagen = (evento) => {
    const archivo = evento.target.files[0]
    
    if (archivo) {
      // Validar tipo de archivo
      const tiposPermitidos = ['image/jpeg', 'image/jpg', 'image/png']
      if (!tiposPermitidos.includes(archivo.type)) {
        setMensaje('Solo se permiten archivos JPG, JPEG o PNG')
        return
      }

      // Validar tama√±o (m√°ximo 5MB)
      if (archivo.size > 5 * 1024 * 1024) {
        setMensaje('El archivo no debe exceder 5MB')
        return
      }

      setArchivoImagen(archivo)
      
      // Crear vista previa
      const reader = new FileReader()
      reader.onload = (e) => {
        setVistaPrevia(e.target.result)
      }
      reader.readAsDataURL(archivo)
    }
  }

  const validarFormulario = () => {
    const nuevosErrores = {}

    // Validar rangos de esfera
    if (datosGraduacion.od_esfera && (parseFloat(datosGraduacion.od_esfera) < -30 || parseFloat(datosGraduacion.od_esfera) > 30)) {
      nuevosErrores.od_esfera = 'Esfera OD debe estar entre -30.00 y +30.00'
    }
    
    if (datosGraduacion.oi_esfera && (parseFloat(datosGraduacion.oi_esfera) < -30 || parseFloat(datosGraduacion.oi_esfera) > 30)) {
      nuevosErrores.oi_esfera = 'Esfera OI debe estar entre -30.00 y +30.00'
    }

    // Validar rangos de cilindro
    if (datosGraduacion.od_cilindro && (parseFloat(datosGraduacion.od_cilindro) < -10 || parseFloat(datosGraduacion.od_cilindro) > 10)) {
      nuevosErrores.od_cilindro = 'Cilindro OD debe estar entre -10.00 y +10.00'
    }
    
    if (datosGraduacion.oi_cilindro && (parseFloat(datosGraduacion.oi_cilindro) < -10 || parseFloat(datosGraduacion.oi_cilindro) > 10)) {
      nuevosErrores.oi_cilindro = 'Cilindro OI debe estar entre -10.00 y +10.00'
    }

    // Validar eje (0-180)
    if (datosGraduacion.od_eje && (parseInt(datosGraduacion.od_eje) < 0 || parseInt(datosGraduacion.od_eje) > 180)) {
      nuevosErrores.od_eje = 'Eje OD debe estar entre 0 y 180'
    }
    
    if (datosGraduacion.oi_eje && (parseInt(datosGraduacion.oi_eje) < 0 || parseInt(datosGraduacion.oi_eje) > 180)) {
      nuevosErrores.oi_eje = 'Eje OI debe estar entre 0 y 180'
    }

    // Validar adici√≥n
    if (datosGraduacion.od_adicion && (parseFloat(datosGraduacion.od_adicion) < 0 || parseFloat(datosGraduacion.od_adicion) > 5)) {
      nuevosErrores.od_adicion = 'Adici√≥n OD debe estar entre 0.00 y +5.00'
    }
    
    if (datosGraduacion.oi_adicion && (parseFloat(datosGraduacion.oi_adicion) < 0 || parseFloat(datosGraduacion.oi_adicion) > 5)) {
      nuevosErrores.oi_adicion = 'Adici√≥n OI debe estar entre 0.00 y +5.00'
    }

    // Si hay cilindro, debe haber eje
    if (datosGraduacion.od_cilindro && parseFloat(datosGraduacion.od_cilindro) !== 0 && !datosGraduacion.od_eje) {
      nuevosErrores.od_eje = 'Eje requerido cuando hay cilindro'
    }
    
    if (datosGraduacion.oi_cilindro && parseFloat(datosGraduacion.oi_cilindro) !== 0 && !datosGraduacion.oi_eje) {
      nuevosErrores.oi_eje = 'Eje requerido cuando hay cilindro'
    }

    setErrores(nuevosErrores)
    return Object.keys(nuevosErrores).length === 0
  }

  const manejarSubmit = async (evento) => {
    evento.preventDefault()
    setMensaje('')

    if (!validarFormulario()) {
      return
    }

    setCargando(true)

    try {
      let rutaImagen = ''

      // Subir imagen si hay una
      if (archivoImagen) {
        const formData = new FormData()
        formData.append('archivo', archivoImagen)
        formData.append('tipo', 'graduacion')

        const respuestaArchivo = await fetch('/api/archivos/subir', {
          method: 'POST',
          credentials: 'include',
          body: formData
        })

        if (respuestaArchivo.ok) {
          const datosArchivo = await respuestaArchivo.json()
          rutaImagen = datosArchivo.ruta
        }
      }

      // Preparar datos para enviar
      const datosParaEnviar = {
        ...datosGraduacion,
        cliente_id: clienteId,
        imagen_resultado: rutaImagen || vistaPrevia || null
      }

      // Determinar URL y m√©todo
      const url = graduacionExistente 
        ? `/api/graduaciones/${graduacionExistente.id}` 
        : '/api/graduaciones'
      const metodo = graduacionExistente ? 'PUT' : 'POST'

      const respuesta = await fetch(url, {
        method: metodo,
        headers: {
          'Content-Type': 'application/json'
        },
        credentials: 'include',
        body: JSON.stringify(datosParaEnviar)
      })

      const datos = await respuesta.json()

      if (respuesta.ok) {
        setMensaje(graduacionExistente ? 'Graduaci√≥n actualizada exitosamente' : 'Graduaci√≥n registrada exitosamente')
        
        // Redirigir despu√©s de 2 segundos
        setTimeout(() => {
          router.push(`/clientes/${clienteId}`)
        }, 2000)
      } else {
        setMensaje(`Error: ${datos.error}`)
      }
    } catch (error) {
      setMensaje('Error de conexi√≥n. Intente nuevamente.')
    } finally {
      setCargando(false)
    }
  }

  const limpiarFormulario = () => {
    setDatosGraduacion({
      tipo: 'lejos',
      od_esfera: '',
      od_cilindro: '',
      od_eje: '',
      od_adicion: '',
      oi_esfera: '',
      oi_cilindro: '',
      oi_eje: '',
      oi_adicion: '',
      fecha_examen: new Date().toISOString().split('T')[0],
      notas: ''
    })
    setArchivoImagen(null)
    setVistaPrevia('')
    setErrores({})
    setMensaje('')
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">Sistema √ìptica</h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link href="/clientes" className="text-blue-600 font-medium">
                üë• Clientes
              </Link>
              <Link href="/ventas" className="text-gray-600 hover:text-gray-900">
                üõí Ventas
              </Link>
              <Link href="/reportes" className="text-gray-600 hover:text-gray-900">
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Contenido principal */}
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-lg shadow-lg">
          <div className="p-6 border-b border-gray-200">
            <div className="flex justify-between items-start">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">
                  {graduacionExistente ? 'Editar Graduaci√≥n' : 'Nueva Graduaci√≥n'}
                </h2>
                {cliente && (
                  <p className="text-gray-600 mt-1">
                    Cliente: <span className="font-medium">{cliente.nombre_completo}</span>
                    {cliente.expediente && <span className="text-sm"> (Exp: {cliente.expediente})</span>}
                  </p>
                )}
              </div>
              
              <div className="flex gap-2">
                <select
                  name="tipo"
                  value={datosGraduacion.tipo}
                  onChange={manejarCambio}
                  className="form-input text-sm"
                >
                  <option value="lejos">Graduaci√≥n de Lejos</option>
                  <option value="cerca">Graduaci√≥n de Cerca</option>
                </select>
              </div>
            </div>
          </div>

          {mensaje && (
            <div className={`mx-6 mt-4 p-4 rounded-md ${
              mensaje.includes('Error') 
                ? 'bg-red-50 text-red-700 border border-red-200'
                : 'bg-green-50 text-green-700 border border-green-200'
            }`}>
              {mensaje}
            </div>
          )}

          <form onSubmit={manejarSubmit} className="p-6 space-y-6">
            {/* Informaci√≥n del Examen */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n del Examen
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fecha del Examen
                  </label>
                  <input
                    type="date"
                    name="fecha_examen"
                    value={datosGraduacion.fecha_examen}
                    onChange={manejarCambio}
                    className="form-input"
                    required
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Tipo de Graduaci√≥n
                  </label>
                  <div className="flex gap-4 mt-2">
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="tipo"
                        value="lejos"
                        checked={datosGraduacion.tipo === 'lejos'}
                        onChange={manejarCambio}
                        className="h-4 w-4 text-blue-600"
                      />
                      <span className="ml-2 text-sm">Lejos</span>
                    </label>
                    <label className="flex items-center">
                      <input
                        type="radio"
                        name="tipo"
                        value="cerca"
                        checked={datosGraduacion.tipo === 'cerca'}
                        onChange={manejarCambio}
                        className="h-4 w-4 text-blue-600"
                      />
                      <span className="ml-2 text-sm">Cerca</span>
                    </label>
                  </div>
                </div>
              </div>
            </div>

            {/* Graduaci√≥n por Ojos */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Mediciones √ìpticas
              </h3>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Ojo Derecho */}
                <div className="border rounded-lg p-4 bg-blue-50">
                  <h4 className="font-semibold text-blue-900 mb-3 flex items-center">
                    <span className="mr-2">üëÅÔ∏è</span>
                    Ojo Derecho (OD)
                  </h4>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Esfera
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        name="od_esfera"
                        value={datosGraduacion.od_esfera}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.od_esfera ? 'border-red-300' : ''}`}
                        placeholder="+/-0.00"
                      />
                      {errores.od_esfera && (
                        <p className="text-red-600 text-xs mt-1">{errores.od_esfera}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Cilindro
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        name="od_cilindro"
                        value={datosGraduacion.od_cilindro}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.od_cilindro ? 'border-red-300' : ''}`}
                        placeholder="+/-0.00"
                      />
                      {errores.od_cilindro && (
                        <p className="text-red-600 text-xs mt-1">{errores.od_cilindro}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Eje
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="180"
                        name="od_eje"
                        value={datosGraduacion.od_eje}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.od_eje ? 'border-red-300' : ''}`}
                        placeholder="0-180¬∞"
                      />
                      {errores.od_eje && (
                        <p className="text-red-600 text-xs mt-1">{errores.od_eje}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Adici√≥n
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        min="0"
                        name="od_adicion"
                        value={datosGraduacion.od_adicion}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.od_adicion ? 'border-red-300' : ''}`}
                        placeholder="+0.00"
                      />
                      {errores.od_adicion && (
                        <p className="text-red-600 text-xs mt-1">{errores.od_adicion}</p>
                      )}
                    </div>
                  </div>
                </div>

                {/* Ojo Izquierdo */}
                <div className="border rounded-lg p-4 bg-green-50">
                  <h4 className="font-semibold text-green-900 mb-3 flex items-center">
                    <span className="mr-2">üëÅÔ∏è</span>
                    Ojo Izquierdo (OI)
                  </h4>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Esfera
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        name="oi_esfera"
                        value={datosGraduacion.oi_esfera}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.oi_esfera ? 'border-red-300' : ''}`}
                        placeholder="+/-0.00"
                      />
                      {errores.oi_esfera && (
                        <p className="text-red-600 text-xs mt-1">{errores.oi_esfera}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Cilindro
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        name="oi_cilindro"
                        value={datosGraduacion.oi_cilindro}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.oi_cilindro ? 'border-red-300' : ''}`}
                        placeholder="+/-0.00"
                      />
                      {errores.oi_cilindro && (
                        <p className="text-red-600 text-xs mt-1">{errores.oi_cilindro}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Eje
                      </label>
                      <input
                        type="number"
                        min="0"
                        max="180"
                        name="oi_eje"
                        value={datosGraduacion.oi_eje}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.oi_eje ? 'border-red-300' : ''}`}
                        placeholder="0-180¬∞"
                      />
                      {errores.oi_eje && (
                        <p className="text-red-600 text-xs mt-1">{errores.oi_eje}</p>
                      )}
                    </div>
                    
                    <div>
                      <label className="block text-xs font-medium text-gray-700 mb-1">
                        Adici√≥n
                      </label>
                      <input
                        type="number"
                        step="0.25"
                        min="0"
                        name="oi_adicion"
                        value={datosGraduacion.oi_adicion}
                        onChange={manejarCambio}
                        className={`form-input text-sm ${errores.oi_adicion ? 'border-red-300' : ''}`}
                        placeholder="+0.00"
                      />
                      {errores.oi_adicion && (
                        <p className="text-red-600 text-xs mt-1">{errores.oi_adicion}</p>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Imagen de Resultados */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Imagen de Resultados (Opcional)
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subir imagen del autorefract√≥metro
                  </label>
                  <input
                    type="file"
                    accept="image/jpeg,image/jpg,image/png"
                    onChange={manejarArchivoImagen}
                    className="form-input"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Formatos permitidos: JPG, JPEG, PNG (m√°ximo 5MB)
                  </p>
                </div>
                
                {vistaPrevia && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Vista previa
                    </label>
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
                      <img
                        src={vistaPrevia}
                        alt="Vista previa"
                        className="max-w-full h-32 object-contain mx-auto"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setVistaPrevia('')
                          setArchivoImagen(null)
                        }}
                        className="mt-2 text-sm text-red-600 hover:text-red-800"
                      >
                        Eliminar imagen
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Notas */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Notas y Observaciones
              </label>
              <textarea
                name="notas"
                value={datosGraduacion.notas}
                onChange={manejarCambio}
                rows="3"
                className="form-input resize-vertical"
                placeholder="Observaciones adicionales sobre el examen..."
              />
            </div>

            {/* Botones */}
            <div className="flex justify-between pt-6 border-t border-gray-200">
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={() => router.push(`/clientes/${clienteId}`)}
                  className="btn btn-secondary"
                  disabled={cargando}
                >
                  Cancelar
                </button>
                
                {!graduacionExistente && (
                  <button
                    type="button"
                    onClick={limpiarFormulario}
                    className="btn btn-secondary"
                    disabled={cargando}
                  >
                    Limpiar Formulario
                  </button>
                )}
              </div>

              <button
                type="submit"
                disabled={cargando}
                className={`btn btn-primary ${cargando ? 'opacity-50 cursor-not-allowed' : ''}`}
              >
                {cargando ? (
                  <div className="flex items-center">
                    <div className="spinner mr-2"></div>
                    {graduacionExistente ? 'Actualizando...' : 'Guardando...'}
                  </div>
                ) : (
                  graduacionExistente ? 'Actualizar Graduaci√≥n' : 'Guardar Graduaci√≥n'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  )
}


================================================
File: src/components/formularios/FormularioVenta.js
================================================
"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";

export default function FormularioVenta({
  clienteId = null,
  ventaExistente = null,
}) {
  const router = useRouter();
  const [cargando, setCargando] = useState(false);
  const [errores, setErrores] = useState({});
  const [mensaje, setMensaje] = useState("");
  const [cliente, setCliente] = useState(null);
  const [clientes, setClientes] = useState([]);
  const [archivoReceta, setArchivoReceta] = useState(null);
  const [vistaPrevia, setVistaPrevia] = useState("");
  const [busquedaCliente, setBusquedaCliente] = useState("");

  // Estado del formulario de venta
  const [datosVenta, setDatosVenta] = useState({
    cliente_id: clienteId || "",

    // Informaci√≥n del producto
    marca_armazon: "",
    laboratorio: "",
    precio_armazon: "",
    precio_micas: "",
    costo_total: "",

    // Control de pagos
    deposito_inicial: "",
    saldo_restante: "",

    // Estado y fechas
    estado: "pendiente",
    fecha_venta: new Date().toISOString().split("T")[0],
    fecha_llegada_laboratorio: "",
    fecha_entrega_cliente: "",

    // Notas
    notas: "",
  });

  // Opciones de laboratorio
  const laboratorios = ["Laboratorio 1", "Laboratorio 2", "Laboratorio 3"];

  // Estados posibles de la venta
  const estadosVenta = [
    {
      valor: "pendiente",
      label: "Pendiente",
      color: "bg-yellow-100 text-yellow-800",
    },
    {
      valor: "en_laboratorio",
      label: "En Laboratorio",
      color: "bg-blue-100 text-blue-800",
    },
    { valor: "listo", label: "Listo", color: "bg-green-100 text-green-800" },
    {
      valor: "entregado",
      label: "Entregado",
      color: "bg-gray-100 text-gray-800",
    },
    {
      valor: "cancelado",
      label: "Cancelado",
      color: "bg-red-100 text-red-800",
    },
  ];

  // Cargar datos iniciales
  useEffect(() => {
    if (clienteId) {
      cargarCliente(clienteId);
    } else {
      cargarClientes();
    }

    // Si hay venta existente, cargar datos
    if (ventaExistente) {
      setDatosVenta({
        cliente_id: ventaExistente.cliente_id || "",
        marca_armazon: ventaExistente.marca_armazon || "",
        laboratorio: ventaExistente.laboratorio || "",
        precio_armazon: ventaExistente.precio_armazon || "",
        precio_micas: ventaExistente.precio_micas || "",
        costo_total: ventaExistente.costo_total || "",
        deposito_inicial: ventaExistente.total_depositado || "",
        saldo_restante: ventaExistente.saldo_restante || "",
        estado: ventaExistente.estado || "pendiente",
        fecha_venta:
          ventaExistente.fecha_venta || new Date().toISOString().split("T")[0],
        fecha_llegada_laboratorio:
          ventaExistente.fecha_llegada_laboratorio || "",
        fecha_entrega_cliente: ventaExistente.fecha_entrega_cliente || "",
        notas: ventaExistente.notas || "",
      });

      if (ventaExistente.imagen_receta) {
        setVistaPrevia(ventaExistente.imagen_receta);
      }
    }
  }, [clienteId, ventaExistente]);

  // Calcular autom√°ticamente costo total y saldo restante
  useEffect(() => {
    const armazon = parseFloat(datosVenta.precio_armazon) || 0;
    const micas = parseFloat(datosVenta.precio_micas) || 0;
    const total = armazon + micas;

    setDatosVenta((prev) => ({
      ...prev,
      costo_total: total > 0 ? total.toFixed(2) : "",
    }));
  }, [datosVenta.precio_armazon, datosVenta.precio_micas]);

  useEffect(() => {
    const total = parseFloat(datosVenta.costo_total) || 0;
    const deposito = parseFloat(datosVenta.deposito_inicial) || 0;
    const saldo = total - deposito;

    setDatosVenta((prev) => ({
      ...prev,
      saldo_restante: total > 0 ? saldo.toFixed(2) : "",
    }));
  }, [datosVenta.costo_total, datosVenta.deposito_inicial]);

  const cargarCliente = async (id) => {
    try {
      const respuesta = await fetch(`/api/clientes/${id}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setCliente(datos.cliente);
      }
    } catch (error) {
      console.error("Error cargando cliente:", error);
    }
  };

  const cargarClientes = async () => {
    try {
      const respuesta = await fetch("/api/clientes?limite=100", {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setClientes(datos.clientes);
      }
    } catch (error) {
      console.error("Error cargando clientes:", error);
    }
  };

  const buscarClientes = async (termino) => {
    if (termino.length < 2) {
      cargarClientes();
      return;
    }

    try {
      const respuesta = await fetch(
        `/api/clientes?busqueda=${encodeURIComponent(termino)}`,
        {
          credentials: "include",
        }
      );

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setClientes(datos.clientes);
      }
    } catch (error) {
      console.error("Error buscando clientes:", error);
    }
  };

  const manejarCambio = (evento) => {
    const { name, value } = evento.target;

    setDatosVenta((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Limpiar errores del campo
    if (errores[name]) {
      setErrores((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const manejarBusquedaCliente = (evento) => {
    const valor = evento.target.value;
    setBusquedaCliente(valor);
    buscarClientes(valor);
  };

  const seleccionarCliente = (cliente) => {
    setDatosVenta((prev) => ({
      ...prev,
      cliente_id: cliente.id,
    }));
    setCliente(cliente);
    setBusquedaCliente("");
  };

  const manejarArchivoReceta = (evento) => {
    const archivo = evento.target.files[0];

    if (archivo) {
      // Validar tipo de archivo
      const tiposPermitidos = [
        "image/jpeg",
        "image/jpg",
        "image/png",
        "application/pdf",
      ];
      if (!tiposPermitidos.includes(archivo.type)) {
        setMensaje("Solo se permiten archivos JPG, JPEG, PNG o PDF");
        return;
      }

      // Validar tama√±o (m√°ximo 10MB)
      if (archivo.size > 10 * 1024 * 1024) {
        setMensaje("El archivo no debe exceder 10MB");
        return;
      }

      setArchivoReceta(archivo);

      // Crear vista previa para im√°genes
      if (archivo.type.startsWith("image/")) {
        const reader = new FileReader();
        reader.onload = (e) => {
          setVistaPrevia(e.target.result);
        };
        reader.readAsDataURL(archivo);
      } else {
        setVistaPrevia("PDF adjunto: " + archivo.name);
      }
    }
  };

  const validarFormulario = () => {
    const nuevosErrores = {};

    // Validar cliente
    if (!datosVenta.cliente_id) {
      nuevosErrores.cliente_id = "Cliente es requerido";
    }

    // Validar precios
    if (!datosVenta.precio_armazon && !datosVenta.precio_micas) {
      nuevosErrores.precio_armazon =
        "Debe especificar al menos precio de armaz√≥n o micas";
    }

    if (
      datosVenta.precio_armazon &&
      parseFloat(datosVenta.precio_armazon) < 0
    ) {
      nuevosErrores.precio_armazon = "El precio no puede ser negativo";
    }

    if (datosVenta.precio_micas && parseFloat(datosVenta.precio_micas) < 0) {
      nuevosErrores.precio_micas = "El precio no puede ser negativo";
    }

    // Validar costo total
    if (!datosVenta.costo_total || parseFloat(datosVenta.costo_total) <= 0) {
      nuevosErrores.costo_total = "Costo total debe ser mayor a 0";
    }

    // Validar dep√≥sito inicial
    if (datosVenta.deposito_inicial) {
      const deposito = parseFloat(datosVenta.deposito_inicial);
      const total = parseFloat(datosVenta.costo_total);

      if (deposito < 0) {
        nuevosErrores.deposito_inicial = "El dep√≥sito no puede ser negativo";
      } else if (deposito > total) {
        nuevosErrores.deposito_inicial =
          "El dep√≥sito no puede ser mayor al costo total";
      }
    }

    // Validar fechas
    if (datosVenta.fecha_llegada_laboratorio && datosVenta.fecha_venta) {
      if (
        new Date(datosVenta.fecha_llegada_laboratorio) <
        new Date(datosVenta.fecha_venta)
      ) {
        nuevosErrores.fecha_llegada_laboratorio =
          "No puede ser anterior a la fecha de venta";
      }
    }

    if (
      datosVenta.fecha_entrega_cliente &&
      datosVenta.fecha_llegada_laboratorio
    ) {
      if (
        new Date(datosVenta.fecha_entrega_cliente) <
        new Date(datosVenta.fecha_llegada_laboratorio)
      ) {
        nuevosErrores.fecha_entrega_cliente =
          "No puede ser anterior a la llegada del laboratorio";
      }
    }

    setErrores(nuevosErrores);
    return Object.keys(nuevosErrores).length === 0;
  };

  const manejarSubmit = async (evento) => {
    evento.preventDefault();
    setMensaje("");

    if (!validarFormulario()) {
      return;
    }

    setCargando(true);

    try {
      let rutaReceta = "";

      // Subir archivo de receta si hay uno
      if (archivoReceta) {
        const formData = new FormData();
        formData.append("archivo", archivoReceta);
        formData.append("tipo", "receta");

        const respuestaArchivo = await fetch("/api/archivos/subir", {
          method: "POST",
          credentials: "include",
          body: formData,
        });

        if (respuestaArchivo.ok) {
          const datosArchivo = await respuestaArchivo.json();
          rutaReceta = datosArchivo.ruta;
        }
      }

      // Preparar datos para enviar
      const datosParaEnviar = {
        ...datosVenta,
        imagen_receta: rutaReceta || vistaPrevia || null,
      };

      // Determinar URL y m√©todo
      const url = ventaExistente
        ? `/api/ventas/${ventaExistente.id}`
        : "/api/ventas";
      const metodo = ventaExistente ? "PUT" : "POST";

      const respuesta = await fetch(url, {
        method: metodo,
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(datosParaEnviar),
      });

      const datos = await respuesta.json();

      if (respuesta.ok) {
        setMensaje(
          ventaExistente
            ? "Venta actualizada exitosamente"
            : "Venta registrada exitosamente"
        );

        // Redirigir despu√©s de 2 segundos
        setTimeout(() => {
          if (clienteId) {
            router.push(`/clientes/${clienteId}`);
          } else {
            router.push("/ventas");
          }
        }, 2000);
      } else {
        setMensaje(`Error: ${datos.error}`);
      }
    } catch (error) {
      setMensaje("Error de conexi√≥n. Intente nuevamente.");
    } finally {
      setCargando(false);
    }
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad) return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navbar simple */}
      <nav className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center">
              <Link href="/" className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-gray-900">
                  Sistema √ìptica
                </h1>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <Link
                href="/clientes"
                className="text-gray-600 hover:text-gray-900"
              >
                üë• Clientes
              </Link>
              <Link href="/ventas" className="text-blue-600 font-medium">
                üõí Ventas
              </Link>
              <Link
                href="/reportes"
                className="text-gray-600 hover:text-gray-900"
              >
                üìä Reportes
              </Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Contenido principal */}
      <div className="max-w-4xl mx-auto p-6">
        <div className="bg-white rounded-lg shadow-lg">
          <div className="p-6 border-b border-gray-200">
            <div className="flex justify-between items-start">
              <div>
                <h2 className="text-2xl font-bold text-gray-900">
                  {ventaExistente ? "Editar Venta" : "Nueva Venta"}
                </h2>
                {cliente && (
                  <p className="text-gray-600 mt-1">
                    Cliente:{" "}
                    <span className="font-medium">
                      {cliente.nombre_completo}
                    </span>
                    {cliente.expediente && (
                      <span className="text-sm">
                        {" "}
                        (Exp: {cliente.expediente})
                      </span>
                    )}
                  </p>
                )}
              </div>

              {ventaExistente && (
                <div className="flex gap-2">
                  <span
                    className={`px-3 py-1 text-sm font-medium rounded-full ${
                      estadosVenta.find((e) => e.valor === datosVenta.estado)
                        ?.color || "bg-gray-100 text-gray-800"
                    }`}
                  >
                    {estadosVenta.find((e) => e.valor === datosVenta.estado)
                      ?.label || datosVenta.estado}
                  </span>
                </div>
              )}
            </div>
          </div>

          {mensaje && (
            <div
              className={`mx-6 mt-4 p-4 rounded-md ${
                mensaje.includes("Error")
                  ? "bg-red-50 text-red-700 border border-red-200"
                  : "bg-green-50 text-green-700 border border-green-200"
              }`}
            >
              {mensaje}
            </div>
          )}

          <form onSubmit={manejarSubmit} className="p-6 space-y-6">
            {/* Selecci√≥n de Cliente */}
            {!clienteId && (
              <div>
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  Seleccionar Cliente
                </h3>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">
                      Buscar Cliente
                    </label>
                    <input
                      type="text"
                      value={busquedaCliente}
                      onChange={manejarBusquedaCliente}
                      className="form-input"
                      placeholder="Escriba nombre o expediente del cliente..."
                    />
                  </div>

                  {clientes.length > 0 && (
                    <div className="max-h-60 overflow-y-auto border rounded-lg">
                      {clientes.map((clienteItem) => (
                        <div
                          key={clienteItem.id}
                          onClick={() => seleccionarCliente(clienteItem)}
                          className={`p-3 border-b cursor-pointer hover:bg-gray-50 ${
                            datosVenta.cliente_id === clienteItem.id
                              ? "bg-blue-50 border-blue-200"
                              : ""
                          }`}
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <p className="font-medium text-gray-900">
                                {clienteItem.nombre_completo}
                              </p>
                              <p className="text-sm text-gray-600">
                                {clienteItem.expediente &&
                                  `Exp: ${clienteItem.expediente} ‚Ä¢ `}
                                {clienteItem.email ||
                                  clienteItem.celular ||
                                  "Sin contacto"}
                              </p>
                            </div>
                            {datosVenta.cliente_id === clienteItem.id && (
                              <span className="text-blue-600 text-sm">
                                ‚úì Seleccionado
                              </span>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {errores.cliente_id && (
                    <p className="text-red-600 text-sm">{errores.cliente_id}</p>
                  )}
                </div>
              </div>
            )}

            {/* Informaci√≥n del Producto */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Informaci√≥n del Producto
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Marca del Armaz√≥n
                  </label>
                  <input
                    type="text"
                    name="marca_armazon"
                    value={datosVenta.marca_armazon}
                    onChange={manejarCambio}
                    className="form-input"
                    placeholder="Ej: Ray-Ban, Oakley, etc."
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Laboratorio
                  </label>
                  <select
                    name="laboratorio"
                    value={datosVenta.laboratorio}
                    onChange={manejarCambio}
                    className="form-input"
                  >
                    <option value="">Seleccionar laboratorio...</option>
                    {laboratorios.map((lab) => (
                      <option key={lab} value={lab}>
                        {lab}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Precio Armaz√≥n
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    name="precio_armazon"
                    value={datosVenta.precio_armazon}
                    onChange={manejarCambio}
                    className={`form-input ${
                      errores.precio_armazon ? "border-red-300" : ""
                    }`}
                    placeholder="0.00"
                  />
                  {errores.precio_armazon && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.precio_armazon}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Precio Micas
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    name="precio_micas"
                    value={datosVenta.precio_micas}
                    onChange={manejarCambio}
                    className={`form-input ${
                      errores.precio_micas ? "border-red-300" : ""
                    }`}
                    placeholder="0.00"
                  />
                  {errores.precio_micas && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.precio_micas}
                    </p>
                  )}
                </div>

                <div className="md:col-span-2">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <div className="grid grid-cols-3 gap-4 text-center">
                      <div>
                        <p className="text-sm text-gray-600">Costo Total</p>
                        <p className="text-xl font-bold text-green-600">
                          {formatearDinero(datosVenta.costo_total)}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Dep√≥sito</p>
                        <p className="text-xl font-bold text-blue-600">
                          {formatearDinero(datosVenta.deposito_inicial)}
                        </p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-600">Saldo Restante</p>
                        <p className="text-xl font-bold text-red-600">
                          {formatearDinero(datosVenta.saldo_restante)}
                        </p>
                      </div>
                    </div>
                  </div>
                  {errores.costo_total && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.costo_total}
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* Control de Pagos */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Control de Pagos
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Dep√≥sito Inicial
                  </label>
                  <input
                    type="number"
                    step="0.01"
                    name="deposito_inicial"
                    value={datosVenta.deposito_inicial}
                    onChange={manejarCambio}
                    className={`form-input ${
                      errores.deposito_inicial ? "border-red-300" : ""
                    }`}
                    placeholder="0.00"
                  />
                  {errores.deposito_inicial && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.deposito_inicial}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Saldo Restante (Calculado)
                  </label>
                  <input
                    type="text"
                    value={formatearDinero(datosVenta.saldo_restante)}
                    className="form-input bg-gray-50"
                    readOnly
                  />
                </div>
              </div>
            </div>

            {/* Estado y Fechas */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Estado y Fechas
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Estado de la Venta
                  </label>
                  <select
                    name="estado"
                    value={datosVenta.estado}
                    onChange={manejarCambio}
                    className="form-input"
                  >
                    {estadosVenta.map((estado) => (
                      <option key={estado.valor} value={estado.valor}>
                        {estado.label}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fecha de Venta
                  </label>
                  <input
                    type="date"
                    name="fecha_venta"
                    value={datosVenta.fecha_venta}
                    onChange={manejarCambio}
                    className="form-input"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fecha Llegada del Laboratorio
                  </label>
                  <input
                    type="date"
                    name="fecha_llegada_laboratorio"
                    value={datosVenta.fecha_llegada_laboratorio}
                    onChange={manejarCambio}
                    className={`form-input ${
                      errores.fecha_llegada_laboratorio ? "border-red-300" : ""
                    }`}
                  />
                  {errores.fecha_llegada_laboratorio && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.fecha_llegada_laboratorio}
                    </p>
                  )}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Fecha Entrega al Cliente
                  </label>
                  <input
                    type="date"
                    name="fecha_entrega_cliente"
                    value={datosVenta.fecha_entrega_cliente}
                    onChange={manejarCambio}
                    className={`form-input ${
                      errores.fecha_entrega_cliente ? "border-red-300" : ""
                    }`}
                  />
                  {errores.fecha_entrega_cliente && (
                    <p className="text-red-600 text-xs mt-1">
                      {errores.fecha_entrega_cliente}
                    </p>
                  )}
                </div>
              </div>
            </div>

            {/* Receta M√©dica */}
            <div>
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Receta M√©dica (Opcional)
              </h3>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subir imagen o PDF de la receta
                  </label>
                  <input
                    type="file"
                    accept="image/jpeg,image/jpg,image/png,application/pdf"
                    onChange={manejarArchivoReceta}
                    className="form-input"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Formatos permitidos: JPG, JPEG, PNG, PDF (m√°ximo 10MB)
                  </p>
                </div>

                {vistaPrevia && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Vista previa
                    </label>
                    <div className="border-2 border-dashed border-gray-300 rounded-lg p-4">
                      {vistaPrevia.startsWith("data:image") ? (
                        <img
                          src={vistaPrevia}
                          alt="Vista previa de receta"
                          className="max-w-full h-32 object-contain mx-auto"
                        />
                      ) : (
                        <div className="text-center py-4">
                          <span className="text-gray-600">{vistaPrevia}</span>
                        </div>
                      )}
                      <button
                        type="button"
                        onClick={() => {
                          setVistaPrevia("");
                          setArchivoReceta(null);
                        }}
                        className="mt-2 text-sm text-red-600 hover:text-red-800 w-full"
                      >
                        Eliminar archivo
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Notas */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Notas y Observaciones
              </label>
              <textarea
                name="notas"
                value={datosVenta.notas}
                onChange={manejarCambio}
                rows="3"
                className="form-input resize-vertical"
                placeholder="Observaciones adicionales sobre la venta..."
              />
            </div>

            {/* Botones */}
            <div className="flex justify-between pt-6 border-t border-gray-200">
              <div className="flex gap-2">
                <button
                  type="button"
                  onClick={() => {
                    if (clienteId) {
                      router.push(`/clientes/${clienteId}`);
                    } else {
                      router.push("/ventas");
                    }
                  }}
                  className="btn btn-secondary"
                  disabled={cargando}
                >
                  Cancelar
                </button>
              </div>

              <button
                type="submit"
                disabled={cargando}
                className={`btn btn-primary ${
                  cargando ? "opacity-50 cursor-not-allowed" : ""
                }`}
              >
                {cargando ? (
                  <div className="flex items-center">
                    <div className="spinner mr-2"></div>
                    {ventaExistente ? "Actualizando..." : "Guardando..."}
                  </div>
                ) : ventaExistente ? (
                  "Actualizar Venta"
                ) : (
                  "Registrar Venta"
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}



================================================
File: src/components/periodos/GestionPeriodos.js
================================================
"use client";

import { useState, useEffect } from "react";

export default function GestionPeriodos() {
  const [periodos, setPeriodos] = useState([]);
  const [periodoActivo, setPeriodoActivo] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");
  const [mostrarModalCierre, setMostrarModalCierre] = useState(false);
  const [ventasPendientes, setVentasPendientes] = useState([]);
  const [cargandoCierre, setCargandoCierre] = useState(false);
  const [estadisticasPeriodo, setEstadisticasPeriodo] = useState(null);

  useEffect(() => {
    cargarPeriodos();
    cargarEstadisticasPeriodoActivo();
  }, []);

  const cargarPeriodos = async () => {
    setCargando(true);
    try {
      const respuesta = await fetch("/api/periodos", {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setPeriodos(datos.periodos);
        setPeriodoActivo(datos.periodo_activo);
        setError("");
      } else {
        setError("Error cargando per√≠odos");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setCargando(false);
    }
  };

  const cargarEstadisticasPeriodoActivo = async () => {
    if (!periodoActivo?.id) return;

    try {
      // Obtener estad√≠sticas del per√≠odo activo
      const respuesta = await fetch(`/api/ventas?limite=1000`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();

        // Filtrar ventas del per√≠odo activo y calcular estad√≠sticas
        const ventasPeriodo = datos.ventas.filter(
          (v) => v.periodo_id === periodoActivo.id
        );

        const stats = {
          total_ventas: ventasPeriodo.length,
          ventas_pendientes: ventasPeriodo.filter(
            (v) => parseFloat(v.saldo_restante) > 0
          ).length,
          monto_total_vendido: ventasPeriodo.reduce(
            (sum, v) => sum + parseFloat(v.costo_total || 0),
            0
          ),
          monto_total_depositado: ventasPeriodo.reduce(
            (sum, v) => sum + parseFloat(v.total_depositado || 0),
            0
          ),
          monto_pendiente_cobro: ventasPeriodo.reduce(
            (sum, v) => sum + parseFloat(v.saldo_restante || 0),
            0
          ),
          ventas_por_estado: {
            pendiente: ventasPeriodo.filter((v) => v.estado === "pendiente")
              .length,
            en_laboratorio: ventasPeriodo.filter(
              (v) => v.estado === "en_laboratorio"
            ).length,
            listo: ventasPeriodo.filter((v) => v.estado === "listo").length,
            entregado: ventasPeriodo.filter((v) => v.estado === "entregado")
              .length,
            cancelado: ventasPeriodo.filter((v) => v.estado === "cancelado")
              .length,
          },
        };

        setEstadisticasPeriodo(stats);
      }
    } catch (error) {
      console.error("Error cargando estad√≠sticas:", error);
    }
  };

  const cargarVentasPendientes = async () => {
    if (!periodoActivo?.id) return;

    try {
      const respuesta = await fetch(`/api/ventas?limite=1000`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();

        // Filtrar ventas del per√≠odo activo con saldo pendiente
        const pendientes = datos.ventas.filter(
          (v) =>
            v.periodo_id === periodoActivo.id &&
            parseFloat(v.saldo_restante) > 0 &&
            v.estado !== "cancelado"
        );

        setVentasPendientes(pendientes);
      }
    } catch (error) {
      console.error("Error cargando ventas pendientes:", error);
    }
  };

  const formatearFecha = (fecha) => {
    if (!fecha) return "N/A";
    return new Date(fecha).toLocaleDateString("es-MX", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad) return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const obtenerEstadoPeriodo = (periodo) => {
    if (periodo.activo) {
      return { label: "Activo", color: "bg-green-100 text-green-800" };
    }
    return { label: "Cerrado", color: "bg-gray-100 text-gray-800" };
  };

  const iniciarCierrePeriodo = async () => {
    await cargarVentasPendientes();
    setMostrarModalCierre(true);
  };

  const confirmarCierrePeriodo = async () => {
    setCargandoCierre(true);
    try {
      const respuesta = await fetch("/api/periodos", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify({
          confirmar_cierre: true,
        }),
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();

        // Mostrar resumen del cierre
        alert(
          `‚úÖ Per√≠odo cerrado exitosamente!\n\n` +
            `Per√≠odo anterior: ${datos.periodo_anterior.nombre}\n` +
            `Nuevo per√≠odo: ${datos.periodo_nuevo.nombre}\n` +
            `Ventas migradas: ${datos.ventas_migradas.length}\n` +
            `Monto migrado: ${formatearDinero(datos.total_migrado)}`
        );

        // Recargar datos
        await cargarPeriodos();
        setMostrarModalCierre(false);
      } else {
        const errorData = await respuesta.json();
        setError(errorData.error || "Error cerrando per√≠odo");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setCargandoCierre(false);
    }
  };

  const puedeSerCerrado = () => {
    const hoy = new Date();
    const dia = hoy.getDate();
    // Permitir cierre solo del d√≠a 5 al 10 de cada mes (rango flexible)
    return dia >= 5 && dia <= 10;
  };

  if (cargando) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-500">Cargando informaci√≥n de per√≠odos...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Error */}
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md">
          {error}
        </div>
      )}

      {/* Per√≠odo Activo */}
      {periodoActivo && (
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <div className="flex justify-between items-start">
              <div>
                <h2 className="text-xl font-bold text-gray-900 flex items-center">
                  üìÖ Per√≠odo Activo
                  <span className="ml-3 px-3 py-1 bg-green-100 text-green-800 text-sm font-medium rounded-full">
                    {periodoActivo.nombre}
                  </span>
                </h2>
                <p className="text-gray-600 mt-1">
                  {formatearFecha(periodoActivo.fecha_inicio)} -{" "}
                  {formatearFecha(periodoActivo.fecha_fin)}
                </p>
              </div>

              <div className="flex gap-2">
                {puedeSerCerrado() ? (
                  <button
                    onClick={iniciarCierrePeriodo}
                    className="btn btn-primary"
                    disabled={cargandoCierre}
                  >
                    üîí Cerrar Per√≠odo
                  </button>
                ) : (
                  <div className="text-right">
                    <button
                      className="btn btn-secondary opacity-50 cursor-not-allowed"
                      disabled
                      title="Solo se puede cerrar del d√≠a 5 al 10 de cada mes"
                    >
                      üîí Cerrar Per√≠odo
                    </button>
                    <p className="text-xs text-gray-500 mt-1">
                      Cierre disponible del 5-10 del mes
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Estad√≠sticas del per√≠odo activo */}
          {estadisticasPeriodo && (
            <div className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                Estad√≠sticas del Per√≠odo
              </h3>

              <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
                <div className="text-center p-3 bg-blue-50 rounded-lg">
                  <div className="text-2xl font-bold text-blue-600">
                    {estadisticasPeriodo.total_ventas}
                  </div>
                  <div className="text-xs text-blue-800">Total Ventas</div>
                </div>

                <div className="text-center p-3 bg-green-50 rounded-lg">
                  <div className="text-2xl font-bold text-green-600">
                    {formatearDinero(estadisticasPeriodo.monto_total_vendido)}
                  </div>
                  <div className="text-xs text-green-800">Monto Vendido</div>
                </div>

                <div className="text-center p-3 bg-purple-50 rounded-lg">
                  <div className="text-2xl font-bold text-purple-600">
                    {formatearDinero(
                      estadisticasPeriodo.monto_total_depositado
                    )}
                  </div>
                  <div className="text-xs text-purple-800">Total Cobrado</div>
                </div>

                <div className="text-center p-3 bg-red-50 rounded-lg">
                  <div className="text-2xl font-bold text-red-600">
                    {formatearDinero(estadisticasPeriodo.monto_pendiente_cobro)}
                  </div>
                  <div className="text-xs text-red-800">Por Cobrar</div>
                </div>

                <div className="text-center p-3 bg-yellow-50 rounded-lg">
                  <div className="text-2xl font-bold text-yellow-600">
                    {estadisticasPeriodo.ventas_pendientes}
                  </div>
                  <div className="text-xs text-yellow-800">Pendientes</div>
                </div>
              </div>

              {/* Estados de ventas */}
              <div>
                <h4 className="text-md font-medium text-gray-700 mb-3">
                  Distribuci√≥n por Estado
                </h4>
                <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
                  <div className="flex justify-between p-2 bg-yellow-50 rounded text-sm">
                    <span>Pendiente:</span>
                    <span className="font-medium">
                      {estadisticasPeriodo.ventas_por_estado.pendiente}
                    </span>
                  </div>
                  <div className="flex justify-between p-2 bg-blue-50 rounded text-sm">
                    <span>En Lab:</span>
                    <span className="font-medium">
                      {estadisticasPeriodo.ventas_por_estado.en_laboratorio}
                    </span>
                  </div>
                  <div className="flex justify-between p-2 bg-green-50 rounded text-sm">
                    <span>Listo:</span>
                    <span className="font-medium">
                      {estadisticasPeriodo.ventas_por_estado.listo}
                    </span>
                  </div>
                  <div className="flex justify-between p-2 bg-gray-50 rounded text-sm">
                    <span>Entregado:</span>
                    <span className="font-medium">
                      {estadisticasPeriodo.ventas_por_estado.entregado}
                    </span>
                  </div>
                  <div className="flex justify-between p-2 bg-red-50 rounded text-sm">
                    <span>Cancelado:</span>
                    <span className="font-medium">
                      {estadisticasPeriodo.ventas_por_estado.cancelado}
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Historial de Per√≠odos */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-900">
            üìä Historial de Per√≠odos
          </h2>
          <p className="text-gray-600 mt-1">
            Todos los per√≠odos contables registrados
          </p>
        </div>

        <div className="p-6">
          {periodos.length === 0 ? (
            <div className="text-center py-8 text-gray-500">
              <div className="text-4xl mb-2">üìÖ</div>
              <p>No hay per√≠odos registrados</p>
            </div>
          ) : (
            <div className="space-y-3">
              {periodos.map((periodo) => {
                const estado = obtenerEstadoPeriodo(periodo);
                return (
                  <div
                    key={periodo.id}
                    className={`border rounded-lg p-4 ${
                      periodo.activo
                        ? "border-green-200 bg-green-50"
                        : "border-gray-200"
                    }`}
                  >
                    <div className="flex justify-between items-start">
                      <div>
                        <div className="flex items-center gap-3 mb-2">
                          <h3 className="text-lg font-semibold text-gray-900">
                            {periodo.nombre}
                          </h3>
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded-full ${estado.color}`}
                          >
                            {estado.label}
                          </span>
                        </div>

                        <div className="text-sm text-gray-600">
                          <p>
                            üìÖ {formatearFecha(periodo.fecha_inicio)} -{" "}
                            {formatearFecha(periodo.fecha_fin)}
                          </p>
                          <p>üïí Creado: {periodo.fecha_creacion_formato}</p>
                        </div>
                      </div>

                      {!periodo.activo && (
                        <div className="text-right text-sm text-gray-500">
                          <p>Per√≠odo cerrado</p>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      </div>

      {/* Modal de Confirmaci√≥n de Cierre */}
      {mostrarModalCierre && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">
                üîí Confirmar Cierre de Per√≠odo
              </h3>
              <p className="text-gray-600 mt-1">
                Esta acci√≥n cerrar√° el per√≠odo actual y crear√° uno nuevo
              </p>
            </div>

            <div className="p-6">
              {ventasPendientes.length > 0 ? (
                <div>
                  <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                    <h4 className="font-medium text-yellow-800 mb-2">
                      ‚ö†Ô∏è Ventas que se migrar√°n al nuevo per√≠odo
                    </h4>
                    <p className="text-yellow-700 text-sm">
                      Las siguientes {ventasPendientes.length} ventas tienen
                      saldo pendiente y se migrar√°n al nuevo per√≠odo:
                    </p>
                  </div>

                  <div className="max-h-60 overflow-y-auto space-y-2 mb-4">
                    {ventasPendientes.map((venta) => (
                      <div
                        key={venta.id}
                        className="border rounded-lg p-3 bg-gray-50"
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <p className="font-medium">{venta.numero_venta}</p>
                            <p className="text-sm text-gray-600">
                              {venta.cliente_nombre}
                            </p>
                          </div>
                          <div className="text-right">
                            <p className="font-medium text-red-600">
                              {formatearDinero(venta.saldo_restante)}
                            </p>
                            <p className="text-xs text-gray-500">
                              Saldo pendiente
                            </p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                    <h4 className="font-medium text-blue-800 mb-2">
                      üìã Resumen de Migraci√≥n
                    </h4>
                    <div className="text-blue-700 text-sm space-y-1">
                      <p>
                        ‚Ä¢ Se crear√°n {ventasPendientes.length} nuevas ventas en
                        el nuevo per√≠odo
                      </p>
                      <p>
                        ‚Ä¢ El saldo pendiente se convertir√° en el nuevo costo
                        total
                      </p>
                      <p>‚Ä¢ Los dep√≥sitos se resetear√°n a $0.00</p>
                      <p>
                        ‚Ä¢ Monto total a migrar:{" "}
                        <span className="font-medium">
                          {formatearDinero(
                            ventasPendientes.reduce(
                              (sum, v) => sum + parseFloat(v.saldo_restante),
                              0
                            )
                          )}
                        </span>
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                  <h4 className="font-medium text-green-800 mb-2">
                    ‚úÖ No hay ventas pendientes
                  </h4>
                  <p className="text-green-700 text-sm">
                    Todas las ventas del per√≠odo actual est√°n completamente
                    pagadas. Se crear√° un nuevo per√≠odo sin migrar ventas.
                  </p>
                </div>
              )}
            </div>

            <div className="p-6 border-t border-gray-200 flex justify-end gap-3">
              <button
                onClick={() => setMostrarModalCierre(false)}
                className="btn btn-secondary"
                disabled={cargandoCierre}
              >
                Cancelar
              </button>
              <button
                onClick={confirmarCierrePeriodo}
                className={`btn btn-primary ${
                  cargandoCierre ? "opacity-50 cursor-not-allowed" : ""
                }`}
                disabled={cargandoCierre}
              >
                {cargandoCierre ? (
                  <div className="flex items-center">
                    <div className="spinner mr-2"></div>
                    Cerrando Per√≠odo...
                  </div>
                ) : (
                  "üîí Confirmar Cierre"
                )}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}



================================================
File: src/components/reportes/GeneradorReportes.js
================================================
"use client";

import { useState, useEffect } from "react";

export default function GeneradorReportes() {
  const [periodos, setPeriodos] = useState([]);
  const [configuracion, setConfiguracion] = useState({
    tipo_reporte: "general",
    metodo_filtro: "periodo", // periodo, fecha_personalizada
    periodo_id: "",
    fecha_inicio: "",
    fecha_fin: "",
  });

  const [vistaPreviaGenerando, setVistaPreviaGenerando] = useState(false);
  const [descargando, setDescargando] = useState(false);
  const [vistaPrevia, setVistaPrevia] = useState(null);
  const [error, setError] = useState("");

  // Tipos de reportes disponibles
  const tiposReporte = [
    {
      valor: "general",
      label: "üìä Reporte General",
      descripcion: "Todas las ventas del per√≠odo seleccionado",
      icono: "üìã",
    },
    {
      valor: "efectivo",
      label: "üíµ Dep√≥sitos en Efectivo",
      descripcion: "Solo dep√≥sitos pagados en efectivo",
      icono: "üíµ",
    },
    {
      valor: "tarjeta",
      label: "üí≥ Dep√≥sitos con Tarjeta",
      descripcion: "Solo dep√≥sitos pagados con tarjeta",
      icono: "üí≥",
    },
    {
      valor: "transferencia",
      label: "üè¶ Dep√≥sitos por Transferencia",
      descripcion: "Solo dep√≥sitos por transferencia bancaria",
      icono: "üè¶",
    },
    {
      valor: "todos",
      label: "üìÅ Reporte Completo",
      descripcion:
        "Archivo Excel con todas las hojas (recomendado para contador)",
      icono: "üìÅ",
    },
  ];

  useEffect(() => {
    cargarPeriodos();
  }, []);

  const cargarPeriodos = async () => {
    try {
      const respuesta = await fetch("/api/periodos", {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setPeriodos(datos.periodos);

        // Seleccionar per√≠odo activo por defecto
        const periodoActivo = datos.periodo_activo;
        if (periodoActivo) {
          setConfiguracion((prev) => ({
            ...prev,
            periodo_id: periodoActivo.id,
          }));
        }
      }
    } catch (error) {
      console.error("Error cargando per√≠odos:", error);
    }
  };

  const manejarCambio = (campo, valor) => {
    setConfiguracion((prev) => ({
      ...prev,
      [campo]: valor,
    }));

    // Limpiar vista previa cuando cambia la configuraci√≥n
    setVistaPrevia(null);
    setError("");
  };

  const validarConfiguracion = () => {
    if (
      configuracion.metodo_filtro === "periodo" &&
      !configuracion.periodo_id
    ) {
      setError("Debe seleccionar un per√≠odo");
      return false;
    }

    if (configuracion.metodo_filtro === "fecha_personalizada") {
      if (!configuracion.fecha_inicio || !configuracion.fecha_fin) {
        setError("Debe especificar fecha de inicio y fin");
        return false;
      }

      if (
        new Date(configuracion.fecha_inicio) > new Date(configuracion.fecha_fin)
      ) {
        setError("La fecha de inicio debe ser anterior a la fecha de fin");
        return false;
      }
    }

    setError("");
    return true;
  };

  const generarVistaPrevia = async () => {
    if (!validarConfiguracion()) {
      return;
    }

    setVistaPreviaGenerando(true);
    try {
      const parametros = {
        tipo: configuracion.tipo_reporte,
        ...(configuracion.metodo_filtro === "periodo" && {
          periodo_id: configuracion.periodo_id,
        }),
        ...(configuracion.metodo_filtro === "fecha_personalizada" && {
          fecha_inicio: configuracion.fecha_inicio,
          fecha_fin: configuracion.fecha_fin,
        }),
      };

      const respuesta = await fetch("/api/reportes/excel", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(parametros),
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setVistaPrevia(datos);
        setError("");
      } else {
        const errorData = await respuesta.json();
        setError(errorData.error || "Error generando vista previa");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setVistaPreviaGenerando(false);
    }
  };

  const descargarReporte = async () => {
    if (!validarConfiguracion()) {
      return;
    }

    setDescargando(true);
    try {
      const parametros = new URLSearchParams({
        tipo: configuracion.tipo_reporte,
        ...(configuracion.metodo_filtro === "periodo" && {
          periodo_id: configuracion.periodo_id,
        }),
        ...(configuracion.metodo_filtro === "fecha_personalizada" && {
          fecha_inicio: configuracion.fecha_inicio,
          fecha_fin: configuracion.fecha_fin,
        }),
      });

      const respuesta = await fetch(`/api/reportes/excel?${parametros}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        // Crear blob del archivo Excel
        const blob = await respuesta.blob();
        const url = window.URL.createObjectURL(blob);

        // Obtener nombre del archivo desde los headers
        const contentDisposition = respuesta.headers.get("content-disposition");
        let nombreArchivo = "reporte.xlsx";
        if (contentDisposition) {
          const match = contentDisposition.match(/filename="(.+)"/);
          if (match) {
            nombreArchivo = match[1];
          }
        }

        // Crear enlace de descarga
        const enlaceDescarga = document.createElement("a");
        enlaceDescarga.href = url;
        enlaceDescarga.download = nombreArchivo;
        document.body.appendChild(enlaceDescarga);
        enlaceDescarga.click();

        // Limpiar
        window.URL.revokeObjectURL(url);
        document.body.removeChild(enlaceDescarga);

        setError("");
      } else {
        const errorData = await respuesta.json();
        setError(errorData.error || "Error descargando reporte");
      }
    } catch (error) {
      setError("Error de conexi√≥n al descargar");
    } finally {
      setDescargando(false);
    }
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad) return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const obtenerTipoReporte = () => {
    return (
      tiposReporte.find((t) => t.valor === configuracion.tipo_reporte) ||
      tiposReporte[0]
    );
  };

  const obtenerPeriodoSeleccionado = () => {
    return periodos.find((p) => p.id === configuracion.periodo_id);
  };

  return (
    <div className="space-y-6">
      {/* Configuraci√≥n del Reporte */}
      <div className="bg-white rounded-lg shadow">
        <div className="p-6 border-b border-gray-200">
          <h2 className="text-xl font-bold text-gray-900">
            üìä Configuraci√≥n de Reporte
          </h2>
          <p className="text-gray-600 mt-1">
            Selecciona el tipo de reporte y per√≠odo para generar
          </p>
        </div>

        <div className="p-6 space-y-6">
          {/* Tipo de Reporte */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Tipo de Reporte
            </label>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {tiposReporte.map((tipo) => (
                <div
                  key={tipo.valor}
                  onClick={() => manejarCambio("tipo_reporte", tipo.valor)}
                  className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${
                    configuracion.tipo_reporte === tipo.valor
                      ? "border-blue-500 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  <div className="flex items-start gap-3">
                    <div className="text-2xl">{tipo.icono}</div>
                    <div>
                      <h3 className="font-medium text-gray-900">
                        {tipo.label}
                      </h3>
                      <p className="text-xs text-gray-600 mt-1">
                        {tipo.descripcion}
                      </p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* M√©todo de Filtro */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-3">
              Filtrar por
            </label>
            <div className="flex gap-4">
              <label className="flex items-center">
                <input
                  type="radio"
                  name="metodo_filtro"
                  value="periodo"
                  checked={configuracion.metodo_filtro === "periodo"}
                  onChange={(e) =>
                    manejarCambio("metodo_filtro", e.target.value)
                  }
                  className="h-4 w-4 text-blue-600"
                />
                <span className="ml-2 text-sm">üìÖ Per√≠odo Contable</span>
              </label>

              <label className="flex items-center">
                <input
                  type="radio"
                  name="metodo_filtro"
                  value="fecha_personalizada"
                  checked={
                    configuracion.metodo_filtro === "fecha_personalizada"
                  }
                  onChange={(e) =>
                    manejarCambio("metodo_filtro", e.target.value)
                  }
                  className="h-4 w-4 text-blue-600"
                />
                <span className="ml-2 text-sm">üóìÔ∏è Fechas Personalizadas</span>
              </label>
            </div>
          </div>

          {/* Selecci√≥n de Per√≠odo */}
          {configuracion.metodo_filtro === "periodo" && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Per√≠odo Contable
              </label>
              <select
                value={configuracion.periodo_id}
                onChange={(e) => manejarCambio("periodo_id", e.target.value)}
                className="form-input"
              >
                <option value="">Seleccionar per√≠odo...</option>
                {periodos.map((periodo) => (
                  <option key={periodo.id} value={periodo.id}>
                    {periodo.nombre} {periodo.activo && "(Activo)"}
                  </option>
                ))}
              </select>
            </div>
          )}

          {/* Fechas Personalizadas */}
          {configuracion.metodo_filtro === "fecha_personalizada" && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Inicio
                </label>
                <input
                  type="date"
                  value={configuracion.fecha_inicio}
                  onChange={(e) =>
                    manejarCambio("fecha_inicio", e.target.value)
                  }
                  className="form-input"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha de Fin
                </label>
                <input
                  type="date"
                  value={configuracion.fecha_fin}
                  onChange={(e) => manejarCambio("fecha_fin", e.target.value)}
                  className="form-input"
                />
              </div>
            </div>
          )}

          {/* Error */}
          {error && (
            <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-md text-sm">
              {error}
            </div>
          )}

          {/* Botones */}
          <div className="flex gap-3">
            <button
              onClick={generarVistaPrevia}
              disabled={vistaPreviaGenerando}
              className={`btn btn-secondary ${
                vistaPreviaGenerando ? "opacity-50 cursor-not-allowed" : ""
              }`}
            >
              {vistaPreviaGenerando ? (
                <div className="flex items-center">
                  <div className="spinner mr-2"></div>
                  Generando Vista Previa...
                </div>
              ) : (
                "üëÅÔ∏è Vista Previa"
              )}
            </button>

            <button
              onClick={descargarReporte}
              disabled={descargando || vistaPreviaGenerando}
              className={`btn btn-primary ${
                descargando || vistaPreviaGenerando
                  ? "opacity-50 cursor-not-allowed"
                  : ""
              }`}
            >
              {descargando ? (
                <div className="flex items-center">
                  <div className="spinner mr-2"></div>
                  Descargando...
                </div>
              ) : (
                "üì• Descargar Excel"
              )}
            </button>
          </div>
        </div>
      </div>

      {/* Vista Previa */}
      {vistaPrevia && (
        <div className="bg-white rounded-lg shadow">
          <div className="p-6 border-b border-gray-200">
            <h2 className="text-xl font-bold text-gray-900">
              üëÅÔ∏è Vista Previa del Reporte
            </h2>
            <div className="flex items-center gap-4 mt-2 text-sm text-gray-600">
              <span>
                {obtenerTipoReporte().icono} {obtenerTipoReporte().label}
              </span>
              <span>‚Ä¢</span>
              <span>üìÖ {vistaPrevia.periodo_nombre}</span>
              <span>‚Ä¢</span>
              <span>
                üïí{" "}
                {new Date(vistaPrevia.fecha_generacion).toLocaleString("es-MX")}
              </span>
            </div>
          </div>

          <div className="p-6">
            {/* Estad√≠sticas Generales */}
            {vistaPrevia.estadisticas && (
              <div className="mb-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">
                  üìä Estad√≠sticas del Reporte
                </h3>

                {configuracion.tipo_reporte === "general" && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">
                        {vistaPrevia.estadisticas.total_ventas}
                      </div>
                      <div className="text-xs text-blue-800">Total Ventas</div>
                    </div>

                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">
                        {formatearDinero(
                          vistaPrevia.estadisticas.total_vendido
                        )}
                      </div>
                      <div className="text-xs text-green-800">
                        Monto Vendido
                      </div>
                    </div>

                    <div className="text-center p-3 bg-purple-50 rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">
                        {formatearDinero(
                          vistaPrevia.estadisticas.total_depositado
                        )}
                      </div>
                      <div className="text-xs text-purple-800">
                        Total Cobrado
                      </div>
                    </div>

                    <div className="text-center p-3 bg-red-50 rounded-lg">
                      <div className="text-2xl font-bold text-red-600">
                        {formatearDinero(
                          vistaPrevia.estadisticas.total_pendiente
                        )}
                      </div>
                      <div className="text-xs text-red-800">Por Cobrar</div>
                    </div>
                  </div>
                )}

                {(configuracion.tipo_reporte === "efectivo" ||
                  configuracion.tipo_reporte === "tarjeta" ||
                  configuracion.tipo_reporte === "transferencia") && (
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">
                        {vistaPrevia.estadisticas.total_depositos}
                      </div>
                      <div className="text-xs text-blue-800">
                        Total Dep√≥sitos
                      </div>
                    </div>

                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">
                        {formatearDinero(
                          vistaPrevia.estadisticas.monto_total_metodo
                        )}
                      </div>
                      <div className="text-xs text-green-800">
                        Monto {vistaPrevia.metodo_pago}
                      </div>
                    </div>

                    <div className="text-center p-3 bg-purple-50 rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">
                        {vistaPrevia.estadisticas.ventas_con_metodo}
                      </div>
                      <div className="text-xs text-purple-800">
                        Ventas con este m√©todo
                      </div>
                    </div>

                    <div className="text-center p-3 bg-orange-50 rounded-lg">
                      <div className="text-2xl font-bold text-orange-600">
                        {vistaPrevia.estadisticas.porcentaje_del_total.toFixed(
                          1
                        )}
                        %
                      </div>
                      <div className="text-xs text-orange-800">Del total</div>
                    </div>
                  </div>
                )}

                {configuracion.tipo_reporte === "todos" &&
                  vistaPrevia.general && (
                    <div className="space-y-4">
                      <h4 className="font-medium text-gray-900">
                        üìã Resumen General
                      </h4>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                        <div className="text-center p-3 bg-blue-50 rounded-lg">
                          <div className="text-xl font-bold text-blue-600">
                            {vistaPrevia.general.estadisticas.total_ventas}
                          </div>
                          <div className="text-xs text-blue-800">Ventas</div>
                        </div>
                        <div className="text-center p-3 bg-green-50 rounded-lg">
                          <div className="text-xl font-bold text-green-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas.total_vendido
                            )}
                          </div>
                          <div className="text-xs text-green-800">Vendido</div>
                        </div>
                        <div className="text-center p-3 bg-purple-50 rounded-lg">
                          <div className="text-xl font-bold text-purple-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas.total_depositado
                            )}
                          </div>
                          <div className="text-xs text-purple-800">Cobrado</div>
                        </div>
                        <div className="text-center p-3 bg-red-50 rounded-lg">
                          <div className="text-xl font-bold text-red-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas.total_pendiente
                            )}
                          </div>
                          <div className="text-xs text-red-800">Pendiente</div>
                        </div>
                      </div>

                      <div className="grid grid-cols-3 gap-4 mt-4">
                        <div className="text-center p-3 bg-green-50 rounded-lg">
                          <div className="text-lg font-bold text-green-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas
                                .depositos_por_metodo.efectivo
                            )}
                          </div>
                          <div className="text-xs text-green-800">
                            üíµ Efectivo
                          </div>
                        </div>
                        <div className="text-center p-3 bg-blue-50 rounded-lg">
                          <div className="text-lg font-bold text-blue-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas
                                .depositos_por_metodo.tarjeta
                            )}
                          </div>
                          <div className="text-xs text-blue-800">
                            üí≥ Tarjeta
                          </div>
                        </div>
                        <div className="text-center p-3 bg-purple-50 rounded-lg">
                          <div className="text-lg font-bold text-purple-600">
                            {formatearDinero(
                              vistaPrevia.general.estadisticas
                                .depositos_por_metodo.transferencia
                            )}
                          </div>
                          <div className="text-xs text-purple-800">
                            üè¶ Transferencia
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
              </div>
            )}

            {/* Confirmaci√≥n para descarga */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <div className="text-green-600 text-xl">‚úÖ</div>
                <div>
                  <h4 className="font-medium text-green-800 mb-1">
                    Vista previa generada correctamente
                  </h4>
                  <p className="text-green-700 text-sm mb-3">
                    Los datos est√°n listos para descargar. El archivo Excel
                    contendr√° toda la informaci√≥n mostrada arriba.
                  </p>

                  <button
                    onClick={descargarReporte}
                    disabled={descargando}
                    className={`btn btn-primary btn-sm ${
                      descargando ? "opacity-50 cursor-not-allowed" : ""
                    }`}
                  >
                    {descargando ? (
                      <div className="flex items-center">
                        <div className="spinner mr-2"></div>
                        Descargando...
                      </div>
                    ) : (
                      "üì• Descargar Reporte Excel"
                    )}
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}



================================================
File: src/components/tablas/HistorialDepositos.js
================================================
"use client";

import { useState, useEffect } from "react";

export default function HistorialDepositos({
  ventaId,
  mostrarFormulario = true,
  onDepositoAgregado = null,
}) {
  const [depositos, setDepositos] = useState([]);
  const [estadisticas, setEstadisticas] = useState(null);
  const [cargando, setCargando] = useState(true);
  const [error, setError] = useState("");
  const [mostrarFormNuevo, setMostrarFormNuevo] = useState(false);
  const [depositoEditando, setDepositoEditando] = useState(null);

  // Estado del formulario
  const [formDeposito, setFormDeposito] = useState({
    monto: "",
    metodo_pago: "efectivo",
    fecha_deposito: new Date().toISOString().split("T")[0],
    notas: "",
  });

  const [errores, setErrores] = useState({});
  const [guardando, setGuardando] = useState(false);

  // M√©todos de pago disponibles
  const metodosPago = [
    {
      valor: "efectivo",
      label: "Efectivo",
      color: "bg-green-100 text-green-800",
      icono: "üíµ",
    },
    {
      valor: "tarjeta",
      label: "Tarjeta",
      color: "bg-blue-100 text-blue-800",
      icono: "üí≥",
    },
    {
      valor: "transferencia",
      label: "Transferencia",
      color: "bg-purple-100 text-purple-800",
      icono: "üè¶",
    },
  ];

  useEffect(() => {
    if (ventaId) {
      cargarDepositos();
    }
  }, [ventaId]);

  const cargarDepositos = async () => {
    setCargando(true);
    try {
      const respuesta = await fetch(`/api/depositos?venta_id=${ventaId}`, {
        credentials: "include",
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();
        setDepositos(datos.depositos);
        setEstadisticas(datos.estadisticas);
        setError("");
      } else {
        setError("Error cargando dep√≥sitos");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setCargando(false);
    }
  };

  const formatearDinero = (cantidad) => {
    if (!cantidad) return "$0.00";
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(parseFloat(cantidad));
  };

  const obtenerMetodoPago = (metodo) => {
    return metodosPago.find((m) => m.valor === metodo) || metodosPago[0];
  };

  const manejarCambio = (evento) => {
    const { name, value } = evento.target;
    setFormDeposito((prev) => ({
      ...prev,
      [name]: value,
    }));

    // Limpiar errores
    if (errores[name]) {
      setErrores((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validarFormulario = () => {
    const nuevosErrores = {};

    if (!formDeposito.monto || parseFloat(formDeposito.monto) <= 0) {
      nuevosErrores.monto = "Monto debe ser mayor a 0";
    }

    if (
      estadisticas &&
      parseFloat(formDeposito.monto) > estadisticas.saldo_restante
    ) {
      nuevosErrores.monto = `No puede exceder el saldo restante: ${formatearDinero(
        estadisticas.saldo_restante
      )}`;
    }

    if (!formDeposito.fecha_deposito) {
      nuevosErrores.fecha_deposito = "Fecha es requerida";
    }

    setErrores(nuevosErrores);
    return Object.keys(nuevosErrores).length === 0;
  };

  const manejarSubmit = async (evento) => {
    evento.preventDefault();

    if (!validarFormulario()) {
      return;
    }

    setGuardando(true);

    try {
      const url = depositoEditando ? `/api/depositos` : `/api/depositos`;

      const metodo = depositoEditando ? "PUT" : "POST";

      const datosEnviar = {
        ...formDeposito,
        venta_id: ventaId,
        ...(depositoEditando && { id: depositoEditando.id }),
      };

      const respuesta = await fetch(url, {
        method: metodo,
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include",
        body: JSON.stringify(datosEnviar),
      });

      if (respuesta.ok) {
        const datos = await respuesta.json();

        // Recargar dep√≥sitos
        await cargarDepositos();

        // Limpiar formulario
        setFormDeposito({
          monto: "",
          metodo_pago: "efectivo",
          fecha_deposito: new Date().toISOString().split("T")[0],
          notas: "",
        });

        setMostrarFormNuevo(false);
        setDepositoEditando(null);

        // Notificar al componente padre
        if (onDepositoAgregado) {
          onDepositoAgregado(datos);
        }
      } else {
        const errorData = await respuesta.json();
        setError(errorData.error || "Error guardando dep√≥sito");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    } finally {
      setGuardando(false);
    }
  };

  const iniciarEdicion = (deposito) => {
    setDepositoEditando(deposito);
    setFormDeposito({
      monto: deposito.monto.toString(),
      metodo_pago: deposito.metodo_pago,
      fecha_deposito: deposito.fecha_deposito,
      notas: deposito.notas || "",
    });
    setMostrarFormNuevo(true);
  };

  const eliminarDeposito = async (depositoId) => {
    if (!confirm("¬øEst√° seguro de eliminar este dep√≥sito?")) {
      return;
    }

    try {
      const respuesta = await fetch(`/api/depositos?id=${depositoId}`, {
        method: "DELETE",
        credentials: "include",
      });

      if (respuesta.ok) {
        await cargarDepositos();
        if (onDepositoAgregado) {
          onDepositoAgregado({ tipo: "eliminacion" });
        }
      } else {
        setError("Error eliminando dep√≥sito");
      }
    } catch (error) {
      setError("Error de conexi√≥n");
    }
  };

  if (cargando) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="text-center">
          <div className="spinner mx-auto mb-4"></div>
          <p className="text-gray-500">Cargando historial de dep√≥sitos...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      {/* Encabezado con estad√≠sticas */}
      <div className="p-6 border-b border-gray-200">
        <div className="flex justify-between items-start mb-4">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">
              Historial de Dep√≥sitos ({depositos.length})
            </h3>
            <p className="text-sm text-gray-600">
              Control de abonos y pagos parciales
            </p>
          </div>

          {mostrarFormulario && (
            <button
              onClick={() => {
                setMostrarFormNuevo(true);
                setDepositoEditando(null);
                setFormDeposito({
                  monto: "",
                  metodo_pago: "efectivo",
                  fecha_deposito: new Date().toISOString().split("T")[0],
                  notas: "",
                });
              }}
              className="btn btn-primary btn-sm"
            >
              üí∞ Agregar Dep√≥sito
            </button>
          )}
        </div>

        {/* Estad√≠sticas */}
        {estadisticas && (
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-3 bg-blue-50 rounded-lg">
              <div className="text-lg font-bold text-blue-600">
                {estadisticas.total_depositos}
              </div>
              <div className="text-xs text-blue-800">Dep√≥sitos</div>
            </div>
            <div className="text-center p-3 bg-green-50 rounded-lg">
              <div className="text-lg font-bold text-green-600">
                {formatearDinero(estadisticas.total_depositado)}
              </div>
              <div className="text-xs text-green-800">Total Pagado</div>
            </div>
            <div className="text-center p-3 bg-red-50 rounded-lg">
              <div className="text-lg font-bold text-red-600">
                {formatearDinero(estadisticas.saldo_restante)}
              </div>
              <div className="text-xs text-red-800">Saldo Restante</div>
            </div>
            <div className="text-center p-3 bg-purple-50 rounded-lg">
              <div className="text-lg font-bold text-purple-600">
                {estadisticas.porcentaje_pagado.toFixed(1)}%
              </div>
              <div className="text-xs text-purple-800">Completado</div>
            </div>
          </div>
        )}
      </div>

      {/* Mensaje de error */}
      {error && (
        <div className="mx-6 mt-4 p-3 bg-red-50 text-red-700 rounded-md text-sm">
          {error}
        </div>
      )}

      {/* Formulario de nuevo dep√≥sito */}
      {mostrarFormNuevo && (
        <div className="p-6 border-b border-gray-200 bg-gray-50">
          <h4 className="text-md font-medium text-gray-900 mb-4">
            {depositoEditando ? "Editar Dep√≥sito" : "Agregar Nuevo Dep√≥sito"}
          </h4>

          <form onSubmit={manejarSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Monto *
                </label>
                <input
                  type="number"
                  step="0.01"
                  name="monto"
                  value={formDeposito.monto}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.monto ? "border-red-300" : ""
                  }`}
                  placeholder="0.00"
                  required
                />
                {errores.monto && (
                  <p className="text-red-600 text-xs mt-1">{errores.monto}</p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  M√©todo de Pago *
                </label>
                <select
                  name="metodo_pago"
                  value={formDeposito.metodo_pago}
                  onChange={manejarCambio}
                  className="form-input"
                  required
                >
                  {metodosPago.map((metodo) => (
                    <option key={metodo.valor} value={metodo.valor}>
                      {metodo.icono} {metodo.label}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Fecha del Dep√≥sito *
                </label>
                <input
                  type="date"
                  name="fecha_deposito"
                  value={formDeposito.fecha_deposito}
                  onChange={manejarCambio}
                  className={`form-input ${
                    errores.fecha_deposito ? "border-red-300" : ""
                  }`}
                  required
                />
                {errores.fecha_deposito && (
                  <p className="text-red-600 text-xs mt-1">
                    {errores.fecha_deposito}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Notas (Opcional)
                </label>
                <input
                  type="text"
                  name="notas"
                  value={formDeposito.notas}
                  onChange={manejarCambio}
                  className="form-input"
                  placeholder="Observaciones del dep√≥sito..."
                />
              </div>
            </div>

            <div className="flex justify-end gap-2">
              <button
                type="button"
                onClick={() => {
                  setMostrarFormNuevo(false);
                  setDepositoEditando(null);
                }}
                className="btn btn-secondary btn-sm"
                disabled={guardando}
              >
                Cancelar
              </button>
              <button
                type="submit"
                disabled={guardando}
                className={`btn btn-primary btn-sm ${
                  guardando ? "opacity-50 cursor-not-allowed" : ""
                }`}
              >
                {guardando ? (
                  <div className="flex items-center">
                    <div className="spinner mr-2"></div>
                    {depositoEditando ? "Actualizando..." : "Guardando..."}
                  </div>
                ) : depositoEditando ? (
                  "Actualizar Dep√≥sito"
                ) : (
                  "Guardar Dep√≥sito"
                )}
              </button>
            </div>
          </form>
        </div>
      )}

      {/* Lista de dep√≥sitos */}
      <div className="p-6">
        {depositos.length === 0 ? (
          <div className="text-center py-8 text-gray-500">
            <div className="text-4xl mb-2">üí∞</div>
            <p>No hay dep√≥sitos registrados</p>
            {mostrarFormulario && (
              <button
                onClick={() => setMostrarFormNuevo(true)}
                className="btn btn-primary btn-sm mt-2"
              >
                Agregar Primer Dep√≥sito
              </button>
            )}
          </div>
        ) : (
          <div className="space-y-3">
            {depositos.map((deposito) => {
              const metodoPago = obtenerMetodoPago(deposito.metodo_pago);
              return (
                <div
                  key={deposito.id}
                  className="border rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="text-2xl font-bold text-green-600">
                          {formatearDinero(deposito.monto)}
                        </span>
                        <span
                          className={`px-2 py-1 text-xs font-medium rounded-full ${metodoPago.color}`}
                        >
                          {metodoPago.icono} {metodoPago.label}
                        </span>
                      </div>

                      <div className="grid grid-cols-2 gap-4 text-sm text-gray-600">
                        <div>
                          <span className="font-medium">Fecha:</span>{" "}
                          {deposito.fecha_deposito_formato}
                        </div>
                        <div>
                          <span className="font-medium">Registrado:</span>{" "}
                          {deposito.fecha_registro_formato}
                        </div>
                      </div>

                      {deposito.notas && (
                        <div className="mt-2">
                          <span className="text-sm font-medium text-gray-700">
                            Notas:
                          </span>
                          <p className="text-sm text-gray-600 mt-1">
                            {deposito.notas}
                          </p>
                        </div>
                      )}
                    </div>

                    {mostrarFormulario && (
                      <div className="flex gap-2 ml-4">
                        <button
                          onClick={() => iniciarEdicion(deposito)}
                          className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                          title="Editar dep√≥sito"
                        >
                          ‚úèÔ∏è
                        </button>
                        <button
                          onClick={() => eliminarDeposito(deposito.id)}
                          className="text-red-600 hover:text-red-800 text-sm font-medium"
                          title="Eliminar dep√≥sito"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </div>
    </div>
  );
}



================================================
File: src/components/tablas/TablaClientes.js
================================================



================================================
File: src/components/tablas/TablaVentas.js
================================================



================================================
File: src/components/ui/EstadisticasDepositos.js
================================================
"use client";

import { useState, useEffect } from "react";

export default function EstadisticasDepositos({ periodo = "hoy" }) {
  const [estadisticas, setEstadisticas] = useState({
    depositos_hoy: 0,
    monto_efectivo: 0,
    monto_tarjeta: 0,
    monto_transferencia: 0,
    total_depositado: 0,
    ventas_pendientes: 0,
    monto_pendiente: 0,
  });
  const [cargando, setCargando] = useState(true);

  useEffect(() => {
    cargarEstadisticas();
  }, [periodo]);

  const cargarEstadisticas = async () => {
    setCargando(true);
    try {
      // Por ahora, datos de ejemplo. Despu√©s implementaremos la API real
      setTimeout(() => {
        setEstadisticas({
          depositos_hoy: 8,
          monto_efectivo: 3250.0,
          monto_tarjeta: 1800.0,
          monto_transferencia: 950.0,
          total_depositado: 6000.0,
          ventas_pendientes: 15,
          monto_pendiente: 12500.0,
        });
        setCargando(false);
      }, 1000);
    } catch (error) {
      console.error("Error cargando estad√≠sticas:", error);
      setCargando(false);
    }
  };

  const formatearDinero = (cantidad) => {
    return new Intl.NumberFormat("es-MX", {
      style: "currency",
      currency: "MXN",
    }).format(cantidad);
  };

  const metodosPago = [
    {
      metodo: "efectivo",
      label: "Efectivo",
      monto: estadisticas.monto_efectivo,
      color: "bg-green-100 text-green-800",
      icono: "üíµ",
    },
    {
      metodo: "tarjeta",
      label: "Tarjeta",
      monto: estadisticas.monto_tarjeta,
      color: "bg-blue-100 text-blue-800",
      icono: "üí≥",
    },
    {
      metodo: "transferencia",
      label: "Transferencia",
      monto: estadisticas.monto_transferencia,
      color: "bg-purple-100 text-purple-800",
      icono: "üè¶",
    },
  ];

  if (cargando) {
    return (
      <div className="bg-white rounded-lg shadow p-6">
        <div className="animate-pulse">
          <div className="h-4 bg-gray-200 rounded mb-4"></div>
          <div className="grid grid-cols-2 gap-4">
            <div className="h-16 bg-gray-200 rounded"></div>
            <div className="h-16 bg-gray-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow">
      <div className="p-6 border-b border-gray-200">
        <h3 className="text-lg font-semibold text-gray-900 flex items-center">
          üí∞ Control de Dep√≥sitos
          <span className="ml-2 text-sm font-normal text-gray-600">
            ({periodo})
          </span>
        </h3>
      </div>

      <div className="p-6">
        {/* Resumen general */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="text-center p-4 bg-blue-50 rounded-lg">
            <div className="text-2xl font-bold text-blue-600">
              {estadisticas.depositos_hoy}
            </div>
            <div className="text-sm text-blue-800">Dep√≥sitos Hoy</div>
          </div>

          <div className="text-center p-4 bg-green-50 rounded-lg">
            <div className="text-2xl font-bold text-green-600">
              {formatearDinero(estadisticas.total_depositado)}
            </div>
            <div className="text-sm text-green-800">Total Recaudado</div>
          </div>

          <div className="text-center p-4 bg-red-50 rounded-lg">
            <div className="text-2xl font-bold text-red-600">
              {formatearDinero(estadisticas.monto_pendiente)}
            </div>
            <div className="text-sm text-red-800">Por Cobrar</div>
          </div>
        </div>

        {/* Desglose por m√©todo de pago */}
        <div>
          <h4 className="text-sm font-medium text-gray-700 mb-3">
            Dep√≥sitos por M√©todo de Pago
          </h4>

          <div className="space-y-3">
            {metodosPago.map((metodo) => (
              <div
                key={metodo.metodo}
                className="flex justify-between items-center p-3 border rounded-lg"
              >
                <div className="flex items-center gap-3">
                  <span className="text-xl">{metodo.icono}</span>
                  <span className="font-medium text-gray-700">
                    {metodo.label}
                  </span>
                </div>

                <div className="text-right">
                  <div className="font-bold text-gray-900">
                    {formatearDinero(metodo.monto)}
                  </div>
                  <div className="text-xs text-gray-500">
                    {estadisticas.total_depositado > 0
                      ? (
                          (metodo.monto / estadisticas.total_depositado) *
                          100
                        ).toFixed(1)
                      : 0}
                    % del total
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Indicador de ventas pendientes */}
        {estadisticas.ventas_pendientes > 0 && (
          <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-2">
                <span className="text-yellow-600">‚ö†Ô∏è</span>
                <span className="text-sm font-medium text-yellow-800">
                  Ventas con saldo pendiente
                </span>
              </div>
              <div className="text-right">
                <div className="text-sm font-bold text-yellow-900">
                  {estadisticas.ventas_pendientes} ventas
                </div>
                <div className="text-xs text-yellow-700">
                  {formatearDinero(estadisticas.monto_pendiente)} por cobrar
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}



================================================
File: src/components/ui/Layout.js
================================================
'use client'

import { useState } from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import Navbar from './Navbar'

export default function Layout({ children }) {
  const pathname = usePathname()
  const [sidebarAbierto, setSidebarAbierto] = useState(false)

  const menuItems = [
    {
      nombre: 'Dashboard',
      href: '/',
      icono: 'üè†',
      activo: pathname === '/'
    },
    {
      nombre: 'Clientes',
      href: '/clientes',
      icono: 'üë•',
      activo: pathname.startsWith('/clientes')
    },
    {
      nombre: 'Ventas',
      href: '/ventas',
      icono: 'üõçÔ∏è',
      activo: pathname.startsWith('/ventas')
    },
    {
      nombre: 'Reportes',
      href: '/reportes',
      icono: 'üìä',
      activo: pathname.startsWith('/reportes')
    }
  ]

  return (
    <div className="flex h-screen bg-neutral-100">
      {/* Sidebar Desktop */}
      <div className="hidden lg:flex lg:flex-shrink-0">
        <div className="flex flex-col w-64">
          <div className="flex flex-col h-0 flex-1 bg-white border-r border-neutral-200">
            {/* Logo */}
            <div className="flex items-center h-16 flex-shrink-0 px-6 bg-optica-600">
              <div className="flex items-center">
                <span className="text-2xl">üëì</span>
                <h1 className="ml-2 text-xl font-bold text-white">
                  Sistema √ìptica
                </h1>
              </div>
            </div>

            {/* Navegaci√≥n */}
            <div className="flex-1 flex flex-col pt-5 pb-4 overflow-y-auto">
              <nav className="mt-5 flex-1 px-2 space-y-1">
                {menuItems.map((item) => (
                  <Link
                    key={item.nombre}
                    href={item.href}
                    className={`group flex items-center px-2 py-2 text-sm font-medium rounded-md transition-colors duration-150 ${
                      item.activo
                        ? 'bg-optica-50 text-optica-700 border-r-2 border-optica-500'
                        : 'text-neutral-700 hover:bg-neutral-50 hover:text-neutral-900'
                    }`}
                  >
                    <span className="mr-3 text-lg">{item.icono}</span>
                    {item.nombre}
                  </Link>
                ))}
              </nav>

              {/* Informaci√≥n del usuario */}
              <div className="flex-shrink-0 flex border-t border-neutral-200 p-4">
                <div className="flex items-center">
                  <div className="w-8 h-8 bg-optica-500 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-medium">A</span>
                  </div>
                  <div className="ml-3">
                    <p className="text-sm font-medium text-neutral-700">Admin</p>
                    <p className="text-xs text-neutral-500">Administrador</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Sidebar Mobile */}
      {sidebarAbierto && (
        <div className="fixed inset-0 flex z-40 lg:hidden">
          <div
            className="fixed inset-0 bg-neutral-600 bg-opacity-75"
            onClick={() => setSidebarAbierto(false)}
          />
          <div className="relative flex-1 flex flex-col max-w-xs w-full bg-white">
            {/* Logo Mobile */}
            <div className="flex items-center h-16 flex-shrink-0 px-4 bg-optica-600">
              <span className="text-2xl">üëì</span>
              <h1 className="ml-2 text-lg font-bold text-white">Sistema √ìptica</h1>
              <button
                className="ml-auto text-white hover:text-neutral-200"
                onClick={() => setSidebarAbierto(false)}
              >
                ‚úï
              </button>
            </div>

            {/* Navegaci√≥n Mobile */}
            <div className="flex-1 h-0 pt-5 pb-4 overflow-y-auto">
              <nav className="mt-5 px-2 space-y-1">
                {menuItems.map((item) => (
                  <Link
                    key={item.nombre}
                    href={item.href}
                    className={`group flex items-center px-2 py-2 text-base font-medium rounded-md ${
                      item.activo
                        ? 'bg-optica-50 text-optica-700'
                        : 'text-neutral-700 hover:bg-neutral-50'
                    }`}
                    onClick={() => setSidebarAbierto(false)}
                  >
                    <span className="mr-3 text-xl">{item.icono}</span>
                    {item.nombre}
                  </Link>
                ))}
              </nav>
            </div>
          </div>
        </div>
      )}

      {/* Contenido Principal */}
      <div className="flex flex-col w-0 flex-1 overflow-hidden">
        {/* Navbar */}
        <Navbar onToggleSidebar={() => setSidebarAbierto(!sidebarAbierto)} />

        {/* Contenido */}
        <main className="flex-1 relative overflow-y-auto focus:outline-none">
          {children}
        </main>
      </div>
    </div>
  )
}


================================================
File: src/components/ui/Loading.js
================================================



================================================
File: src/components/ui/Modal.js
================================================



================================================
File: src/components/ui/Navbar.js
================================================
"use client";

import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";

export default function Navbar({ onToggleSidebar }) {
  const router = useRouter();
  const [menuUsuarioAbierto, setMenuUsuarioAbierto] = useState(false);

  const manejarCerrarSesion = async () => {
    try {
      const respuesta = await fetch("/api/auth/logout", {
        method: "POST",
        credentials: "include",
      });

      if (respuesta.ok) {
        // Redirigir a login
        router.push("/login");
        router.refresh(); // Refrescar para limpiar estado
      } else {
        console.error("Error cerrando sesi√≥n");
      }
    } catch (error) {
      console.error("Error cerrando sesi√≥n:", error);
      // En caso de error, forzar redirecci√≥n
      router.push("/login");
    }
  };

  return (
    <div className="relative z-10 flex-shrink-0 flex h-16 bg-white shadow border-b border-neutral-200">
      {/* Bot√≥n men√∫ mobile */}
      <button
        className="px-4 border-r border-neutral-200 text-neutral-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-optica-500 lg:hidden"
        onClick={onToggleSidebar}
      >
        <span className="sr-only">Abrir sidebar</span>
        <svg
          className="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M4 6h16M4 12h16M4 18h16"
          />
        </svg>
      </button>

      <div className="flex-1 px-4 flex justify-between items-center">
        {/* Breadcrumb o t√≠tulo de p√°gina */}
        <div className="flex items-center">
          <h2 className="text-lg font-medium text-neutral-900">
            Sistema de Gesti√≥n
          </h2>
        </div>

        {/* √Årea derecha */}
        <div className="ml-4 flex items-center space-x-4">
          {/* Botones de acceso r√°pido */}
          {/* Botones de acceso r√°pido */}
          <div className="hidden md:flex items-center space-x-2">
            <Link
              href="/clientes/nuevo"
              className="btn btn-primary btn-sm"
              title="Nuevo Cliente"
            >
              üë§ Cliente
            </Link>

            <Link
              href="/clientes"
              className="btn btn-secondary btn-sm"
              title="Ver Clientes"
            >
              üë• Clientes
            </Link>

            <Link
              href="/ventas"
              className="btn btn-secondary btn-sm"
              title="Ver Ventas"
            >
              üõí Ventas
            </Link>

            <Link
              href="/periodos"
              className="btn btn-secondary btn-sm"
              title="Gesti√≥n de Per√≠odos"
            >
              üìÖ Per√≠odos
            </Link>
          </div>

          {/* Notificaciones */}
          <button className="p-1 rounded-full text-neutral-400 hover:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-optica-500">
            <span className="sr-only">Ver notificaciones</span>
            <div className="relative">
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 17h5l-5 5v-5zM15 17H9a4 4 0 01-4-4V9a4 4 0 014-4h4m2 0V3a1 1 0 011-1h2a1 1 0 011 1v2m0 0a1 1 0 01-1 1H16a1 1 0 01-1-1m0 0V3"
                />
              </svg>
              {/* Indicador de notificaciones */}
              <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-400 ring-2 ring-white"></span>
            </div>
          </button>

          {/* Men√∫ de usuario */}
          <div className="relative">
            <button
              className="max-w-xs bg-white rounded-full flex items-center text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-optica-500"
              onClick={() => setMenuUsuarioAbierto(!menuUsuarioAbierto)}
            >
              <span className="sr-only">Abrir men√∫ de usuario</span>
              <div className="h-8 w-8 rounded-full bg-optica-500 flex items-center justify-center">
                <span className="text-white text-sm font-medium">A</span>
              </div>
              <span className="hidden md:ml-3 md:block text-neutral-700 font-medium">
                Administrador
              </span>
              <svg
                className="hidden md:block ml-2 h-4 w-4 text-neutral-400"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
                />
              </svg>
            </button>

            {/* Dropdown del men√∫ de usuario */}
            {menuUsuarioAbierto && (
              <div className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none">
                <div className="py-1">
                  <div className="px-4 py-2 text-sm text-neutral-700 border-b border-neutral-100">
                    <p className="font-medium">Administrador</p>
                    <p className="text-neutral-500">admin@optica.com</p>
                  </div>

                  <button className="block w-full text-left px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-50">
                    ‚öôÔ∏è Configuraci√≥n
                  </button>

                  <button className="block w-full text-left px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-50">
                    üë§ Mi Perfil
                  </button>

                  <div className="border-t border-neutral-100"></div>

                  <button
                    onClick={manejarCerrarSesion}
                    className="block w-full text-left px-4 py-2 text-sm text-neutral-700 hover:bg-neutral-50"
                  >
                    üö™ Cerrar Sesi√≥n
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Cerrar men√∫ al hacer clic fuera */}
      {menuUsuarioAbierto && (
        <div
          className="fixed inset-0 z-10"
          onClick={() => setMenuUsuarioAbierto(false)}
        />
      )}
    </div>
  );
}



================================================
File: src/hooks/useApi.js
================================================



================================================
File: src/hooks/useAuth.js
================================================



================================================
File: src/lib/autenticacion.js
================================================
import jwt from 'jsonwebtoken';
import bcrypt from 'bcryptjs';
import { consultasUsuarios } from '@/lib/conexion-bd';

// Configuraci√≥n de JWT
const JWT_SECRET = process.env.JWT_SECRET || 'secreto-fallback-no-usar-en-produccion';
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d';
const MAX_INTENTOS = parseInt(process.env.MAX_LOGIN_ATTEMPTS) || 5;
const TIEMPO_BLOQUEO = parseInt(process.env.LOCKOUT_TIME_MINUTES) || 15;

// === FUNCIONES DE JWT ===

/**
 * Generar token JWT
 */
export function generarToken(payload) {
  return jwt.sign(payload, JWT_SECRET, { 
    expiresIn: JWT_EXPIRES_IN,
    issuer: 'optica-sistema',
    audience: 'usuario-optica'
  });
}

/**
 * Verificar token JWT
 */
export function verificarToken(token) {
  try {
    return jwt.verify(token, JWT_SECRET, {
      issuer: 'optica-sistema',
      audience: 'usuario-optica'
    });
  } catch (error) {
    throw new Error('Token inv√°lido: ' + error.message);
  }
}

/**
 * Decodificar token sin verificar (para obtener datos expirados)
 */
export function decodificarToken(token) {
  return jwt.decode(token);
}

// === FUNCIONES DE HASHING ===

/**
 * Hashear contrase√±a
 */
export async function hashearPassword(password) {
  const saltRounds = 10;
  return await bcrypt.hash(password, saltRounds);
}

/**
 * Verificar contrase√±a
 */
export async function verificarPassword(password, hash) {
  return await bcrypt.compare(password, hash);
}

// === FUNCIONES DE AUTENTICACI√ìN ===

/**
 * Autenticar usuario - Funci√≥n principal de login
 */
export async function autenticarUsuario(nombreUsuario, password) {
  try {
    // 1. Obtener usuario de la base de datos
    const usuario = await consultasUsuarios.obtenerPorNombre(nombreUsuario);
    
    if (!usuario) {
      throw new Error('Usuario no encontrado');
    }

    // 2. Verificar si el usuario est√° activo
    if (!usuario.activo) {
      throw new Error('Usuario inactivo');
    }

    // 3. Verificar si el usuario est√° bloqueado
    if (usuario.bloqueado_hasta && new Date() < new Date(usuario.bloqueado_hasta)) {
      const minutosRestantes = Math.ceil(
        (new Date(usuario.bloqueado_hasta) - new Date()) / (1000 * 60)
      );
      throw new Error(`Usuario bloqueado. Intente en ${minutosRestantes} minutos.`);
    }

    // 4. Verificar contrase√±a
    const passwordValido = await verificarPassword(password, usuario.password_hash);
    
    if (!passwordValido) {
      // Incrementar intentos fallidos
      const nuevosIntentos = (usuario.intentos_fallidos || 0) + 1;
      let bloqueoHasta = null;
      
      if (nuevosIntentos >= MAX_INTENTOS) {
        bloqueoHasta = new Date(Date.now() + (TIEMPO_BLOQUEO * 60 * 1000));
      }
      
      await consultasUsuarios.actualizarIntentos(usuario.id, nuevosIntentos, bloqueoHasta);
      
      if (bloqueoHasta) {
        throw new Error(`Demasiados intentos fallidos. Usuario bloqueado por ${TIEMPO_BLOQUEO} minutos.`);
      }
      
      throw new Error(`Contrase√±a incorrecta. ${MAX_INTENTOS - nuevosIntentos} intentos restantes.`);
    }

    // 5. Login exitoso - resetear intentos
    if (usuario.intentos_fallidos > 0) {
      await consultasUsuarios.resetearIntentos(usuario.id);
    }

    // 6. Generar token JWT
    const payload = {
      id: usuario.id,
      nombreUsuario: usuario.nombre_usuario,
      nombreCompleto: usuario.nombre_completo
    };

    const token = generarToken(payload);

    return {
      token,
      usuario: {
        id: usuario.id,
        nombreUsuario: usuario.nombre_usuario,
        nombreCompleto: usuario.nombre_completo
      }
    };

  } catch (error) {
    throw error;
  }
}

/**
 * Verificar token y obtener usuario
 */
export async function obtenerUsuarioDeToken(token) {
  try {
    const payload = verificarToken(token);
    const usuario = await consultasUsuarios.obtenerPorNombre(payload.nombreUsuario);
    
    if (!usuario || !usuario.activo) {
      throw new Error('Usuario no encontrado o inactivo');
    }

    return {
      id: usuario.id,
      nombreUsuario: usuario.nombre_usuario,
      nombreCompleto: usuario.nombre_completo
    };
  } catch (error) {
    throw new Error('Token inv√°lido o usuario no encontrado');
  }
}

// === MIDDLEWARE DE VALIDACI√ìN ===

/**
 * Validar datos de login
 */
export function validarDatosLogin(nombreUsuario, password) {
  const errores = [];

  if (!nombreUsuario || nombreUsuario.trim().length === 0) {
    errores.push('Nombre de usuario requerido');
  }

  if (!password || password.length === 0) {
    errores.push('Contrase√±a requerida');
  }

  if (nombreUsuario && nombreUsuario.length < 3) {
    errores.push('Nombre de usuario debe tener al menos 3 caracteres');
  }

  if (password && password.length < 6) {
    errores.push('Contrase√±a debe tener al menos 6 caracteres');
  }

  return {
    esValido: errores.length === 0,
    errores
  };
}

// === UTILIDADES DE SEGURIDAD ===

/**
 * Generar n√∫mero de expediente √∫nico
 */
export function generarNumeroExpediente() {
  const fecha = new Date();
  const a√±o = fecha.getFullYear();
  const mes = String(fecha.getMonth() + 1).padStart(2, '0');
  const dia = String(fecha.getDate()).padStart(2, '0');
  const timestamp = Date.now().toString().slice(-4);
  
  return `EXP-${a√±o}${mes}${dia}-${timestamp}`;
}

/**
 * Generar n√∫mero de venta √∫nico
 */
export function generarNumeroVenta() {
  const fecha = new Date();
  const a√±o = fecha.getFullYear();
  const mes = String(fecha.getMonth() + 1).padStart(2, '0');
  const dia = String(fecha.getDate()).padStart(2, '0');
  const timestamp = Date.now().toString().slice(-4);
  
  return `VTA-${a√±o}${mes}${dia}-${timestamp}`;
}

/**
 * Validar formato de email
 */
export function validarEmail(email) {
  const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return regex.test(email);
}

/**
 * Validar formato de tel√©fono
 */
export function validarTelefono(telefono) {
  const regex = /^[\d\s\-\(\)\+]+$/;
  return regex.test(telefono) && telefono.replace(/\D/g, '').length >= 10;
}

/**
 * Sanitizar entrada de texto
 */
export function sanitizarTexto(texto) {
  if (!texto) return texto;
  return texto.trim().replace(/[<>\"']/g, '');
}

/**
 * Validar y formatear fecha
 */
export function validarFecha(fecha) {
  if (!fecha) return null;
  const fechaObj = new Date(fecha);
  return isNaN(fechaObj.getTime()) ? null : fechaObj;
}

export default {
  generarToken,
  verificarToken,
  hashearPassword,
  verificarPassword,
  autenticarUsuario,
  obtenerUsuarioDeToken,
  validarDatosLogin,
  generarNumeroExpediente,
  generarNumeroVenta,
  validarEmail,
  validarTelefono,
  sanitizarTexto,
  validarFecha
};


================================================
File: src/lib/conexion-bd.js
================================================
import { Pool } from "pg";

// Configuraci√≥n con los datos exactos de NEON
const pool = new Pool({
  host: "ep-sweet-leaf-ad5ujtjh-pooler.c-2.us-east-1.aws.neon.tech",
  port: 5432,
  database: "neondb",
  user: "neondb_owner",
  password: "npg_pRmuL2hCJ6aP",
  ssl: {
    require: true,
    rejectUnauthorized: false,
  },
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

export async function ejecutarConsulta(texto, parametros = []) {
  const cliente = await pool.connect();
  try {
    const resultado = await cliente.query(texto, parametros);
    return resultado;
  } catch (error) {
    console.error("Error en consulta SQL:", error);
    throw error;
  } finally {
    cliente.release();
  }
}

// === CONSULTAS PARA USUARIOS ===
export const consultasUsuarios = {
  // Obtener usuario por nombre de usuario
  obtenerPorNombre: async (nombreUsuario) => {
    const consulta = `
      SELECT id, nombre_usuario, password_hash, nombre_completo, 
             activo, intentos_fallidos, bloqueado_hasta
      FROM usuarios 
      WHERE nombre_usuario = $1
    `;
    const resultado = await ejecutarConsulta(consulta, [nombreUsuario]);
    return resultado.rows[0];
  },

  // Actualizar intentos fallidos
  actualizarIntentos: async (id, intentos, bloqueoHasta = null) => {
    const consulta = `
      UPDATE usuarios 
      SET intentos_fallidos = $2, bloqueado_hasta = $3, fecha_actualizacion = NOW()
      WHERE id = $1
    `;
    await ejecutarConsulta(consulta, [id, intentos, bloqueoHasta]);
  },

  // Resetear intentos fallidos
  resetearIntentos: async (id) => {
    const consulta = `
      UPDATE usuarios 
      SET intentos_fallidos = 0, bloqueado_hasta = NULL, fecha_actualizacion = NOW()
      WHERE id = $1
    `;
    await ejecutarConsulta(consulta, [id]);
  },
};

export async function verificarConexion() {
  try {
    await ejecutarConsulta("SELECT NOW()");
    console.log("Conexi√≥n a base de datos exitosa");
    return true;
  } catch (error) {
    console.error("Error conectando a base de datos:", error.message);
    return false;
  }
}

// === FUNCI√ìN PARA TRANSACCIONES ===
export async function ejecutarTransaccion(callback) {
  const cliente = await pool.connect();
  try {
    await cliente.query("BEGIN");
    const resultado = await callback(cliente);
    await cliente.query("COMMIT");
    return resultado;
  } catch (error) {
    await cliente.query("ROLLBACK");
    console.error("Error en transacci√≥n:", error);
    throw error;
  } finally {
    cliente.release();
  }
}

export default pool;



================================================
File: src/lib/utilidades.js
================================================
// === UTILIDADES DE FECHAS ===

/**
 * Formatear fecha para mostrar en interfaz
 */
export function formatearFecha(fecha, opciones = {}) {
  if (!fecha) return '';
  
  const fechaObj = new Date(fecha);
  const configuracion = {
    year: 'numeric',
    month: 'long', 
    day: 'numeric',
    ...opciones
  };
  
  return fechaObj.toLocaleDateString('es-MX', configuracion);
}

/**
 * Formatear fecha corta (dd/mm/yyyy)
 */
export function formatearFechaCorta(fecha) {
  if (!fecha) return '';
  const fechaObj = new Date(fecha);
  return fechaObj.toLocaleDateString('es-MX');
}

/**
 * Formatear fecha para input HTML
 */
export function formatearFechaInput(fecha) {
  if (!fecha) return '';
  const fechaObj = new Date(fecha);
  return fechaObj.toISOString().split('T')[0];
}

/**
 * Obtener nombre del mes
 */
export function obtenerNombreMes(numeroMes) {
  const meses = [
    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',
    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
  ];
  return meses[numeroMes - 1] || '';
}

/**
 * Generar nombre de per√≠odo contable
 */
export function generarNombrePeriodo(fechaInicio) {
  const fecha = new Date(fechaInicio);
  const mesActual = obtenerNombreMes(fecha.getMonth() + 1);
  const mesSiguiente = obtenerNombreMes(fecha.getMonth() + 2);
  return `${mesActual} / ${mesSiguiente}`;
}

// === UTILIDADES DE N√öMEROS ===

/**
 * Formatear dinero en pesos mexicanos
 */
export function formatearDinero(cantidad, incluirSimbolo = true) {
  if (cantidad === null || cantidad === undefined) return '$0.00';
  
  const numero = parseFloat(cantidad);
  const formateado = numero.toLocaleString('es-MX', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2
  });
  
  return incluirSimbolo ? `$${formateado}` : formateado;
}

/**
 * Calcular IMC (√çndice de Masa Corporal)
 */
export function calcularIMC(peso, talla) {
  if (!peso || !talla || peso <= 0 || talla <= 0) return null;
  
  const imc = peso / (talla * talla);
  return Math.round(imc * 100) / 100;
}

/**
 * Interpretar IMC
 */
export function interpretarIMC(imc) {
  if (!imc) return '';
  
  if (imc < 18.5) return 'Bajo peso';
  if (imc < 25) return 'Normal';
  if (imc < 30) return 'Sobrepeso';
  return 'Obesidad';
}

/**
 * Calcular edad desde fecha de nacimiento
 */
export function calcularEdad(fechaNacimiento) {
  if (!fechaNacimiento) return null;
  
  const nacimiento = new Date(fechaNacimiento);
  const hoy = new Date();
  let edad = hoy.getFullYear() - nacimiento.getFullYear();
  const mes = hoy.getMonth() - nacimiento.getMonth();
  
  if (mes < 0 || (mes === 0 && hoy.getDate() < nacimiento.getDate())) {
    edad--;
  }
  
  return edad;
}

// === UTILIDADES DE TEXTO ===

/**
 * Capitalizar primera letra
 */
export function capitalizarPrimera(texto) {
  if (!texto) return '';
  return texto.charAt(0).toUpperCase() + texto.slice(1).toLowerCase();
}

/**
 * Capitalizar cada palabra
 */
export function capitalizarPalabras(texto) {
  if (!texto) return '';
  return texto.split(' ')
    .map(palabra => capitalizarPrimera(palabra))
    .join(' ');
}

/**
 * Limpiar y formatear nombre completo
 */
export function formatearNombreCompleto(nombre) {
  if (!nombre) return '';
  return capitalizarPalabras(nombre.trim());
}

/**
 * Generar iniciales
 */
export function generarIniciales(nombre) {
  if (!nombre) return '';
  return nombre.split(' ')
    .map(palabra => palabra.charAt(0).toUpperCase())
    .slice(0, 2)
    .join('');
}

/**
 * Truncar texto
 */
export function truncarTexto(texto, longitud = 50) {
  if (!texto) return '';
  return texto.length > longitud ? texto.substring(0, longitud) + '...' : texto;
}

// === UTILIDADES DE ESTADO ===

/**
 * Obtener configuraci√≥n de estado de venta
 */
export function obtenerEstadoVenta(estado) {
  const estados = {
    pendiente: {
      label: 'Pendiente',
      color: 'bg-yellow-100 text-yellow-800',
      icono: '‚è≥'
    },
    en_laboratorio: {
      label: 'En Laboratorio',
      color: 'bg-blue-100 text-blue-800',
      icono: 'üî¨'
    },
    listo: {
      label: 'Listo',
      color: 'bg-green-100 text-green-800',
      icono: '‚úÖ'
    },
    entregado: {
      label: 'Entregado',
      color: 'bg-gray-100 text-gray-800',
      icono: 'üì¶'
    },
    cancelado: {
      label: 'Cancelado',
      color: 'bg-red-100 text-red-800',
      icono: '‚ùå'
    }
  };
  
  return estados[estado] || estados.pendiente;
}

/**
 * Obtener configuraci√≥n de m√©todo de pago
 */
export function obtenerMetodoPago(metodo) {
  const metodos = {
    efectivo: {
      label: 'Efectivo',
      color: 'bg-green-100 text-green-800',
      icono: 'üíµ'
    },
    tarjeta: {
      label: 'Tarjeta',
      color: 'bg-blue-100 text-blue-800',
      icono: 'üí≥'
    },
    transferencia: {
      label: 'Transferencia',
      color: 'bg-purple-100 text-purple-800',
      icono: 'üè¶'
    }
  };
  
  return metodos[metodo] || metodos.efectivo;
}

// === UTILIDADES DE VALIDACI√ìN ===

/**
 * Validar n√∫mero de tel√©fono mexicano
 */
export function validarTelefonoMexicano(telefono) {
  if (!telefono) return false;
  const limpio = telefono.replace(/\D/g, '');
  return limpio.length === 10 || (limpio.length === 12 && limpio.startsWith('52'));
}

/**
 * Formatear n√∫mero de tel√©fono
 */
export function formatearTelefono(telefono) {
  if (!telefono) return '';
  const limpio = telefono.replace(/\D/g, '');
  
  if (limpio.length === 10) {
    return limpio.replace(/(\d{3})(\d{3})(\d{4})/, '$1-$2-$3');
  }
  
  return telefono;
}

/**
 * Validar CURP mexicano (b√°sico)
 */
export function validarCURP(curp) {
  if (!curp) return false;
  const regex = /^[A-Z]{4}\d{6}[HM][A-Z]{5}[A-Z\d]\d$/;
  return regex.test(curp.toUpperCase());
}

// === UTILIDADES DE ARCHIVOS ===

/**
 * Obtener extensi√≥n de archivo
 */
export function obtenerExtension(nombreArchivo) {
  return nombreArchivo.split('.').pop().toLowerCase();
}

/**
 * Validar tipo de imagen
 */
export function esImagenValida(archivo) {
  const tiposPermitidos = ['jpg', 'jpeg', 'png', 'gif'];
  const extension = obtenerExtension(archivo.name);
  return tiposPermitidos.includes(extension);
}

/**
 * Formatear tama√±o de archivo
 */
export function formatearTama√±oArchivo(bytes) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const tama√±os = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + tama√±os[i];
}

// === UTILIDADES DE URL ===

/**
 * Generar URL de imagen segura
 */
export function generarUrlImagen(rutaImagen, fallback = '/images/placeholder.png') {
  if (!rutaImagen) return fallback;
  
  if (rutaImagen.startsWith('http')) {
    return rutaImagen;
  }
  
  return `/uploads/${rutaImagen}`;
}

// === UTILIDADES DE B√öSQUEDA ===

/**
 * Normalizar texto para b√∫squeda
 */
export function normalizarParaBusqueda(texto) {
  if (!texto) return '';
  
  return texto
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
    .replace(/[^\w\s]/g, '') // Quitar caracteres especiales
    .trim();
}

/**
 * Filtrar array por texto de b√∫squeda
 */
export function filtrarPorBusqueda(array, busqueda, campos) {
  if (!busqueda || busqueda.trim() === '') return array;
  
  const busquedaNormalizada = normalizarParaBusqueda(busqueda);
  
  return array.filter(item => {
    return campos.some(campo => {
      const valor = item[campo];
      if (!valor) return false;
      
      const valorNormalizado = normalizarParaBusqueda(valor.toString());
      return valorNormalizado.includes(busquedaNormalizada);
    });
  });
}

// === UTILIDADES DE PAGINACI√ìN ===

/**
 * Calcular informaci√≥n de paginaci√≥n
 */
export function calcularPaginacion(totalElementos, elementosPorPagina, paginaActual = 1) {
  const totalPaginas = Math.ceil(totalElementos / elementosPorPagina);
  const inicio = (paginaActual - 1) * elementosPorPagina;
  const fin = Math.min(inicio + elementosPorPagina, totalElementos);
  
  return {
    totalElementos,
    totalPaginas,
    paginaActual: Math.max(1, Math.min(paginaActual, totalPaginas)),
    elementosPorPagina,
    inicio,
    fin,
    tienePaginaAnterior: paginaActual > 1,
    tienePaginaSiguiente: paginaActual < totalPaginas
  };
}

// === UTILIDADES DE LOCAL STORAGE (para configuraciones locales) ===

/**
 * Guardar configuraci√≥n local
 */
export function guardarConfigLocal(clave, valor) {
  if (typeof window !== 'undefined') {
    localStorage.setItem(`optica_${clave}`, JSON.stringify(valor));
  }
}

/**
 * Obtener configuraci√≥n local
 */
export function obtenerConfigLocal(clave, valorPorDefecto = null) {
  if (typeof window === 'undefined') return valorPorDefecto;
  
  try {
    const item = localStorage.getItem(`optica_${clave}`);
    return item ? JSON.parse(item) : valorPorDefecto;
  } catch (error) {
    return valorPorDefecto;
  }
}

// Exportar todas las utilidades como default
export default {
  // Fechas
  formatearFecha,
  formatearFechaCorta,
  formatearFechaInput,
  obtenerNombreMes,
  generarNombrePeriodo,
  
  // N√∫meros
  formatearDinero,
  calcularIMC,
  interpretarIMC,
  calcularEdad,
  
  // Texto
  capitalizarPrimera,
  capitalizarPalabras,
  formatearNombreCompleto,
  generarIniciales,
  truncarTexto,
  
  // Estado
  obtenerEstadoVenta,
  obtenerMetodoPago,
  
  // Validaci√≥n
  validarTelefonoMexicano,
  formatearTelefono,
  validarCURP,
  
  // Archivos
  obtenerExtension,
  esImagenValida,
  formatearTama√±oArchivo,
  generarUrlImagen,
  
  // B√∫squeda
  normalizarParaBusqueda,
  filtrarPorBusqueda,
  calcularPaginacion,
  
  // Configuraci√≥n
  guardarConfigLocal,
  obtenerConfigLocal
};


================================================
File: src/lib/validaciones.js
================================================
// === VALIDACIONES PARA SISTEMA √ìPTICA ===

/**
 * Funci√≥n base para validar un esquema
 */
function validarEsquema(datos, esquema) {
  const errores = {};
  let esValido = true;

  for (const [campo, reglas] of Object.entries(esquema)) {
    const valor = datos[campo];
    const erroresCampo = [];

    // Verificar si es requerido
    if (
      reglas.requerido &&
      (!valor || (typeof valor === "string" && valor.trim() === ""))
    ) {
      erroresCampo.push(reglas.mensajeRequerido || `${campo} es requerido`);
    }

    // Si el campo est√° vac√≠o y no es requerido, continuar
    if (!valor && !reglas.requerido) continue;

    // Validar tipo
    if (valor && reglas.tipo) {
      if (
        reglas.tipo === "email" &&
        !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(valor)
      ) {
        erroresCampo.push("Formato de email inv√°lido");
      }

      if (reglas.tipo === "numero" && isNaN(parseFloat(valor))) {
        erroresCampo.push("Debe ser un n√∫mero v√°lido");
      }

      if (reglas.tipo === "fecha" && isNaN(new Date(valor).getTime())) {
        erroresCampo.push("Debe ser una fecha v√°lida");
      }

      if (
        reglas.tipo === "telefono" &&
        !/^\d{10}$/.test(valor.replace(/\D/g, ""))
      ) {
        erroresCampo.push("Debe ser un tel√©fono de 10 d√≠gitos");
      }
    }

    // Validar longitud m√≠nima
    if (valor && reglas.minimo && valor.toString().length < reglas.minimo) {
      erroresCampo.push(`Debe tener al menos ${reglas.minimo} caracteres`);
    }

    // Validar longitud m√°xima
    if (valor && reglas.maximo && valor.toString().length > reglas.maximo) {
      erroresCampo.push(`No debe exceder ${reglas.maximo} caracteres`);
    }

    // Validar rango num√©rico
    if (valor && reglas.tipo === "numero") {
      const num = parseFloat(valor);
      if (reglas.valorMinimo && num < reglas.valorMinimo) {
        erroresCampo.push(`Debe ser mayor o igual a ${reglas.valorMinimo}`);
      }
      if (reglas.valorMaximo && num > reglas.valorMaximo) {
        erroresCampo.push(`Debe ser menor o igual a ${reglas.valorMaximo}`);
      }
    }

    // Validar opciones permitidas
    if (valor && reglas.opciones && !reglas.opciones.includes(valor)) {
      erroresCampo.push(
        `Debe ser una de las opciones: ${reglas.opciones.join(", ")}`
      );
    }

    // Validaci√≥n personalizada
    if (valor && reglas.validacionPersonalizada) {
      const resultadoPersonalizado = reglas.validacionPersonalizada(valor);
      if (resultadoPersonalizado !== true) {
        erroresCampo.push(resultadoPersonalizado);
      }
    }

    if (erroresCampo.length > 0) {
      errores[campo] = erroresCampo;
      esValido = false;
    }
  }

  return { esValido, errores };
}

// === ESQUEMAS DE VALIDACI√ìN ===

/**
 * Esquema para validar datos de login
 */
export const esquemaLogin = {
  nombreUsuario: {
    requerido: true,
    minimo: 3,
    maximo: 50,
    mensajeRequerido: "Nombre de usuario es requerido",
  },
  password: {
    requerido: true,
    minimo: 6,
    mensajeRequerido: "Contrase√±a es requerida",
  },
};

/**
 * Esquema para validar datos de cliente
 */
export const esquemaCliente = {
  nombre_completo: {
    requerido: true,
    minimo: 2,
    maximo: 100,
    mensajeRequerido: "Nombre completo es requerido",
  },
  expediente: {
    requerido: false,
    maximo: 20,
  },
  fecha_nacimiento: {
    requerido: false,
    tipo: "fecha",
  },
  edad: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 1,
    valorMaximo: 120,
  },
  ocupacion: {
    requerido: false,
    maximo: 100,
  },
  direccion: {
    requerido: false,
    maximo: 500,
  },
  email: {
    requerido: false,
    tipo: "email",
    maximo: 100,
  },
  telefono: {
    requerido: false,
    tipo: "telefono",
  },
  celular: {
    requerido: false,
    tipo: "telefono",
  },
  peso: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 1,
    valorMaximo: 500,
  },
  talla: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0.5,
    valorMaximo: 3,
  },
  fr: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 1,
    valorMaximo: 100,
  },
  temperatura: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 30,
    valorMaximo: 45,
  },
  saturacion_oxigeno: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 50,
    valorMaximo: 100,
  },
  ritmo_cardiaco: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 30,
    valorMaximo: 200,
  },
};

/**
 * Esquema para validar datos de graduaci√≥n
 */
/**
 * Esquema para validar datos de graduaci√≥n
 */
export const esquemaGraduacion = {
  cliente_id: {
    requerido: true,
    mensajeRequerido: "Cliente es requerido",
  },
  tipo: {
    requerido: true,
    opciones: ["lejos", "cerca"],
    mensajeRequerido: "Tipo de graduaci√≥n es requerido",
  },
  od_esfera: {
    requerido: false,
    tipo: "numero",
    valorMinimo: -30,
    valorMaximo: 30,
  },
  od_cilindro: {
    requerido: false,
    tipo: "numero",
    valorMinimo: -10,
    valorMaximo: 10,
  },
  od_eje: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
    valorMaximo: 180,
  },
  od_adicion: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
    valorMaximo: 5,
  },
  oi_esfera: {
    requerido: false,
    tipo: "numero",
    valorMinimo: -30,
    valorMaximo: 30,
  },
  oi_cilindro: {
    requerido: false,
    tipo: "numero",
    valorMinimo: -10,
    valorMaximo: 10,
  },
  oi_eje: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
    valorMaximo: 180,
  },
  oi_adicion: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
    valorMaximo: 5,
  },
  fecha_examen: {
    requerido: false,
    tipo: "fecha",
  },
};

/**
 * Esquema para validar datos de venta
 */
export const esquemaVenta = {
  cliente_id: {
    requerido: true,
    mensajeRequerido: "Cliente es requerido",
  },
  marca_armazon: {
    requerido: false,
    maximo: 100,
  },
  laboratorio: {
    requerido: false,
    opciones: ["Laboratorio 1", "Laboratorio 2", "Laboratorio 3"],
  },
  precio_armazon: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
  },
  precio_micas: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
  },
  costo_total: {
    requerido: true,
    tipo: "numero",
    valorMinimo: 0.01,
    mensajeRequerido: "Costo total es requerido",
  },
  deposito_inicial: {
    requerido: false,
    tipo: "numero",
    valorMinimo: 0,
  },
  estado: {
    requerido: false,
    opciones: [
      "pendiente",
      "en_laboratorio",
      "listo",
      "entregado",
      "cancelado",
    ],
  },
  fecha_venta: {
    requerido: false,
    tipo: "fecha",
  },
  fecha_llegada_laboratorio: {
    requerido: false,
    tipo: "fecha",
  },
  fecha_entrega_cliente: {
    requerido: false,
    tipo: "fecha",
  },
};

/**
 * Esquema para validar datos de dep√≥sito
 */
export const esquemaDeposito = {
  venta_id: {
    requerido: true,
    mensajeRequerido: "Venta es requerida",
  },
  monto: {
    requerido: true,
    tipo: "numero",
    valorMinimo: 0.01,
    mensajeRequerido: "Monto es requerido",
  },
  metodo_pago: {
    requerido: true,
    opciones: ["efectivo", "tarjeta", "transferencia"],
    mensajeRequerido: "M√©todo de pago es requerido",
  },
  fecha_deposito: {
    requerido: false,
    tipo: "fecha",
  },
};

// === FUNCIONES DE VALIDACI√ìN ESPEC√çFICAS ===

/**
 * Validar datos de login
 */
export function validarLogin(datos) {
  return validarEsquema(datos, esquemaLogin);
}

/**
 * Validar datos de cliente
 */
export function validarCliente(datos) {
  const resultado = validarEsquema(datos, esquemaCliente);

  // Validaci√≥n adicional: si hay peso y talla, calcular IMC
  if (datos.peso && datos.talla) {
    const imc = datos.peso / (datos.talla * datos.talla);
    if (imc < 10 || imc > 50) {
      if (!resultado.errores.peso) resultado.errores.peso = [];
      resultado.errores.peso.push("Peso y talla parecen inconsistentes");
      resultado.esValido = false;
    }
  }

  return resultado;
}

/**
 * Validar datos de graduaci√≥n
 */
export function validarGraduacion(datos) {
  const resultado = validarEsquema(datos, esquemaGraduacion);

  // Validaci√≥n adicional: si hay cilindro, debe haber eje
  if (datos.od_cilindro && datos.od_cilindro !== 0 && !datos.od_eje) {
    if (!resultado.errores.od_eje) resultado.errores.od_eje = [];
    resultado.errores.od_eje.push("Eje requerido cuando hay cilindro");
    resultado.esValido = false;
  }

  if (datos.oi_cilindro && datos.oi_cilindro !== 0 && !datos.oi_eje) {
    if (!resultado.errores.oi_eje) resultado.errores.oi_eje = [];
    resultado.errores.oi_eje.push("Eje requerido cuando hay cilindro");
    resultado.esValido = false;
  }

  return resultado;
}

/**
 * Validar datos de venta
 */
export function validarVenta(datos) {
  const resultado = validarEsquema(datos, esquemaVenta);

  // Validaci√≥n adicional: costo total debe ser suma de armaz√≥n + micas
  if (datos.precio_armazon && datos.precio_micas && datos.costo_total) {
    const suma =
      parseFloat(datos.precio_armazon) + parseFloat(datos.precio_micas);
    const total = parseFloat(datos.costo_total);

    if (Math.abs(suma - total) > 0.01) {
      if (!resultado.errores.costo_total) resultado.errores.costo_total = [];
      resultado.errores.costo_total.push(
        "Costo total debe coincidir con suma de armaz√≥n + micas"
      );
      resultado.esValido = false;
    }
  }

  return resultado;
}

/**
 * Validar datos de dep√≥sito
 */
export function validarDeposito(datos, costoTotalVenta, totalDepositado = 0) {
  const resultado = validarEsquema(datos, esquemaDeposito);

  // Validaci√≥n adicional: dep√≥sito no puede exceder el saldo restante
  if (datos.monto && costoTotalVenta) {
    const saldoRestante =
      parseFloat(costoTotalVenta) - parseFloat(totalDepositado);
    const montoDeposito = parseFloat(datos.monto);

    if (montoDeposito > saldoRestante && saldoRestante > 0.01) {
      if (!resultado.errores.monto) resultado.errores.monto = [];
      resultado.errores.monto.push(
        `El dep√≥sito no puede exceder el saldo restante ($${saldoRestante.toFixed(
          2
        )})`
      );
      resultado.esValido = false;
    }

    // Validaci√≥n: el dep√≥sito debe ser positivo
    if (montoDeposito <= 0) {
      if (!resultado.errores.monto) resultado.errores.monto = [];
      resultado.errores.monto.push("El monto debe ser mayor a cero");
      resultado.esValido = false;
    }
  }

  return resultado;
}

// === UTILIDADES DE VALIDACI√ìN ===

/**
 * Limpiar datos eliminando campos vac√≠os
 */
export function limpiarDatos(datos) {
  const datosLimpios = {};

  for (const [clave, valor] of Object.entries(datos)) {
    if (valor !== null && valor !== undefined && valor !== "") {
      // Para strings, limpiar espacios
      if (typeof valor === "string") {
        const valorLimpio = valor.trim();
        if (valorLimpio !== "") {
          datosLimpios[clave] = valorLimpio;
        }
      } else {
        datosLimpios[clave] = valor;
      }
    }
  }

  return datosLimpios;
}

/**
 * Convertir tipos de datos seg√∫n esquema
 */
export function convertirTipos(datos, esquema) {
  const datosConvertidos = { ...datos };

  for (const [campo, reglas] of Object.entries(esquema)) {
    if (datosConvertidos[campo] && reglas.tipo) {
      const valor = datosConvertidos[campo];

      if (reglas.tipo === "numero" && typeof valor === "string") {
        const numero = parseFloat(valor);
        if (!isNaN(numero)) {
          datosConvertidos[campo] = numero;
        }
      }

      if (reglas.tipo === "fecha" && typeof valor === "string") {
        const fecha = new Date(valor);
        if (!isNaN(fecha.getTime())) {
          datosConvertidos[campo] = fecha;
        }
      }
    }
  }

  return datosConvertidos;
}

/**
 * Obtener errores en formato plano
 */
export function obtenerErroresPlanos(errores) {
  const erroresPlanos = [];

  for (const [campo, erroresCampo] of Object.entries(errores)) {
    erroresCampo.forEach((error) => {
      erroresPlanos.push(`${campo}: ${error}`);
    });
  }

  return erroresPlanos;
}

export default {
  validarLogin,
  validarCliente,
  validarGraduacion,
  validarVenta,
  validarDeposito,
  limpiarDatos,
  convertirTipos,
  obtenerErroresPlanos,
};


